---
- id: turn_off_everything_if_nobody_is_at_home
  alias: "Turn off everything if nobody is at home"
  initial_state: true
  trigger:
    - platform: state
      entity_id: person.fabian
      from: "home"
      to: "not_home"
      for:
        minutes: 1
    - platform: state
      entity_id: person.samuel
      from: "home"
      to: "not_home"
      for:
        minutes: 1
  condition:
    condition: not
    conditions:
      - condition: state
        entity_id: person.fabian
        state: home
      - condition: state
        entity_id: person.samuel
        state: home
  action:
    - service: light.turn_off
      target:
        entity_id: all
    - service: switch.turn_off
      data:
        entity_id:
          - switch.keller_usb_ports
          - switch.fernseher_keller
    - service: switch.turn_off
      data:
        entity_id:
          #- switch.bett_usb_ports
          - switch.kuchengerate
          - switch.fernseher
          - switch.fernseher_samuel
    - service: media_player.turn_off
      data:
        entity_id: all
    - choose:
        - conditions:
            - condition: state
              entity_id: device_tracker.fabian_pc
              state: "home"
            - condition: numeric_state
              entity_id: sensor.fabian_schreibtisch_power
              above: 20
          sequence:
            - service: notify.telegram_fabian
              data:
                message: "Keiner ist mehr zu Hause! Fabian-PC ist allerdings noch an!"
                data:
                  inline_keyboard:
                    - "Herunterfahren:/shutdownfpc, Ruhezustand:/hibernatefpc"
    - choose:
        - conditions:
            - condition: state
              entity_id: device_tracker.md3f9bmc
              state: "home"
            - condition: numeric_state
              entity_id: sensor.steckerleiste_samuel_energy_power
              above: 20
          sequence:
            - service: notify.telegram_fabian
              data:
                message: "Keiner ist mehr zu Hause. Samuels SChreibtisch ist allerdings noch an und wurde nicht ausgeschaltet!"
                # data:
                #   inline_keyboard:
                #     - "Herunterfahren:/shutdownfpc, Ruhezustand:/hibernatefpc"
            # - service: notify.telegram_samuel
            #   data:
            #     message: "Keiner ist mehr zu Hause. samuel-PC ist allerdings noch an und wurde nicht ausgeschaltet!"
            #     data:
            #       inline_keyboard:
            #         - "Herunterfahren:/shutdownnpc, Ruhezustand:/hibernatenpc"
    - choose:
        - conditions:
            - condition: state
              entity_id: device_tracker.fabian_pc
              state: "not_home"
          sequence:
            - service: input_boolean.turn_off
              data:
                entity_id: input_boolean.fabian_pc_strom
    - choose:
        - conditions:
            - condition: state
              entity_id: device_tracker.md3f9bmc
              state: "not_home"
          sequence:
            - service: input_boolean.turn_off
              data:
                entity_id: input_boolean.samuel_pc_strom
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: climate.samuel_s_zimmer
                  state: "off"
          sequence:
            - service: climate.set_hvac_mode
              data:
                entity_id: climate.samuel_s_zimmer
                hvac_mode: auto
            - service: switch.turn_off
              data:
                entity_id: switch.samuel_s_zimmer_usb_ports
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: climate.wohnzimmer
                  state: "off"
          sequence:
            - service: climate.set_hvac_mode
              data:
                entity_id: climate.wohnzimmer
                hvac_mode: auto
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: climate.fabian_s_zimmer
                  state: "off"
          sequence:
            - service: climate.set_hvac_mode
              data:
                entity_id: climate.fabian_s_zimmer
                hvac_mode: auto
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: climate.bad
                  state: "off"
          sequence:
            - service: climate.set_hvac_mode
              data:
                entity_id: climate.bad
                hvac_mode: auto
    - delay: "00:30:00"
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: person.fabian
                  state: home
                - condition: state
                  entity_id: person.samuel
                  state: home
            - condition: state
              entity_id: input_boolean.gast_modus
              state: "off"
            - condition: template
              value_template: "{{state_attr('sensor.weather_ebersberg_daily', 'forecast')[0]['temperature'] | int <= 10 }}"
            - condition: template
              value_template: "{{state_attr('sensor.weather_ebersberg_daily', 'forecast')[0]['temperature'] | int >= 28 }}"
          sequence:
            - service: cover.close_cover
              target:
                entity_id: all

- id: Automations if coming home
  alias: "Automations if coming home"
  initial_state: true
  trigger:
    - platform: state
      entity_id: person.fabian
      from: "not_home"
      to: "home"
    - platform: state
      entity_id: person.samuel
      from: "not_home"
      to: "home"
  #condition:
  #  condition: template
  #  value_template: "{{ trigger.from_state.last_changed > utcnow() - timedelta(minutes=4) }}"
  action:
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.abwesend_modus
    - service: automation.trigger
      entity_id: automation.set_climate_at_night
    - choose:
        - conditions:
            - condition: sun
              after: sunset
            - condition: time
              before: "23:59:00"
            - condition: or
              conditions:
                - condition: or
                  conditions:
                    - condition: time
                      after: "22:00:00"
                    - condition: state
                      entity_id: binary_sensor.workday_sensor
                      state: "off"
                - condition: state
                  entity_id: binary_sensor.workday_sensor
                  state: "on"
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: person.samuel
                      state: "home"
                    - condition: template
                      value_template: "{{ (as_timestamp(now()) - as_timestamp(states.person.samuel.last_changed) | int < 240) }}"
                  sequence:
                    - service: light.turn_on
                      data:
                        entity_id: light.lampe_samuel
            - choose:
                - conditions:
                    - condition: state
                      entity_id: person.fabian
                      state: "home"
                    - condition: template
                      value_template: "{{ (as_timestamp(now()) - as_timestamp(states.person.fabian.last_changed) | int < 240) }}"
                  sequence:
                    - service: light.turn_on
                      data:
                        entity_id: light.mibedsidelamp2_22e2
    - choose:
        - conditions:
            - condition: sun
              before: sunset
            - condition: sun
              after: sunrise
            - condition: or
              conditions:
                - condition: and
                  conditions:
                    - condition: time
                      after: "07:30:00"
                    - condition: state
                      entity_id: binary_sensor.workday_sensor
                      state: "on"
                - condition: and
                  conditions:
                    - condition: time
                      after: "11:00:00"
                    - condition: state
                      entity_id: binary_sensor.workday_sensor
                      state: "off"
          sequence:
            - choose:
                - conditions:
                    - condition: numeric_state
                      entity_id: sensor.weather_ebersberg_hourly
                      attribute: temperature
                      above: 22
                  sequence:
                    - service: cover.set_cover_position
                      target:
                        entity_id: all
                      data:
                        position: 70
              default:
                - service: cover.open_cover
                  target:
                    entity_id: all
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: person.samuel
                  state: "home"
            - condition: numeric_state
              entity_id: sensor.smart_life_samuel_distance
              below: 100
            - condition: state
              entity_id: person.fabian
              state: "home"
            - condition: template
              value_template: "{{ (as_timestamp(now()) - as_timestamp(states.person.fabian.last_changed) | int < 240) }}"
            - condition: template
              value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.telegram_send_daily_weather_forecast_fabian.attributes.last_triggered) | int > 3600 }}"
          sequence:
            - service: notify.telegram_fabian
              data_template:
                message: "Welcome back. Samuel ist nicht daheim."
    - choose:
        - conditions:
            - condition: numeric_state
              entity_id: counter.vacuum_water_level
              below: 1
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: person.fabian
                      state: home
                    - condition: template
                      value_template: "{{ (as_timestamp(now()) - as_timestamp(states.person.fabian.last_changed) | int < 240) }}"
                  sequence:
                    - service: notify.telegram_fabian
                      data_template:
                        message: "Der Wassertank des Staubsaugroboters sollte zeitnah aufgefüllt werden."
            - choose:
                - conditions:
                    - condition: state
                      entity_id: person.samuel
                      state: home
                    - condition: template
                      value_template: "{{ (as_timestamp(now()) - as_timestamp(states.person.samuel.last_changed) | int < 240) }}"
                  sequence:
                    - service: notify.telegram_samuel
                      data_template:
                        message: "Der Wassertank des Staubsaugroboters sollte zeitnah aufgefüllt werden."
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ as_timestamp(states.automation.trigger_a_full_dust_bin_reminder.attributes.last_triggered) > as_timestamp(states.automation.telegram_dust_bin_emptied.attributes.last_triggered) }}"
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: person.fabian
                      state: home
                    - condition: template
                      value_template: "{{ (as_timestamp(now()) - as_timestamp(states.person.fabian.last_changed) | int < 240) }}"
                  sequence:
                    - service: telegram_bot.send_message
                      data:
                        message: "Der Staubbehälter des Staubsaugroboters könnte langsam voll sein und sollte geleert werden."
                        target: !secret telegram_chat_fabian
                        inline_keyboard:
                          - "Erledigt:/telegramdustbindone"
            - choose:
                - conditions:
                    - condition: state
                      entity_id: person.samuel
                      state: home
                    - condition: template
                      value_template: "{{ (as_timestamp(now()) - as_timestamp(states.person.samuel.last_changed) | int < 240) }}"
                  sequence:
                    - service: telegram_bot.send_message
                      data:
                        message: "Der Staubbehälter des Staubsaugroboters könnte langsam voll sein und sollte geleert werden."
                        target: !secret telegram_chat_samuel
                        inline_keyboard:
                          - "Erledigt:/telegramdustbindone"
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: sensor.bioabfall
                  state: "Morgen"
                - condition: state
                  entity_id: sensor.altpapier
                  state: "Morgen"
                - condition: state
                  entity_id: sensor.restmull
                  state: "Morgen"
                - condition: state
                  entity_id: sensor.gelber_sack
                  state: "Morgen"
            - condition: template
              value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.telegram_waste_put_outside.attributes.last_triggered) | int > 86400 }}"
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: person.fabian
                      state: home
                    - condition: template
                      value_template: "{{ (as_timestamp(now()) - as_timestamp(states.person.fabian.last_changed) | int < 240) }}"
                  sequence:
                    - service: telegram_bot.send_message
                      data_template:
                        message: >
                          Morgen {% if states.sensor.bioabfall.state == "Morgen" %}wird die Biomülltonne{% endif %}{% if states.sensor.altpapier.state == "Morgen" %}wird das Altpapier{% endif %}{% if states.sensor.restmull.state == "Morgen" %}wird die schwarze Tonne{% endif %}{% if states.sensor.gelber_sack.state == "Morgen" %}werden die gelben Säcke{% endif %} abgeholt. Bitte rausstellen.
                        target: !secret telegram_chat_fabian
                        inline_keyboard:
                          - "Erledigt:/telegramwastedone"
            - choose:
                - conditions:
                    - condition: state
                      entity_id: person.samuel
                      state: home
                    - condition: template
                      value_template: "{{ (as_timestamp(now()) - as_timestamp(states.person.samuel.last_changed) | int < 240) }}"
                  sequence:
                    - service: telegram_bot.send_message
                      data_template:
                        message: >
                          Morgen {% if states.sensor.bioabfall.state == "Morgen" %}wird die Biomülltonne{% endif %}{% if states.sensor.altpapier.state == "Morgen" %}wird das Altpapier{% endif %}{% if states.sensor.restmull.state == "Morgen" %}wird die schwarze Tonne{% endif %}{% if states.sensor.gelber_sack.state == "Morgen" %}werden die gelben Säcke{% endif %} abgeholt. Bitte rausstellen.
                        target: !secret telegram_chat_samuel
                        inline_keyboard:
                          - "Erledigt:/telegramwastedone"
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ as_timestamp(states.automation.telegram_washer_emptied.attributes.last_triggered) < as_timestamp(states.automation.set_washing_machine_clean_when_power_drops.attributes.last_triggered) }}"
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: person.fabian
                      state: home
                    - condition: template
                      value_template: "{{ (as_timestamp(now()) - as_timestamp(states.person.fabian.last_changed) | int < 240) }}"
                  sequence:
                    - service: telegram_bot.send_message
                      data:
                        message: Die Waschmaschine muss noch ausgeräumt werden.
                        target: !secret telegram_chat_fabian
                        inline_keyboard:
                          - "Erledigt:/telegramwasherdone"
            - choose:
                - conditions:
                    - condition: state
                      entity_id: person.samuel
                      state: home
                    - condition: template
                      value_template: "{{ (as_timestamp(now()) - as_timestamp(states.person.samuel.last_changed) | int < 240) }}"
                  sequence:
                    - service: telegram_bot.send_message
                      data:
                        message: Die Waschmaschine muss noch ausgeräumt werden.
                        target: !secret telegram_chat_samuel
                        inline_keyboard:
                          - "Erledigt:/telegramwasherdone"
    #- choose:
    #    - conditions:
    #        - condition: template
    #          value_template: "{{ as_timestamp(states.automation.telegram_pouring_done.attributes.last_triggered) < as_timestamp(states.automation.remind_for_pouring.attributes.last_triggered) }}"
    #        - condition: template
    #          value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.automations_if_coming_home.attributes.last_triggered) | int > 10800 }}"
    #      sequence:
    #        - choose:
    #            - conditions:
    #                - condition: state
    #                  entity_id: person.fabian
    #                  state: home
    #                - condition: template
    #                  value_template: "{{ (as_timestamp(now()) - as_timestamp(states.person.fabian.last_changed) | int < 240) }}"
    #              sequence:
    #                - service: telegram_bot.send_message
    #                  data:
    #                    message: Bitte die Pflanzen gießen.
    #                    target: !secret telegram_chat_fabian
    #                    inline_keyboard:
    #                      - "Erledigt:/telegrampouringdone"
    #        - choose:
    #            - conditions:
    #                - condition: state
    #                  entity_id: person.samuel
    #                  state: home
    #                - condition: template
    #                  value_template: "{{ (as_timestamp(now()) - as_timestamp(states.person.samuel.last_changed) | int < 240) }}"
    #              sequence:
    #                - service: telegram_bot.send_message
    #                  data:
    #                    message: Bitte die Pflanzen gießen.
    #                    target: !secret telegram_chat_samuel
    #                    inline_keyboard:
    #                      - "Erledigt:/telegrampouringdone"
    - choose:
        - conditions:
            - condition: state
              entity_id: vacuum.valetudo_dreamez10pro
              state: "error"
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: person.fabian
                      state: home
                    - condition: template
                      value_template: "{{ (as_timestamp(now()) - as_timestamp(states.person.fabian.last_changed) | int < 240) }}"
                  sequence:
                    - service: telegram_bot.send_message
                      data_template:
                        message: >
                          James hatte ein Problem: {{ states.sensor.valetudo_dreamez10pro_error_description.state }}

                          Die Reinigung wurde daher unterbrochen.
                        target: !secret telegram_chat_fabian
            - choose:
                - conditions:
                    - condition: state
                      entity_id: person.samuel
                      state: home
                    - condition: template
                      value_template: "{{ (as_timestamp(now()) - as_timestamp(states.person.samuel.last_changed) | int < 240) }}"
                  sequence:
                    - service: telegram_bot.send_message
                      data_template:
                        message: >
                          James hatte ein Problem: {{ states.sensor.valetudo_dreamez10pro_error_description.state }}

                          Die Reinigung wurde daher unterbrochen.
                        target: !secret telegram_chat_samuel

    # - choose:
    #     - conditions:
    #         - condition: not
    #           conditions:
    #             - condition: state
    #               entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_2_4g_signal_strength
    #               state: "max"
    #       sequence:
    #         - service: select.select_option
    #           data:
    #             option: max
    #           target:
    #             entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_2_4g_signal_strength
    # - delay: "00:00:40"
    # - choose:
    #     - conditions:
    #         - condition: not
    #           conditions:
    #             - condition: state
    #               entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_5g_signal_strength
    #               state: "max"
    #       sequence:
    #         - service: select.select_option
    #           data:
    #             option: max
    #           target:
    #             entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_5g_signal_strength
    #  - service: switch.turn_off
    #  data:
    #  entity_id: switch.fritzbox_3490_portforward_ssh

- id: notify_for_cod_bo6_price_drop
  alias: "Notify on CoD Bo6 Price Drop"
  initial_state: true
  trigger:
    - platform: numeric_state
      entity_id: sensor.keyforsteam_166331
      attribute: priceCard
      below: 52
  condition:
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_on_cod_bo6_price_drop.attributes.last_triggered) | int > 86400 }}" #86400 seconds = 7 days -> Do not trigger the automation more than once a week
  action:
    - service: telegram_bot.send_message
      data:
        message: >
          Call of Duty Black Ops 6 {{ state_attr('sensor.keyforsteam_166331', 'edition') }} hat den Preis {{ state_attr('sensor.keyforsteam_166331', 'priceCard') }} € bei {{ state_attr('sensor.keyforsteam_166331', 'merchant') }} mit dem Code {{ state_attr('sensor.keyforsteam_166331', 'coupon') }} - Jetzt prüfen: https://www.keyforsteam.de/
        target: !secret telegram_chat_fabian

- id: open_door_for_fabian
  alias: "Open the door for Fabian if coming home"
  initial_state: true
  trigger:
    - platform: state
      entity_id: person.fabian
      from: "not_home"
      to: "home"
    - platform: numeric_state
      entity_id: sensor.smart_life_fabian_distance
      below: 1700
      for:
        seconds: 5
  condition:
    - condition: not
      conditions:
        - condition: state
          entity_id: person.fabian
          state: Volleyball
        - condition: state
          entity_id: person.fabian
          state: Einkaufen
        - condition: state
          entity_id: device_tracker.pixel_8_pro
          state: home
        - condition: numeric_state
          entity_id: person.fabian
          attribute: gps_accuracy
          above: 500
    - condition: or
      conditions:
        - condition: numeric_state
          entity_id: sensor.smart_life_fabian_distance
          below: 300
        - condition: not
          conditions:
            - condition: state
              entity_id: sensor.smart_life_fabian_direction_of_travel
              state: "away_from"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.open_the_door_for_fabian_if_coming_home.attributes.last_triggered) | int > 300 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.open_the_door_for_samuel_if_coming_home.attributes.last_triggered) | int > 180 }}"
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.schloss
    # - service: telegram_bot.send_message
    #   data:
    #     target: !secret telegram_chat_fabian
    #     message: "Gartentor wurde automatisch geöffnet, da du gleich daheim bist."

- id: open_door_for_samuel
  alias: "Open the door for samuel if coming home"
  initial_state: true
  trigger:
    - platform: state
      entity_id: person.samuel
      from: "not_home"
      to: "home"
    - platform: numeric_state
      entity_id: sensor.smart_life_samuel_distance
      below: 1700
      for:
        seconds: 2
  condition:
    - condition: not
      conditions:
        - condition: state
          entity_id: device_tracker.redmi_note_10_pro
          state: home
        - condition: state
          entity_id: person.samuel
          state: Volleyball
        - condition: state
          entity_id: person.samuel
          state: Einkaufen
        - condition: numeric_state
          entity_id: person.samuel
          attribute: gps_accuracy
          above: 500
    - condition: or
      conditions:
        - condition: numeric_state
          entity_id: sensor.smart_life_samuel_distance
          below: 300
        - condition: not
          conditions:
            - condition: state
              entity_id: sensor.smart_life_samuel_direction_of_travel
              state: "away_from"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.open_the_door_for_fabian_if_coming_home.attributes.last_triggered) | int > 180 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.open_the_door_for_samuel_if_coming_home.attributes.last_triggered) | int > 300 }}"
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.schloss

- id: open_door_for_adri
  alias: "Open the door for Adri if coming home"
  initial_state: false
  trigger:
    - platform: state
      entity_id: person.adri
      from: "not_home"
      to: "home"
  condition:
    - condition: not
      conditions:
        - condition: state
          entity_id: device_tracker.iphone
          state: home
    - condition: numeric_state
      entity_id: person.adri
      attribute: gps_accuracy
      below: 400
    - condition: or
      conditions:
        - condition: state
          entity_id: person.fabian
          state: home
        - condition: state
          entity_id: person.samuel
          state: home
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.open_the_door_for_fabian_if_coming_home.attributes.last_triggered) | int > 180 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.open_the_door_for_samuel_if_coming_home.attributes.last_triggered) | int > 180 }}"
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.schloss
    - service: telegram_bot.send_message
      data:
        target: !secret telegram_chat_adrian
        message: "Gartentor wurde automatisch geöffnet, da du gleich bei Fabi bist und die Google Homes klingeln."
    - choose:
        - conditions:
            - condition: and
              conditions:
                - condition: time
                  before: "22:00:00"
                - condition: time
                  after: "10:00:00"
                - condition: state
                  entity_id: input_boolean.leiser_modus
                  state: "off"
          sequence:
            - service: notify.mobile_app_pixel_8_pro
              data:
                message: "Adri ist gleich da"
                data:
                  push:
                    sound:
                      name: "default"
                      critical: 1
                      volume: 0.7
            - service: media_player.volume_set
              data:
                volume_level: >
                  {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                entity_id: media_player.wohnzimmer_uhr
            - service: tts.speak
              continue_on_error: true
              target:
                entity_id: tts.google_de_de
              data:
                media_player_entity_id:
                  - media_player.wohnzimmer_uhr
                  - media_player.kuche_lautsprecher
                message: "Adri ist gleich da."
            - service: media_player.volume_set
              data:
                volume_level: >
                  {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                entity_id: media_player.wohnzimmer_uhr
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.keller_tv
                  state: "unavailable"
          sequence:
            - service: androidtv.adb_command
              data:
                entity_id: media_player.keller_tv
                command: "am start -a android.intent.action.VIEW -d /sdcard/doorbell.wav -t audio/wav"
            - service: notify.keller_tv
              continue_on_error: true
              data:
                message: "Adri ist gleich da."

- id: open_door_for_kai
  alias: "Open the door for Kai if coming home"
  initial_state: false
  trigger:
    - platform: state
      entity_id: person.kai
      from: "not_home"
      to: "home"
  condition:
    - condition: not
      conditions:
        - condition: state
          entity_id: device_tracker.ks_2
          state: home
    - condition: numeric_state
      entity_id: person.kai
      attribute: gps_accuracy
      below: 400
    - condition: or
      conditions:
        - condition: state
          entity_id: person.fabian
          state: home
        - condition: state
          entity_id: person.samuel
          state: home
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.open_the_door_for_fabian_if_coming_home.attributes.last_triggered) | int > 180 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.open_the_door_for_samuel_if_coming_home.attributes.last_triggered) | int > 180 }}"
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.schloss
    - service: telegram_bot.send_message
      data:
        target: !secret telegram_chat_kai
        message: "Gartentor wurde automatisch geöffnet, da du gleich bei Fabi bist und die Google Homes klingeln."
    - choose:
        - conditions:
            - condition: and
              conditions:
                - condition: time
                  before: "22:00:00"
                - condition: time
                  after: "10:00:00"
                - condition: state
                  entity_id: input_boolean.leiser_modus
                  state: "off"
          sequence:
            - service: notify.mobile_app_pixel_8_pro
              data:
                message: "Kai ist gleich da"
                data:
                  push:
                    sound:
                      name: "default"
                      critical: 1
                      volume: 0.7
            - service: media_player.volume_set
              data:
                volume_level: >
                  {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                entity_id: media_player.wohnzimmer_uhr
            - service: tts.speak
              continue_on_error: true
              target:
                entity_id: tts.google_de_de
              data:
                media_player_entity_id:
                  - media_player.wohnzimmer_uhr
                  - media_player.kuche_lautsprecher
                message: "Kai ist gleich da."
            - service: media_player.volume_set
              data:
                volume_level: >
                  {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                entity_id: media_player.wohnzimmer_uhr
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.keller_tv
                  state: "unavailable"
          sequence:
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: "am start -a android.intent.action.VIEW -d /sdcard/doorbell.wav -t audio/wav"
            - service: notify.keller_tv
              continue_on_error: true
              data:
                message: "Kai ist gleich da."

- id: open_door_for_flo
  alias: "Open the door for Flo if coming home"
  initial_state: true
  trigger:
    - platform: state
      entity_id: person.flo
      from: "not_home"
      to: "home"
  condition:
    - condition: not
      conditions:
        - condition: state
          entity_id: device_tracker.galaxy_s_22
          state: home
    - condition: numeric_state
      entity_id: person.flo
      attribute: gps_accuracy
      below: 250
    - condition: or
      conditions:
        - condition: state
          entity_id: person.fabian
          state: home
        - condition: state
          entity_id: person.samuel
          state: home
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.open_the_door_for_fabian_if_coming_home.attributes.last_triggered) | int > 180 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.open_the_door_for_samuel_if_coming_home.attributes.last_triggered) | int > 180 }}"
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.schloss
    #  - service: telegram_bot.send_message
    #    data:
    #      target: !secret telegram_chat_flo
    #      message: 'Gartentor wurde automatisch geöffnet, da du gleich bei Fabi bist und die Google Homes klingeln.'
    - choose:
        - conditions:
            - condition: and
              conditions:
                - condition: time
                  before: "22:00:00"
                - condition: time
                  after: "10:00:00"
                - condition: state
                  entity_id: input_boolean.leiser_modus
                  state: "off"
          sequence:
            - service: notify.mobile_app_pixel_8_pro
              data:
                message: "Flo ist gleich da"
                data:
                  push:
                    sound:
                      name: "default"
                      critical: 1
                      volume: 0.7
            - service: media_player.volume_set
              data:
                volume_level: >
                  {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                entity_id: media_player.wohnzimmer_uhr
            - service: tts.speak
              continue_on_error: true
              target:
                entity_id: tts.google_de_de
              data:
                media_player_entity_id:
                  - media_player.wohnzimmer_uhr
                  - media_player.kuche_lautsprecher
                message: "Flo ist gleich da."
            - service: media_player.volume_set
              data:
                volume_level: >
                  {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                entity_id: media_player.wohnzimmer_uhr
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.keller_tv
                  state: "unavailable"
          sequence:
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: "am start -a android.intent.action.VIEW -d /sdcard/doorbell.wav -t audio/wav"
            - service: notify.keller_tv
              continue_on_error: true
              data:
                message: "Flo ist gleich da."

#  - id: notify_if_someone_joined_lan_play_server
#    alias: Notify if someone joined lan play server
#    trigger:
#      - platform: numeric_state
#        entity_id: sensor.switch_lan_play_online
#        above: 0
#    condition:
#      - condition: template
#        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_if_someone_joined_lan_play_server.attributes.last_triggered) | int > 300 }}"
#    action:
#      - service: telegram_bot.send_message
#        data_template:
#          target: !secret telegram_chat_fabian
#          message: 'Jemand ist dem LAN-Play Server beigetreten. Spieleranzahl: {{ states.sensor.switch_lan_play_online.state }}'

#   - id: turn_on_ventilator_if_coming_home
#     alias: 'Turn on ventilator if coming home'
#     initial_state: true
#     trigger:
#       - platform: state
#         entity_id: person.fabian
#         from: 'not_home'
#         to: 'home'
#       - platform: state
#         entity_id: person.samuel
#         from: 'not_home'
#         to: 'home'
#     condition:
#       condition: and
#       conditions:
#         - condition: numeric_state
#           entity_id: 'sensor.weather_ebersberg_hourly'
#           attribute: temperature
#           above: 22
#         - condition: time
#           after: '12:00:00'
#           before: '21:00:00'
#     action:
#       - service: switch.turn_on
#         data:
#           entity_id: switch.ventilator

- id: turn_off_light_at_night_notify
  alias: "Turn off light at night - notify"
  initial_state: true
  trigger:
    platform: time
    at: "00:30:00"
  condition:
    - condition: state
      entity_id: input_boolean.gast_modus
      state: "off"
    - condition: state
      entity_id: binary_sensor.workday_sensor
      state: "on"
    - condition: template
      value_template: >
        {% set domain = 'light' %}
        {% set state = 'on' %}
        {{ states[domain] | selectattr('state','eq', state) | list | count > 0 }}
  action:
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.keller_tv
                  state: "unavailable"
            - condition: template
              value_template: >
                {% set domain = 'light' %}
                {% set state = 'on' %}
                {{ states[domain] | selectattr('state','eq', state) | list | count > 1 }}
          sequence:
            - choose:
                - conditions:
                    - condition: or
                      conditions:
                        - condition: state
                          entity_id: person.fabian
                          state: "home"
                  sequence:
                    - service: telegram_bot.send_message
                      data_template:
                        target: !secret telegram_chat_fabian
                        message: >
                          Es sind noch nachfolgende Lichter an, diese werden in 20 Minuten ausgeschaltet, außer im Keller:

                          {% set lights_on = states.light | selectattr('state', 'eq', 'on') | map(attribute='name') | list %}

                          {% for light in lights_on %}
                            - {{ light }}
                          {% endfor %}
                        inline_keyboard:
                          - "Abbruch:/cancellight, Okay:/telegramno"
            - choose:
                - conditions:
                    - condition: or
                      conditions:
                        - condition: state
                          entity_id: person.samuel
                          state: "home"
                  sequence:
                    - service: telegram_bot.send_message
                      data_template:
                        target: !secret telegram_chat_samuel
                        message: >
                          Es sind noch nachfolgende Lichter an, diese werden in 20 Minuten ausgeschaltet, außer im Keller:

                          {% set lights_on = states.light | selectattr('state', 'eq', 'on') | map(attribute='name') | list %}

                          {% for light in lights_on %}
                            - {{ light }}
                          {% endfor %}
                        inline_keyboard:
                          - "Abbruch:/cancellight, Okay:/telegramno"
      default:
        - service: telegram_bot.send_message
          data_template:
            target: !secret telegram_chat_fabian
            message: >
              Es sind noch nachfolgende Lichter an, diese werden in 20 Minuten ausgeschaltet, außer im Keller:

              {% set lights_on = states.light | selectattr('state', 'eq', 'on') | map(attribute='name') | list %}

              {% for light in lights_on %}
                - {{ light }}
              {% endfor %}
            inline_keyboard:
              - "Abbruch:/cancellight, Okay:/telegramno"
        - service: telegram_bot.send_message
          data_template:
            target: !secret telegram_chat_samuel
            message: >
              Es sind noch nachfolgende Lichter an, diese werden in 20 Minuten ausgeschaltet, außer im Keller:

              {% set lights_on = states.light | selectattr('state', 'eq', 'on') | map(attribute='name') | list %}

              {% for light in lights_on %}
                - {{ light }}
              {% endfor %}
            inline_keyboard:
              - "Abbruch:/cancellight, Okay:/telegramno"

- id: turn_off_light_at_night
  alias: "Turn off light at night"
  initial_state: true
  trigger:
    platform: time
    at: "00:50:00"
  condition:
    - condition: template
      value_template: >
        {% set domain = 'light' %}
        {% set state = 'on' %}
        {{ states[domain] | selectattr('state','eq', state) | list | count > 0 }}
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.telegram_answer_cancel_light_turn_off.attributes.last_triggered) | int > 1500 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.turn_off_light_at_night_notify.attributes.last_triggered) | int < 1800 }}"
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {% set domain = 'light' %}
                {% set state = 'on' %}
                {{ states[domain] | selectattr('state','eq', state) | list | count > 1 }}
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.keller_tv
                  state: "unavailable"
          sequence:
            - service: light.turn_off
              data:
                area_id:
                  - 7c05afe47efd44f5a0a064769ad6e105 # Wohnzimmer
                  - 33e9a108bf1948e5848f156e0851d50c # Fabians Zimmer
                  - b67ac5462e454381aa87f812161d8578 # Samuels Zimmer
            - choose:
                - conditions:
                    - condition: or
                      conditions:
                        - condition: state
                          entity_id: person.fabian
                          state: "home"
                        - condition: numeric_state
                          entity_id: sensor.smart_life_fabian_distance
                          below: 100
                  sequence:
                    - service: telegram_bot.send_message
                      data_template:
                        target: !secret telegram_chat_fabian
                        message: "Alle Lichter (außer im Keller) wurden automatisch ausgeschaltet, da diese vermutlich vergessen wurden."
            - choose:
                - conditions:
                    - condition: or
                      conditions:
                        - condition: state
                          entity_id: person.samuel
                          state: "home"
                        - condition: numeric_state
                          entity_id: sensor.smart_life_samuel_distance
                          below: 10
                  sequence:
                    - service: telegram_bot.send_message
                      data_template:
                        target: !secret telegram_chat_samuel
                        message: "Alle Lichter (außer im Keller) wurden automatisch ausgeschaltet, da diese vermutlich vergessen wurden."
      default:
        - service: light.turn_off
          data:
            area_id:
              - 7c05afe47efd44f5a0a064769ad6e105 # Wohnzimmer
              - 33e9a108bf1948e5848f156e0851d50c # Fabians Zimmer
              - b67ac5462e454381aa87f812161d8578 # Samuels Zimmer
        - choose:
            - conditions:
                - condition: or
                  conditions:
                    - condition: state
                      entity_id: person.fabian
                      state: "home"
                    - condition: numeric_state
                      entity_id: sensor.smart_life_fabian_distance
                      below: 100
              sequence:
                - service: telegram_bot.send_message
                  data_template:
                    target: !secret telegram_chat_fabian
                    message: "Alle Lichter wurden automatisch ausgeschaltet, da diese vermutlich vergessen wurden."
            - conditions:
                - condition: or
                  conditions:
                    - condition: state
                      entity_id: person.samuel
                      state: "home"
                    - condition: numeric_state
                      entity_id: sensor.smart_life_samuel_distance
                      below: 100
              sequence:
                - service: telegram_bot.send_message
                  data_template:
                    target: !secret telegram_chat_samuel
                    message: "Alle Lichter wurden automatisch ausgeschaltet, da diese vermutlich vergessen wurden."

- id: turn_off_devices_at_night_notify
  alias: "Turn off devices at night - notify"
  initial_state: true
  trigger:
    platform: time
    at: "03:30:00"
  condition:
    - condition: state
      entity_id: binary_sensor.workday_sensor
      state: "off"
    - condition: or
      conditions:
        - condition: state
          entity_id: switch.fernseher
          state: "on"
        #- condition: state
        #  entity_id: switch.kuhlschrank
        #  state: "on"
        - condition: state
          entity_id: switch.fernseher_keller
          state: "on"
        - condition: template
          value_template: >
            {% set domain = 'light' %}
            {% set state = 'on' %}
            {{ states[domain] | selectattr('state','eq', state) | list | count > 0 }}
  action:
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.smart_life_fabian_distance
                  below: 100
                - condition: state
                  entity_id: person.fabian
                  state: "home"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_fabian
                message: >
                  Es sind noch nachfolgende Geräte an, diese werden in 20 Minuten ausgeschaltet, außer im Keller:

                  {% set lights_on = states.light | selectattr('state', 'eq', 'on') | map(attribute='name') | list %}
                  {% set switches_on = states.switch | selectattr('state', 'eq', 'on') | selectattr('entity_id', 'in', ['switch.fernseher', 'switch.fernseher_samuel']) | map(attribute='name') | list %}

                  {% for light in lights_on %}
                    - {{ light }}
                  {% endfor %}

                  {% for switch in switches_on %}
                    - {{ switch }} ist eingeschaltet
                  {% endfor %}
                inline_keyboard:
                  - "Abbruch:/cancellight, Okay:/telegramno"

    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.smart_life_samuel_distance
                  below: 5
                - condition: state
                  entity_id: person.samuel
                  state: "home"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_samuel
                message: >
                  Es sind noch nachfolgende Geräte an, diese werden in 20 Minuten ausgeschaltet, außer im Keller:

                  {% set lights_on = states.light | selectattr('state', 'eq', 'on') | map(attribute='name') | list %}
                  {% set switches_on = states.switch | selectattr('state', 'eq', 'on') | selectattr('entity_id', 'in', ['switch.fernseher', 'switch.fernseher_samuel']) | map(attribute='name') | list %}

                  {% for light in lights_on %}
                    - {{ light }}
                  {% endfor %}

                  {% for switch in switches_on %}
                    - {{ switch }} ist eingeschaltet
                  {% endfor %}
                inline_keyboard:
                  - "Abbruch:/cancellight, Okay:/telegramno"

- id: turn_off_devices_at_night
  alias: "Turn off devices at night"
  initial_state: true
  trigger:
    platform: time
    at: "04:50:00"
  action:
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: switch.fernseher
                  state: "on"
                #- condition: state
                #  entity_id: switch.kuhlschrank
                #  state: "on"
                - condition: state
                  entity_id: switch.fernseher_keller
                  state: "on"
                - condition: template
                  value_template: >
                    {% set domain = 'light' %}
                    {% set state = 'on' %}
                    {{ states[domain] | selectattr('state','eq', state) | list | count > 0 }}
            - condition: template
              value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.telegram_answer_cancel_light_turn_off.attributes.last_triggered) | int > 1500 }}"
            - condition: template
              value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.turn_off_devices_at_night_notify.attributes.last_triggered) | int < 1800 }}"
          sequence:
            - service: switch.turn_off
              entity_id:
                - switch.fernseher
                #- switch.kuhlschrank
                - switch.fernseher_keller
            - service: light.turn_off
              entity_id: all
            - service: media_player.turn_off
              entity_id: media_player.keller_tv
            - choose:
                - conditions:
                    - condition: or
                      conditions:
                        - condition: numeric_state
                          entity_id: sensor.smart_life_fabian_distance
                          below: 100
                        - condition: state
                          entity_id: person.fabian
                          state: "home"
                  sequence:
                    - service: telegram_bot.send_message
                      data_template:
                        target: !secret telegram_chat_fabian
                        message: "Fernseher & Lichter wurden automatisch ausgeschaltet, da diese vermutlich vergessen wurden."
            - choose:
                - conditions:
                    - condition: or
                      conditions:
                        - condition: numeric_state
                          entity_id: sensor.smart_life_samuel_distance
                          below: 100
                        - condition: state
                          entity_id: person.samuel
                          state: "home"
                  sequence:
                    - service: telegram_bot.send_message
                      data_template:
                        target: !secret telegram_chat_samuel
                        message: "Fernseher & Lichter wurden automatisch ausgeschaltet, da diese vermutlich vergessen wurden."
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ as_timestamp(now()) - as_timestamp(states.sensor.zorneding_to_leuchtenbergring.last_updated) | int > 16400 }}"
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: update.home_assistant_core_update
                      state: "on"
                  sequence:
                    - service: telegram_bot.send_message
                      data_template:
                        target: !secret telegram_chat_fabian
                        message: >
                          Home Assistant {{ states.update.home_assistant_core_update.attributes.latest_version }} wird nun installiert um HA neuzustarten, da DB API Verbindung verloren wurde.

                          Changelog HA: {{ states.update.home_assistant_core_update.attributes.release_url }}
                    - service: update.install
                      data:
                        entity_id: update.home_assistant_core_update
              default:
                - service: telegram_bot.send_message
                  data_template:
                    target: !secret telegram_chat_fabian
                    message: "Starte Homeassistant neu, da DB API Verbindung verloren wurde."
                - service: homeassistant.restart

- id: set_high_climate_in_bathroom_to_auto
  alias: "Set high climate in bathroom to auto"
  initial_state: true
  trigger:
    - platform: state
      entity_id: "climate.bad"
      to: "heat"
      for:
        minutes: 10
    - platform: state
      entity_id: "climate.bad"
      to: "heat"
      for:
        minutes: 25
  condition:
    - condition: numeric_state
      entity_id: "climate.bad"
      attribute: temperature
      above: 18
  action:
    - service: climate.set_hvac_mode
      data:
        entity_id: climate.bad
        hvac_mode: auto

- id: set_high_climate_to_lower_value
  alias: "Set high climate to lower value"
  initial_state: true
  trigger:
    - platform: numeric_state
      entity_id: "climate.samuel_s_zimmer"
      attribute: temperature
      above: 20
      for:
        minutes: 15
    - platform: numeric_state
      entity_id: "climate.fabian_s_zimmer"
      attribute: temperature
      above: 20
      for:
        minutes: 15
    - platform: numeric_state
      entity_id: "climate.bad"
      attribute: temperature
      above: 20
      for:
        minutes: 8
    - platform: numeric_state
      entity_id: "climate.wohnzimmer"
      attribute: temperature
      above: 22
      for:
        minutes: 25
  action:
    - choose:
        - conditions:
            - condition: numeric_state
              entity_id: "climate.samuel_s_zimmer"
              attribute: temperature
              above: 20
            - condition: state
              entity_id: "climate.samuel_s_zimmer"
              state: "heat"
          sequence:
            - service: climate.set_temperature
              data:
                entity_id: climate.samuel_s_zimmer
                temperature: 20
                hvac_mode: heat
    - choose:
        - conditions:
            - condition: numeric_state
              entity_id: "climate.fabian_s_zimmer"
              attribute: temperature
              above: 20
            - condition: state
              entity_id: "climate.fabian_s_zimmer"
              state: "heat"
          sequence:
            - service: climate.set_temperature
              data:
                entity_id: climate.fabian_s_zimmer
                temperature: 20
                hvac_mode: heat
    - choose:
        - conditions:
            - condition: numeric_state
              entity_id: "climate.bad"
              attribute: temperature
              above: 20
            - condition: state
              entity_id: "climate.bad"
              state: "heat"
          sequence:
            - service: climate.set_temperature
              data:
                entity_id: climate.bad
                temperature: 20
                hvac_mode: heat
    - choose:
        - conditions:
            - condition: numeric_state
              entity_id: "climate.wohnzimmer"
              attribute: temperature
              above: 22
            - condition: state
              entity_id: "climate.wohnzimmer"
              state: "heat"
          sequence:
            - service: climate.set_temperature
              data:
                entity_id: climate.wohnzimmer
                temperature: 20
                hvac_mode: heat

- id: set_climate_at_night
  alias: "Set climate at night"
  initial_state: true
  trigger:
    platform: time
    at: "00:50:00"
  action:
    - service: hassio.addon_stop
      data:
        addon: db21ed7f_epicgamesfree
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.thermostate_aus
              state: "off"
          sequence:
            - service: climate.set_hvac_mode
              data:
                entity_id:
                  - climate.wohnzimmer
                  - climate.fabian_s_zimmer
                  - climate.samuel_s_zimmer
                  - climate.bad
                hvac_mode: "auto"
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.gast_modus
              state: "off"
            - condition: not
              conditions:
                - condition: state
                  entity_id: person.fabian
                  state: "home"
            - condition: state
              entity_id: person.samuel
              state: "home"
          sequence:
            - service: climate.set_temperature
              data:
                entity_id: climate.fabian_s_zimmer
                temperature: 17
                hvac_mode: heat
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.gast_modus
              state: "off"
            - condition: not
              conditions:
                - condition: state
                  entity_id: person.samuel
                  state: "home"
            - condition: state
              entity_id: person.fabian
              state: "home"
          sequence:
            - service: climate.set_temperature
              data:
                entity_id: climate.samuel_s_zimmer
                temperature: 17
                hvac_mode: heat
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.thermostate_aus
              state: "on"
          sequence:
            - service: climate.set_hvac_mode
              data:
                entity_id:
                  - climate.wohnzimmer
                  - climate.fabian_s_zimmer
                  - climate.samuel_s_zimmer
                  - climate.bad
                hvac_mode: "off"

- id: set_climate_on_weekdays
  alias: "Set climate on weekdays"
  initial_state: true
  trigger:
    - platform: time
      at: "16:15:00"
    - platform: time
      at: "21:00:00"
  condition:
    - condition: time
      weekday:
        - mon
        - tue
        - wed
        - thu
        - sun
    - condition: state
      entity_id: input_boolean.thermostate_aus
      state: "off"
  action:
    - service: climate.set_hvac_mode
      data:
        entity_id: climate.wohnzimmer
        hvac_mode: "auto"

- id: set_wifi_settings_at_night
  alias: "Set wifi settings at night"
  initial_state: true
  trigger:
    - platform: time
      at: "00:00:00"
  condition:
    - condition: state
      entity_id: binary_sensor.workday_sensor
      state: "on"
    - condition: state
      entity_id: switch.fernseher_keller
      state: "off"
    - condition: state
      entity_id: switch.fernseher
      state: "off"
    - condition: state
      entity_id: input_boolean.gast_modus
      state: "off"
  action:
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_2_4g_signal_strength
                  state: "min"
          sequence:
            - service: select.select_option
              data:
                option: min
              target:
                entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_2_4g_signal_strength
    - delay: "00:01:00"
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_5g_signal_strength
                  state: "min"
          sequence:
            - service: select.select_option
              data:
                option: min
              target:
                entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_5g_signal_strength

# - id: set_wifi_settings_at_morning
#   alias: "Set wifi settings at morning"
#   initial_state: true
#   trigger:
#     - platform: time
#       at: "00:06:15"
#   condition:
#     - condition: time
#       weekday:
#         - mon
#         - tue
#         - wed
#         - thu
#         - fri
#   action:
#     - choose:
#         - conditions:
#             - condition: not
#               conditions:
#                 - condition: state
#                   entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_2_4g_signal_strength
#                   state: "max"
#           sequence:
#             - service: select.select_option
#               data:
#                 option: max
#               target:
#                 entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_2_4g_signal_strength
#     - delay: "00:01:00"
#     - choose:
#         - conditions:
#             - condition: not
#               conditions:
#                 - condition: state
#                   entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_5g_signal_strength
#                   state: "max"
#           sequence:
#             - service: select.select_option
#               data:
#                 option: max
#               target:
#                 entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_5g_signal_strength

- id: remind_for_unavailable_device
  alias: "Remind for unavailable device"
  initial_state: false
  mode: single
  trigger:
    platform: time
    at: "17:10:00"
  condition:
    - condition: template
      value_template: >
        {% set relevant_domains = ['switch', 'light', 'input_button', 'climate'] %}
        {% set excluded = ['light.keller_leds_flaschen', 'light.deckenlampe_samuel', 'switch.fernseher_old', 'light.prismatik'] %}
        {% set unavailable_devices = states | selectattr('domain', 'in', relevant_domains)
          | selectattr('state', 'eq', 'unavailable')
          | rejectattr('entity_id', 'in', excluded)
          | list %}
        {{ unavailable_devices | length > 0 }}
    - condition: template
      value_template: >
        {% set last_triggered = states.automation.remind_for_unavailable_device.attributes.last_triggered %}
        {{ not last_triggered or (now() - as_datetime(last_triggered)).total_seconds() > 3200 }}
  action:
    - variables:
        excluded:
          [
            "light.keller_leds_flaschen",
            "light.deckenlampe_samuel",
            "switch.fernseher_old",
            "light.prismatik",
          ]
        unavailable_devices: >
          {{ states | selectattr('domain', 'in', relevant_domains)
            | selectattr('state', 'eq', 'unavailable')
            | rejectattr('entity_id', 'in', excluded)
            | map(attribute='entity_id') | list }}
    - service: telegram_bot.send_message
      data:
        target: !secret telegram_chat_fabian
        disable_notification: true
        message: >
          {{ unavailable_devices | length }} Geräte sind nicht erreichbar, bitte prüfen:

          {{ unavailable_devices | join(', ') }}

- id: activate_guest_mode_if_guest_is_here
  alias: "Activate guest mode if guest is here"
  initial_state: false
  trigger:
    - platform: time
      at: "01:00:00"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.gast_modus
        state: "off"
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.activate_guest_mode_if_guest_is_here.attributes.last_triggered) | int > 86400 }}"
      - condition: or
        conditions:
          - condition: state
            entity_id: person.adri
            state: "home"
          - condition: state
            entity_id: person.kai
            state: "home"
          - condition: state
            entity_id: person.fabio
            state: "home"
  action:
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.gast_modus
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_fabian
        message: "Gast Modus wuremand vermutlich übernachtet. Automationen in Samuels Zimmer sind dadurch eingeschränkt."
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_samuel
        message: "Gast Modus wurde aktiviert, da jemand vermutlich übernachtet. Automationen in Samuels Zimmer sind dadurch eingeschränkt."

- id: deactivate_guest_mode_if_no_guest_is_here
  alias: "Deactivate guest mode if no guest is here"
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.gast_modus
      to: "on"
      for:
        days: 1
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.gast_modus
        state: "on"
      - condition: not
        conditions:
          - condition: state
            entity_id: person.adri
            state: "home"
          - condition: state
            entity_id: person.kai
            state: "home"
          - condition: state
            entity_id: person.fabio
            state: "home"
  action:
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.gast_modus
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_fabian
        message: "Gast Modus wurde deaktiviert, da niemand mehr zu Besuch ist."

- id: reactivate_adguard_protection
  alias: "Reactivate Adguard Protection"
  initial_state: true
  trigger:
    - platform: state
      entity_id: switch.adguard_protection
      to: "off"
      for:
        hours: 12
    - platform: state
      entity_id: switch.adguard_filtering
      to: "off"
      for:
        hours: 12
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.adguard_protection
    - service: switch.turn_on
      data:
        entity_id: switch.adguard_filtering
    # - service: telegram_bot.send_message
    #   data_template:
    #     target: !secret telegram_chat_fabian
    #     message: "Adguard wurde wieder eingeschaltet."

- id: deactivate_silent_mode_after_12_hours
  alias: "Deactivate silent mode after 12 hours"
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.leiser_modus
      to: "on"
      for:
        hours: 12
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.leiser_modus
        state: "on"
      - condition: state
        entity_id: input_boolean.abwesend_modus
        state: "off"
  action:
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_fabian
        message: "Der Leise Modus sollte deaktiviert werden, da er bereits seit 12 Stunden aktiv ist."

- id: remind_fabi_to_ventilate
  alias: "Remind Fabi to ventilate"
  initial_state: false
  trigger:
    - platform: state
      entity_id: device_tracker.fabian_pc
      to: "home"
      for:
        hours: 4
    - platform: state
      entity_id: device_tracker.c_pf38fwqx_pari
      to: "home"
      for:
        hours: 4
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: climate.fabian_s_zimmer
        attribute: current_humidity
        above: 55
      - condition: time
        before: "22:00:00"
      - condition: state
        entity_id: input_boolean.leiser_modus
        state: "off"
      - condition: or
        conditions:
          - condition: state
            entity_id: device_tracker.fabian_pc
            state: "home"
          - condition: state
            entity_id: device_tracker.c_pf38fwqx_pari
            state: "home"
  action:
    - service: tts.speak
      continue_on_error: true
      target:
        entity_id: tts.google_de_de
      data:
        media_player_entity_id: media_player.fabians_lautsprecher
        message: >
          Du bist nun seit 4 Stunden am PC und solltest einmal lüften und aufstehen.
    - service: notify.telegram_fabian
      data:
        message: "Du bist nun seit 4 Stunden am PC und solltest einmal lüften und aufstehen."

- id: automations_if_fpc_starts
  alias: "Automations if Fabian PC starts"
  initial_state: true
  trigger:
    - platform: state
      entity_id: switch.fabian_schreibtisch
      from: "off"
      to: "on"
      for:
        seconds: 10
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.automations_if_fabian_pc_starts.attributes.last_triggered) | int > 3200 }}"
      - condition: or
        conditions:
          - condition: state
            entity_id: device_tracker.wohnzimmer_tv
            state: "not_home"
          - condition: state
            entity_id: switch.fernseher
            state: "off"
  action:
    - choose:
        - conditions:
            - condition: time
              after: "16:00:00"
            - condition: numeric_state
              entity_id: sensor.dwd_illuminance
              below: 2000
            - condition: numeric_state
              entity_id: sensor.fabian_s_zuhause_solar_percentage
              below: 15
            - condition: or
              conditions:
                - condition: state
                  entity_id: device_tracker.wohnzimmer_tv
                  state: "not_home"
                - condition: state
                  entity_id: switch.fernseher
                  state: "off"
          sequence:
            - service: light.turn_on
              data:
                entity_id: light.leds_tisch
                brightness: 255
                transition: 2
            - delay: "00:04:00"
            - service: light.turn_on
              data:
                entity_id: light.prismatik
    # - choose:
    #     - conditions:
    #         - condition: numeric_state
    #           entity_id: "sensor.weather_ebersberg_hourly"
    #           attribute: temperature
    #           below: 16
    #         - condition: state
    #           entity_id: "input_boolean.thermostate_aus"
    #           state: "off"
    #         - condition: time
    #           after: "08:45:00"
    #         - condition: not
    #           conditions:
    #             - condition: state
    #               entity_id: climate.fabian_s_zimmer
    #               state: "off"
    #         - condition: or
    #           conditions:
    #             - condition: state
    #               entity_id: device_tracker.wohnzimmer_tv
    #               state: "not_home"
    #             - condition: state
    #               entity_id: switch.fernseher
    #               state: "off"
    #       sequence:
    #         - choose:
    #             - conditions:
    #                 - condition: state
    #                   entity_id: binary_sensor.fabian_s_zimmer_open_window
    #                   state: "on"
    #               sequence:
    #                 - delay: "00:25:00"
    # - service: climate.set_temperature
    #   data:
    #     entity_id: climate.fabian_s_zimmer
    #     temperature: 19
    #     hvac_mode: heat
    - choose:
        - conditions:
            - condition: time
              after: "13:30:00"
              before: "17:30:00"
            - condition: not
              conditions:
                - condition: state
                  entity_id: cover.fabians_zimmer_rollo
                  state: "closed"
                - condition: state
                  entity_id: sensor.weather_ebersberg_hourly
                  state: "rainy"
            - condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.dwd_illuminance
                  above: 15000
                - condition: numeric_state
                  entity_id: sensor.fabian_s_zuhause_solar_percentage
                  above: 50
          sequence:
            - service: cover.set_cover_position
              target:
                entity_id: cover.fabians_zimmer_rollo
              data:
                position: 62

- id: turn_off_tleds_and_climate_if_fpc_stops
  alias: "Turn off tleds and climate if fpc stops"
  initial_state: true
  trigger:
    - platform: state
      entity_id: device_tracker.fabian_pc
      from: "home"
      to: "not_home"
      for:
        minutes: 1
    - platform: state
      entity_id: device_tracker.c_pf38fwqx_pari
      from: "home"
      to: "not_home"
      for:
        minutes: 1
    - platform: numeric_state
      entity_id: sensor.fabian_schreibtisch_power
      below: 20
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: device_tracker.fabian_pc
        state: "not_home"
        for:
          minutes: 1
      - condition: state
        entity_id: device_tracker.c_pf38fwqx_pari
        state: "not_home"
        for:
          seconds: 20
      - condition: numeric_state
        entity_id: sensor.fabian_schreibtisch_power
        below: 20
  action:
    - service: light.turn_off
      data:
        entity_id: light.leds_tisch
    - service: media_player.volume_set
      data:
        volume_level: >
          {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
        entity_id: media_player.fabians_lautsprecher
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: input_boolean.thermostate_aus
                  state: "off"
          sequence:
            - service: climate.set_hvac_mode
              data:
                entity_id: climate.fabian_s_zimmer
                hvac_mode: "auto"

- id: turn_on_light_and_climate_if_spc_started
  alias: "Turn on light and climate if samuel pc started"
  initial_state: true
  trigger:
    - platform: state
      entity_id: switch.schreibtisch_samuel
      to: "on"
      for:
        seconds: 5
  action:
    - choose:
        - conditions:
            - condition: numeric_state
              entity_id: "sensor.weather_ebersberg_hourly"
              attribute: temperature
              below: 17
            - condition: state
              entity_id: "input_boolean.gast_modus"
              state: "off"
            - condition: state
              entity_id: "input_boolean.thermostate_aus"
              state: "off"
            - condition: time
              after: "17:30:00"
            - condition: not
              conditions:
                - condition: state
                  entity_id: "climate.samuel_s_zimmer"
                  state: "off"
          sequence:
            - service: climate.set_temperature
              data:
                entity_id: climate.samuel_s_zimmer
                temperature: 20
                hvac_mode: heat
    - choose:
        - conditions:
            - condition: numeric_state
              entity_id: "sensor.weather_ebersberg_hourly"
              attribute: temperature
              below: 17
            - condition: state
              entity_id: "input_boolean.gast_modus"
              state: "off"
            - condition: state
              entity_id: "input_boolean.thermostate_aus"
              state: "off"
            - condition: time
              before: "17:31:00"
            - condition: not
              conditions:
                - condition: state
                  entity_id: "climate.samuel_s_zimmer"
                  state: "off"
          sequence:
            - service: climate.set_temperature
              data:
                entity_id: climate.samuel_s_zimmer
                temperature: 19.0
                hvac_mode: heat
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: and
                  conditions:
                    - condition: numeric_state
                      entity_id: sensor.dwd_illuminance
                      below: 2000
                    - condition: time
                      after: "16:00:00"
                - condition: and
                  conditions:
                    - condition: numeric_state
                      entity_id: sensor.fabian_s_zuhause_solar_percentage
                      below: 20
                    - condition: time
                      after: "16:00:00"
                - condition: and
                  conditions:
                    - condition: numeric_state
                      entity_id: sensor.fabian_s_zuhause_solar_percentage
                      below: 20
                    - condition: numeric_state
                      entity_id: sensor.dwd_illuminance
                      below: 2000
          sequence:
            - service: light.turn_on
              target:
                entity_id: switch.lampe_samuel
            - service: light.turn_on
              target:
                entity_id: light.leds_samuel_s_zimmer
              data:
                transition: 2
                brightness: 255
                rgb_color: [255, 255, 255]

- id: turn_off_strom_if_samuel_pc_stops
  alias: "Turn off strom if samuel pc stops"
  initial_state: true
  trigger:
    - platform: state
      entity_id: device_tracker.md3f9bmc
      from: "home"
      to: "not_home"
      for:
        minutes: 5
    - platform: numeric_state
      entity_id: sensor.steckerleiste_samuel_energy_power
      below: 25
      for:
        minutes: 10
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: sensor.steckerleiste_samuel_energy_power
        below: 25
  action:
    - service: switch.turn_off
      data:
        entity_id: switch.schreibtisch_samuel

- id: turn_off_strom_if_fpc_stops
  alias: "Turn off strom if fpc stops"
  initial_state: true
  trigger:
    - platform: numeric_state
      entity_id: sensor.fabian_schreibtisch_power
      below: 25
      for:
        minutes: 10
    - platform: state
      entity_id: device_tracker.c_pf38fwqx_pari
      from: "home"
      to: "not_home"
      for:
        minutes: 5
    - platform: state
      entity_id: device_tracker.fabian_pc
      from: "home"
      to: "not_home"
      for:
        minutes: 60
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: sensor.fabian_schreibtisch_power
        below: 25
  action:
    - service: switch.turn_off
      data:
        entity_id: switch.fabian_schreibtisch

- id: adb_uninstall_apps_when_tv_starts
  alias: "ADB uninstall apps when tv starts"
  initial_state: false
  trigger:
    - platform: state
      entity_id: media_player.wohnzimmer_tv
      from: "unavailable"
    - platform: state
      entity_id: media_player.keller_tv
      from: "unavailable"
  action:
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.wohnzimmer_tv
                  state: "unavailable"
          sequence:
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.wohnzimmer_tv
                command: pm uninstall -k --user 0 com.tcl.smartalexa
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.wohnzimmer_tv
                command: pm uninstall -k --user 0 com.android.camera2
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.wohnzimmer_tv
                command: pm uninstall -k --user 0 com.tcl.inputmethod.international
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.wohnzimmer_tv
                command: pm uninstall -k --user 0 com.google.android.music
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.wohnzimmer_tv
                command: pm uninstall -k --user 0 com.tcl.appmarket2
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.wohnzimmer_tv
                command: pm uninstall -k --user 0 tv.wuaki.apptv
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.wohnzimmer_tv
                command: pm uninstall -k --user 0 com.tcl.MultiScreenInteraction_TV
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.wohnzimmer_tv
                command: pm uninstall -k --user 0 com.tcl.partnercustomizer
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.wohnzimmer_tv
                command: pm uninstall -k --user 0 com.tcl.partnercustomizer.resource
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.wohnzimmer_tv
                command: pm uninstall -k --user 0 com.tcl.usercenter
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.wohnzimmer_tv
                command: pm uninstall -k --user 0 com.tcl.messagebox
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.wohnzimmer_tv
                command: pm uninstall -k --user 0 com.tcl.waterfall.overseas
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.wohnzimmer_tv
                command: pm uninstall -k --user 0 com.tcl.gallery
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.wohnzimmer_tv
                command: pm uninstall -k --user 0 com.google.android.videos
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.wohnzimmer_tv
                command: pm uninstall -k --user 0 au.com.stan.and
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.wohnzimmer_tv
                command: pm uninstall -k --user 0 com.tcl.dashboard
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.wohnzimmer_tv
                command: pm uninstall -k --user 0 com.tcl.notereminder
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.wohnzimmer_tv
                command: pm uninstall -k --user 0 com.tcl.useragreement
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.keller_tv
                  state: "unavailable"
          sequence:
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: pm uninstall -k --user 0 com.tcl.smartalexa
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: pm uninstall -k --user 0 com.android.camera2
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: pm uninstall -k --user 0 com.tcl.inputmethod.international
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: pm uninstall -k --user 0 com.google.android.music
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: pm uninstall -k --user 0 com.tcl.appmarket2
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: pm uninstall -k --user 0 tv.wuaki.apptv
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: pm uninstall -k --user 0 com.tcl.MultiScreenInteraction_TV
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: pm uninstall -k --user 0 com.tcl.partnercustomizer
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: pm uninstall -k --user 0 com.tcl.partnercustomizer.resource
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: pm uninstall -k --user 0 com.tcl.usercenter
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: pm uninstall -k --user 0 com.tcl.messagebox
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: pm uninstall -k --user 0 com.tcl.waterfall.overseas
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: pm uninstall -k --user 0 com.tcl.gallery
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: pm uninstall -k --user 0 com.google.android.videos
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: pm uninstall -k --user 0 au.com.stan.and
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: pm uninstall -k --user 0 com.tcl.dashboard
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: pm uninstall -k --user 0 com.tcl.notereminder
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: pm uninstall -k --user 0 com.tcl.useragreement

- id: automations_if_tv_starts
  alias: "Automations if tv starts"
  initial_state: true
  trigger:
    - platform: state
      entity_id: device_tracker.wohnzimmer_tv
      from: "not_home"
      to: "home"
  action:
    - choose:
        - conditions:
            - condition: numeric_state
              entity_id: sensor.dwd_illuminance
              below: 3000
            - condition: time
              after: "14:00:00"
            - condition: numeric_state
              entity_id: sensor.fabian_s_zuhause_solar_percentage
              below: 15
          sequence:
            - service: light.turn_on
              data:
                entity_id:
                  - light.leds_wohnzimmer_tv
                  - light.leds_wohnzimmer
                  - light.stehlampe
                transition: 2
    - choose:
        - conditions:
            - condition: state
              entity_id: "input_boolean.thermostate_aus"
              state: "off"
            - condition: numeric_state
              entity_id: "sensor.weather_ebersberg_hourly"
              attribute: temperature
              below: 17
            - condition: not
              conditions:
                - condition: state
                  entity_id: climate.wohnzimmer
                  state: "off"
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: binary_sensor.wohnzimmer_open_window
                      state: "on"
                  sequence:
                    - delay: "00:25:00"
            - service: climate.set_temperature
              data:
                entity_id: climate.wohnzimmer
                temperature: 21.5
                hvac_mode: heat
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: cover.wohnzimmer_rollo_fenster
                  state: "closed"
            - condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.dwd_illuminance
                  above: 15000
                - condition: numeric_state
                  entity_id: sensor.fabian_s_zuhause_solar_percentage
                  above: 70
          sequence:
            - service: cover.set_cover_position
              target:
                entity_id: cover.wohnzimmer_rollo_fenster
              data:
                position: 75
            - service: cover.set_cover_position
              target:
                entity_id: cover.wohnzimmer_rollo_tur
              data:
                position: 90

- id: turn_off_climate_if_tv_stops
  alias: "Turn off climate if tv stops"
  initial_state: true
  trigger:
    - platform: state
      entity_id: device_tracker.wohnzimmer_tv
      from: "home"
      to: "not_home"
  condition:
    - condition: state
      entity_id: "input_boolean.thermostate_aus"
      state: "off"
  action:
    - service: climate.set_hvac_mode
      data:
        entity_id: climate.wohnzimmer
        hvac_mode: "auto"

- id: turn_off_climates_if_someone_is_not_at_home
  alias: "Turn off climates if someone is not at home"
  initial_state: true
  trigger:
    - platform: state
      entity_id: person.fabian
      from: "home"
      to: "not_home"
      for:
        minutes: 30
    - platform: state
      entity_id: person.samuel
      from: "home"
      to: "not_home"
      for:
        minutes: 30
  condition:
    - condition: state
      entity_id: "input_boolean.thermostate_aus"
      state: "off"
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.gast_modus
              state: "off"
            - condition: not
              conditions:
                - condition: state
                  entity_id: person.fabian
                  state: "home"
                - condition: state
                  entity_id: climate.fabian_s_zimmer
                  state: "off"
            - condition: state
              entity_id: person.samuel
              state: "home"
          sequence:
            - service: climate.set_temperature
              data:
                entity_id: climate.fabian_s_zimmer
                temperature: 17
                hvac_mode: heat
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.gast_modus
              state: "off"
            - condition: not
              conditions:
                - condition: state
                  entity_id: person.samuel
                  state: "home"
                - condition: state
                  entity_id: climate.samuel_s_zimmer
                  state: "off"
            - condition: state
              entity_id: person.fabian
              state: "home"
          sequence:
            - service: climate.set_temperature
              data:
                entity_id: climate.samuel_s_zimmer
                temperature: 17
                hvac_mode: heat

- id: remind_for_open_window_bathroom
  alias: "Remind for open window bathroom"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.bad_open_window
      to: "off"
      for:
        minutes: 31
    - platform: state
      entity_id: binary_sensor.bad_open_window
      to: "off"
      for:
        minutes: 45
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: climate.bad
        attribute: current_temperature
        below: 18
      - condition: numeric_state
        entity_id: sensor.bad_heating
        above: 35
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.gast_modus
              state: "off"
            - condition: state
              entity_id: input_boolean.leiser_modus
              state: "off"
            - condition: state
              entity_id: person.samuel
              state: "home"
            - condition: state
              entity_id: person.fabian
              state: "home"
          sequence:
            - service: tts.speak
              continue_on_error: true
              target:
                entity_id: tts.google_de_de
              data:
                media_player_entity_id: media_player.samuels_lautsprecher
                message: Es wurde vermutlich vergessen das Fenster im Bad zu schließen.
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: person.samuel
                  state: "home"
                - condition: state
                  entity_id: person.fabian
                  state: "home"
                - condition: state
                  entity_id: input_boolean.leiser_modus
                  state: "off"
          sequence:
            - service: tts.speak
              continue_on_error: true
              target:
                entity_id: tts.google_de_de
              data:
                media_player_entity_id:
                  - media_player.wohnzimmer_uhr
                  - media_player.kuche_lautsprecher
                  - media_player.fabians_lautsprecher
                message: Es wurde vermutlich vergessen das Fenster im Bad zu schließen.
      default:
        - service: notify.telegram_fabian
          data:
            message: "Es wurde vermutlich vergessen das Fenster im Bad zu schließen."
        - service: notify.telegram_samuel
          data:
            message: "Es wurde vermutlich vergessen das Fenster im Bad zu schließen."

- id: remind_for_open_window_sleeping_room
  alias: "Remind for open window sleeping room"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.fabian_s_zimmer_open_window
      to: "off"
      for:
        minutes: 31
    - platform: state
      entity_id: binary_sensor.fabian_s_zimmer_open_window
      to: "off"
      for:
        minutes: 45
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: climate.fabian_s_zimmer
        attribute: current_temperature
        below: 18
      - condition: numeric_state
        entity_id: sensor.fabian_s_zimmer_heating
        above: 35
  action:
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: person.samuel
                  state: "home"
                - condition: state
                  entity_id: person.fabian
                  state: "home"
                - condition: state
                  entity_id: input_boolean.leiser_modus
                  state: "off"
          sequence:
            - service: tts.speak
              continue_on_error: true
              target:
                entity_id: tts.google_de_de
              data:
                media_player_entity_id:
                  - media_player.wohnzimmer_uhr
                  - media_player.kuche_lautsprecher
                message: Es wurde vermutlich vergessen das Fenster in Fabians Zimmer zu schließen.
      default:
        - service: notify.telegram_fabian
          data:
            message: "Es wurde vermutlich vergessen das Fenster in Fabians Zimmer zu schließen."
        - service: notify.telegram_samuel
          data:
            message: "Es wurde vermutlich vergessen das Fenster in Fabians Zimmer zu schließen."

- id: remind_for_open_window_living_room
  alias: "Remind for open window living room"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.wohnzimmer_open_window
      to: "off"
      for:
        minutes: 31
    - platform: state
      entity_id: binary_sensor.wohnzimmer_open_window
      to: "off"
      for:
        minutes: 45
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: climate.wohntimmer
        attribute: current_temperature
        below: 18
      - condition: numeric_state
        entity_id: sensor.wohnzimmer_heating
        above: 35
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.gast_modus
              state: "off"
            - condition: state
              entity_id: input_boolean.leiser_modus
              state: "off"
            - condition: state
              entity_id: person.samuel
              state: "home"
            - condition: state
              entity_id: person.fabian
              state: "home"
          sequence:
            - service: tts.speak
              continue_on_error: true
              target:
                entity_id: tts.google_de_de
              data:
                media_player_entity_id: media_player.samuels_lautsprecher
                message: Es wurde vermutlich vergessen das Fenster im Wohnzimmer zu schließen.
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: person.samuel
                  state: "home"
                - condition: state
                  entity_id: person.fabian
                  state: "home"
          sequence:
            - service: tts.speak
              continue_on_error: true
              target:
                entity_id: tts.google_de_de
              data:
                media_player_entity_id:
                  - media_player.kuche_lautsprecher
                  - media_player.fabians_lautsprecher
                message: Es wurde vermutlich vergessen das Fenster im Wohnzimmer zu schließen.
      default:
        - service: notify.telegram_fabian
          data:
            message: "Es wurde vermutlich vergessen das Fenster im Bad zu schließen."
        - service: notify.telegram_samuel
          data:
            message: "Es wurde vermutlich vergessen das Fenster im Bad zu schließen."

- id: remind_for_open_window_guest_room
  alias: "Remind for open window guest room"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.samuel_s_zimmer_open_window
      to: "off"
      for:
        minutes: 31
    - platform: state
      entity_id: binary_sensor.samuel_s_zimmer_open_window
      to: "off"
      for:
        minutes: 45
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: climate.samuel_s_zimmer
        attribute: current_temperature
        below: 18
      - condition: numeric_state
        entity_id: sensor.samuel_s_zimmer_heating
        above: 85
  action:
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: person.samuel
                  state: "home"
                - condition: state
                  entity_id: person.fabian
                  state: "home"
                - condition: state
                  entity_id: input_boolean.leiser_modus
                  state: "off"
          sequence:
            - service: tts.speak
              continue_on_error: true
              target:
                entity_id: tts.google_de_de
              data:
                media_player_entity_id:
                  - media_player.wohnzimmer_uhr
                  - media_player.kuche_lautsprecher
                  - media_player.fabians_lautsprecher
                message: Es wurde vermutlich vergessen das Fenster in Samuels Zimmer zu schließen.
      default:
        - service: notify.telegram_fabian
          data:
            message: "Es wurde vermutlich vergessen das Fenster in Samuels Zimmer zu schließen."
        - service: notify.telegram_samuel
          data:
            message: "Es wurde vermutlich vergessen das Fenster in Samuels Zimmer zu schließen."

- id: remind_for_open_window_after_5_minutes_in_bathroom
  alias: "Remind for open window after 5 minutes in bathroom"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.bad_open_window
      to: "on"
      for:
        minutes: 5
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: "climate.bad"
        attribute: current_temperature
        below: 21
  action:
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: time
                  after: "21:30:00"
                - condition: time
                  before: "07:50:00"
          sequence:
            - choose:
                - conditions:
                    - condition: and
                      conditions:
                        - condition: state
                          entity_id: input_boolean.leiser_modus
                          state: "on"
                        - condition: or
                          conditions:
                            - condition: state
                              entity_id: person.fabian
                              state: home
                            - condition: state
                              entity_id: person.samuel
                              state: home
                  sequence:
                    - choose:
                        - conditions:
                            - condition: state
                              entity_id: person.fabian
                              state: home
                          sequence:
                            - service: notify.mobile_app_pixel_8_pro
                              data:
                                message: "Das Fenster im Bad kann wieder geschlossen werden."
                                data:
                                  push:
                                    sound:
                                      name: "default"
                                      critical: 1
                                      volume: 0.1
                            - service: notify.telegram_fabian
                              data:
                                message: "Das Fenster im Bad kann wieder geschlossen werden."
                    - choose:
                        - conditions:
                            - condition: state
                              entity_id: person.samuel
                              state: home
                          sequence:
                            - service: notify.telegram_samuel
                              data:
                                message: "Das Fenster im Bad kann wieder geschlossen werden."
      default:
        - choose:
            - conditions:
                - condition: and
                  conditions:
                    - condition: state
                      entity_id: person.fabian
                      state: home
                    - condition: or
                      conditions:
                        - condition: state
                          entity_id: device_tracker.fabian_pc
                          state: "home"
                        - condition: state
                          entity_id: device_tracker.c_pf38fwqx_pari
                          state: "home"
                    - condition: not
                      conditions:
                        - condition: state
                          entity_id: media_player.fabians_lautsprecher
                          state: "off"
              sequence:
                - service: notify.telegram_fabian
                  data:
                    message: "Das Fenster im Bad kann wieder geschlossen werden."
                - service: notify.mobile_app_pixel_8_pro
                  data:
                    message: "Das Fenster im Bad kann wieder geschlossen werden."
                    data:
                      push:
                        sound:
                          name: "default"
                          critical: 1
                          volume: 0.1
            - conditions:
                - condition: state
                  entity_id: input_boolean.leiser_modus
                  state: "off"
              sequence:
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                    entity_id: media_player.fabians_lautsprecher
                - service: tts.speak
                  continue_on_error: true
                  target:
                    entity_id: tts.google_de_de
                  data:
                    media_player_entity_id: media_player.fabians_lautsprecher
                    message: Das Fenster im Bad kann wieder geschlossen werden.
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                    entity_id: media_player.fabians_lautsprecher
        - choose:
            - conditions:
                - condition: state
                  entity_id: person.samuel
                  state: home
                - condition: or
                  conditions:
                    - condition: state
                      entity_id: device_tracker.md3f9bmc
                      state: "home"
                    - condition: state
                      entity_id: input_boolean.samuel_pc_strom
                      state: "home"
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: media_player.samuels_lautsprecher
                      state: "off"
              sequence:
                - service: notify.telegram_samuel
                  data:
                    message: "Das Fenster im Bad kann wieder geschlossen werden."
            - conditions:
                - condition: state
                  entity_id: input_boolean.gast_modus
                  state: "off"
                - condition: state
                  entity_id: input_boolean.leiser_modus
                  state: "off"
                - condition: state
                  entity_id: input_boolean.samuel_pc_strom
                  state: "off"
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: device_tracker.md3f9bmc
                      state: "home"
              sequence:
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                    entity_id: media_player.samuels_lautsprecher
                - service: tts.speak
                  continue_on_error: true
                  target:
                    entity_id: tts.google_de_de
                  data:
                    media_player_entity_id: media_player.samuels_lautsprecher
                    message: Das Fenster im Bad kann wieder geschlossen werden.
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                    entity_id: media_player.samuels_lautsprecher
        - choose:
            - conditions:
                - condition: state
                  entity_id: person.fabian
                  state: home
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "off"
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "idle"
              sequence:
                - service: notify.telegram_fabian
                  data:
                    message: "Das Fenster im Bad kann wieder geschlossen werden."
            - conditions:
                - condition: state
                  entity_id: person.samuel
                  state: home
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "off"
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "idle"
              sequence:
                - service: notify.telegram_samuel
                  data:
                    message: "Das Fenster im Bad kann wieder geschlossen werden."
            - conditions:
                - condition: state
                  entity_id: input_boolean.leiser_modus
                  state: "off"
                - condition: or
                  conditions:
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "off"
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "idle"
              sequence:
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                    entity_id: media_player.kuche_lautsprecher
                - service: tts.speak
                  continue_on_error: true
                  target:
                    entity_id: tts.google_de_de
                  data:
                    media_player_entity_id: media_player.kuche_lautsprecher
                    message: Das Fenster im Bad kann wieder geschlossen werden.
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                    entity_id: media_player.kuche_lautsprecher
        - choose:
            - conditions:
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: media_player.wohnzimmer_tv
                      state: "unavailable"
              sequence:
                - service: notify.wohnzimmer_tv
                  continue_on_error: true
                  data:
                    message: Das Fenster im Bad kann wieder geschlossen werden.
        - choose:
            - conditions:
                - condition: state
                  entity_id: input_boolean.leiser_modus
                  state: "off"
                - condition: or
                  conditions:
                    - condition: state
                      entity_id: media_player.wohnzimmer_uhr
                      state: "off"
                    - condition: state
                      entity_id: media_player.wohnzimmer_uhr
                      state: "idle"
              sequence:
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                    entity_id: media_player.wohnzimmer_uhr
                - service: tts.speak
                  continue_on_error: true
                  target:
                    entity_id: tts.google_de_de
                  data:
                    media_player_entity_id: media_player.wohnzimmer_uhr
                    message: Das Fenster im Bad kann wieder geschlossen werden.
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                    entity_id: media_player.wohnzimmer_uhr

- id: remind_for_open_window_after_5_minutes_in_fabians_room
  alias: "Remind for open window after 5 minutes in fabians room"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.fabian_s_zimmer_open_window
      to: "on"
      for:
        minutes: 5
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: "climate.fabian_s_zimmer"
        attribute: current_temperature
        below: 19
  action:
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: time
                  after: "21:30:00"
                - condition: time
                  before: "07:50:00"
          sequence:
            - choose:
                - conditions:
                    - condition: and
                      conditions:
                        - condition: state
                          entity_id: input_boolean.leiser_modus
                          state: "on"
                        - condition: or
                          conditions:
                            - condition: state
                              entity_id: person.fabian
                              state: home
                            - condition: state
                              entity_id: person.samuel
                              state: home
                  sequence:
                    - choose:
                        - conditions:
                            - condition: not
                              conditions:
                                - condition: state
                                  entity_id: person.fabian
                                  state: home
                          sequence:
                            - service: notify.telegram_samuel
                              data:
                                message: "Das Fenster in Fabians Zimmer kann wieder geschlossen werden."
                    - choose:
                        - conditions:
                            - condition: state
                              entity_id: person.fabian
                              state: home
                          sequence:
                            - service: notify.mobile_app_pixel_8_pro
                              data:
                                message: "Das Fenster in deinem Zimmer kann wieder geschlossen werden."
                                data:
                                  push:
                                    sound:
                                      name: "default"
                                      critical: 1
                                      volume: 0.1
                            - service: notify.telegram_fabian
                              data:
                                message: "Das Fenster in deinem Zimmer kann wieder geschlossen werden."
      default:
        - choose:
            - conditions:
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: media_player.samuels_lautsprecher
                      state: "off"
                    - condition: state
                      entity_id: person.fabian
                      state: "home"
              sequence:
                - service: notify.telegram_samuel
                  data:
                    message: "Das Fenster in Fabians Zimmer kann wieder geschlossen werden."
        - choose:
            - conditions:
                - condition: state
                  entity_id: person.fabian
                  state: home
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "off"
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "idle"
                    - condition: state
                      entity_id: device_tracker.fabian_pc
                      state: "home"
                    - condition: state
                      entity_id: device_tracker.c_pf38fwqx_pari
                      state: "home"
              sequence:
                - service: notify.telegram_fabian
                  data:
                    message: "Das Fenster in deinem Zimmer kann wieder geschlossen werden."
            - conditions:
                - condition: state
                  entity_id: person.samuel
                  state: home
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "off"
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "idle"
              sequence:
                - service: notify.telegram_samuel
                  data:
                    message: "Das Fenster in Fabians Zimmer kann wieder geschlossen werden."
            - conditions:
                - condition: state
                  entity_id: input_boolean.leiser_modus
                  state: "off"
                - condition: or
                  conditions:
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "off"
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "idle"
              sequence:
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                    entity_id: media_player.kuche_lautsprecher
                - service: tts.speak
                  continue_on_error: true
                  target:
                    entity_id: tts.google_de_de
                  data:
                    media_player_entity_id: media_player.kuche_lautsprecher
                    message: Das Fenster in Fabians Zimmer kann wieder geschlossen werden.
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                    entity_id: media_player.kuche_lautsprecher
        - choose:
            - conditions:
                - condition: state
                  entity_id: input_boolean.leiser_modus
                  state: "off"
                - condition: or
                  conditions:
                    - condition: state
                      entity_id: media_player.wohnzimmer_uhr
                      state: "off"
                    - condition: state
                      entity_id: media_player.wohnzimmer_uhr
                      state: "idle"
              sequence:
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                    entity_id: media_player.wohnzimmer_uhr
                - service: tts.speak
                  continue_on_error: true
                  target:
                    entity_id: tts.google_de_de
                  data:
                    media_player_entity_id: media_player.wohnzimmer_uhr
                    message: Das Fenster in Fabians Zimmer kann wieder geschlossen werden.
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                    entity_id: media_player.wohnzimmer_uhr
        - choose:
            - conditions:
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: media_player.wohnzimmer_tv
                      state: "unavailable"
              sequence:
                - service: notify.wohnzimmer_tv
                  continue_on_error: true
                  data:
                    message: Das Fenster in Fabians Zimmer kann wieder geschlossen werden.

- id: remind_for_open_window_after_5_minutes_in_living_room
  alias: "Remind for open window after 5 minutes in living room"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.wohnzimmer_open_window
      to: "on"
      for:
        minutes: 5
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: "climate.wohnzimmer"
        attribute: current_temperature
        below: 20
      - condition: state
        entity_id: switch.fernseher
        state: "off"
  action:
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: time
                  after: "21:30:00"
                - condition: time
                  before: "07:50:00"
          sequence:
            - choose:
                - conditions:
                    - condition: and
                      conditions:
                        - condition: state
                          entity_id: input_boolean.leiser_modus
                          state: "on"
                        - condition: or
                          conditions:
                            - condition: state
                              entity_id: person.fabian
                              state: home
                            - condition: state
                              entity_id: person.samuel
                              state: home
                  sequence:
                    - choose:
                        - conditions:
                            - condition: state
                              entity_id: person.fabian
                              state: home
                          sequence:
                            - service: notify.mobile_app_pixel_8_pro
                              data:
                                message: "Das Fenster im Wohnzimmer kann wieder geschlossen werden."
                                data:
                                  push:
                                    sound:
                                      name: "default"
                                      critical: 1
                                      volume: 0.1
                            - service: notify.telegram_fabian
                              data:
                                message: "Das Fenster im Wohnzimmer kann wieder geschlossen werden."
                    - choose:
                        - conditions:
                            - condition: state
                              entity_id: person.samuel
                              state: home
                          sequence:
                            - service: notify.telegram_samuel
                              data:
                                message: "Das Fenster im Wohnzimmer kann wieder geschlossen werden."
      default:
        - choose:
            - conditions:
                - condition: or
                  conditions:
                    - condition: state
                      entity_id:
                        - device_tracker.c_pf38fwqx_pari
                      state: "home"
                    - condition: state
                      entity_id:
                        - device_tracker.fabian_pc
                      state: "home"
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: media_player.fabians_lautsprecher
                      state: "off"
              sequence:
                - service: notify.telegram_fabian
                  data:
                    message: "Das Fenster im Wohnzimmer kann wieder geschlossen werden."
            - conditions:
                - condition: state
                  entity_id: input_boolean.leiser_modus
                  state: "off"
              sequence:
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                    entity_id: media_player.fabians_lautsprecher
                - service: tts.speak
                  continue_on_error: true
                  target:
                    entity_id: tts.google_de_de
                  data:
                    media_player_entity_id: media_player.fabians_lautsprecher
                    message: Das Fenster im Wohnzimmer kann wieder geschlossen werden.
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                    entity_id: media_player.fabians_lautsprecher
        - choose:
            - conditions:
                - condition: state
                  entity_id:
                    - device_tracker.md3f9bmc
                    - device_tracker.md3f9bmc
                  match: any
                  state: "home"
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: media_player.samuels_lautsprecher
                      state: "off"
              sequence:
                - service: notify.telegram_samuel
                  data:
                    message: "Das Fenster im Wohnzimmer kann wieder geschlossen werden."
            - conditions:
                - condition: state
                  entity_id: input_boolean.gast_modus
                  state: "off"
                - condition: state
                  entity_id: input_boolean.leiser_modus
                  state: "off"
              sequence:
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                    entity_id: media_player.samuels_lautsprecher
                - service: tts.speak
                  continue_on_error: true
                  target:
                    entity_id: tts.google_de_de
                  data:
                    media_player_entity_id: media_player.samuels_lautsprecher
                    message: Das Fenster im Wohnzimmer kann wieder geschlossen werden.
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                    entity_id: media_player.samuels_lautsprecher
        - choose:
            - conditions:
                - condition: state
                  entity_id: person.fabian
                  state: home
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "off"
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "idle"
                    - condition: state
                      entity_id: device_tracker.fabian_pc
                      state: "home"
                    - condition: state
                      entity_id: device_tracker.c_pf38fwqx_pari
                      state: "home"
              sequence:
                - service: notify.telegram_fabian
                  data:
                    message: "Das Fenster im Wohnzimmer kann wieder geschlossen werden."
            - conditions:
                - condition: state
                  entity_id: person.samuel
                  state: home
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "off"
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "idle"
              sequence:
                - service: notify.telegram_samuel
                  data:
                    message: "Das Fenster im Wohnzimmer kann wieder geschlossen werden."
            - conditions:
                - condition: state
                  entity_id: input_boolean.leiser_modus
                  state: "off"
                - condition: or
                  conditions:
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "off"
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "idle"
              sequence:
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                    entity_id: media_player.kuche_lautsprecher
                - service: tts.speak
                  continue_on_error: true
                  target:
                    entity_id: tts.google_de_de
                  data:
                    media_player_entity_id: media_player.kuche_lautsprecher
                    message: Das Fenster im Wohnzimmer kann wieder geschlossen werden.
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                    entity_id: media_player.kuche_lautsprecher

- id: remind_for_open_window_after_5_minutes_in_samuels_room
  alias: "Remind for open window after 5 minutes in samuels room"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.samuel_s_zimmer_open_window
      to: "on"
      for:
        minutes: 5
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: "climate.samuel_s_zimmer"
        attribute: current_temperature
        below: 20
  action:
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: time
                  after: "21:30:00"
                - condition: time
                  before: "07:50:00"
          sequence:
            - choose:
                - conditions:
                    - condition: and
                      conditions:
                        - condition: state
                          entity_id: input_boolean.leiser_modus
                          state: "on"
                        - condition: or
                          conditions:
                            - condition: state
                              entity_id: person.fabian
                              state: home
                            - condition: state
                              entity_id: person.samuel
                              state: home
                  sequence:
                    - choose:
                        - conditions:
                            - condition: not
                              conditions:
                                - condition: state
                                  entity_id: person.samuel
                                  state: home
                          sequence:
                            - service: notify.mobile_app_pixel_8_pro
                              data:
                                message: "Das Fenster in Samuels Zimmer kann wieder geschlossen werden."
                                data:
                                  push:
                                    sound:
                                      name: "default"
                                      critical: 1
                                      volume: 0.1
                            - service: notify.telegram_fabian
                              data:
                                message: "Das Fenster in Samuels Zimmer kann wieder geschlossen werden."
                    - choose:
                        - conditions:
                            - condition: state
                              entity_id: person.samuel
                              state: home
                          sequence:
                            - service: notify.telegram_samuel
                              data:
                                message: "Das Fenster in deinem Zimmer kann wieder geschlossen werden."
      default:
        - choose:
            - conditions:
                - condition: or
                  conditions:
                    - condition: state
                      entity_id:
                        - device_tracker.c_pf38fwqx_pari
                      state: "home"
                    - condition: state
                      entity_id:
                        - device_tracker.fabian_pc
                      state: "home"
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: media_player.fabians_lautsprecher
                      state: "off"
                    - condition: state
                      entity_id: person.samuel
                      state: "home"
              sequence:
                - service: notify.telegram_fabian
                  data:
                    message: "Das Fenster in Samuels Zimmer kann wieder geschlossen werden."
            - conditions:
                - condition: state
                  entity_id: input_boolean.leiser_modus
                  state: "off"
              sequence:
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                    entity_id: media_player.fabians_lautsprecher
                - service: tts.speak
                  continue_on_error: true
                  target:
                    entity_id: tts.google_de_de
                  data:
                    media_player_entity_id: media_player.fabians_lautsprecher
                    message: Das Fenster im Wohnzimmer kann wieder geschlossen werden.
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                    entity_id: media_player.fabians_lautsprecher
        - choose:
            - conditions:
                - condition: state
                  entity_id: person.fabian
                  state: home
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "off"
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "idle"
                    - condition: state
                      entity_id: device_tracker.fabian_pc
                      state: "home"
                    - condition: state
                      entity_id: device_tracker.c_pf38fwqx_pari
                      state: "home"
              sequence:
                - service: notify.telegram_fabian
                  data:
                    message: "Das Fenster in Samuels Zimmer kann wieder geschlossen werden."
            - conditions:
                - condition: state
                  entity_id: person.samuel
                  state: home
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "off"
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "idle"
              sequence:
                - service: notify.telegram_samuel
                  data:
                    message: "Das Fenster in Samuels Zimmer kann wieder geschlossen werden."
            - conditions:
                - condition: state
                  entity_id: input_boolean.leiser_modus
                  state: "off"
                - condition: or
                  conditions:
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "off"
                    - condition: state
                      entity_id: media_player.kuche_lautsprecher
                      state: "idle"
              sequence:
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                    entity_id: media_player.kuche_lautsprecher
                - service: tts.speak
                  continue_on_error: true
                  target:
                    entity_id: tts.google_de_de
                  data:
                    media_player_entity_id: media_player.kuche_lautsprecher
                    message: Das Fenster in Samuels Zimmer kann wieder geschlossen werden.
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                    entity_id: media_player.kuche_lautsprecher
        - choose:
            - conditions:
                - condition: state
                  entity_id: input_boolean.leiser_modus
                  state: "off"
                - condition: or
                  conditions:
                    - condition: state
                      entity_id: media_player.wohnzimmer_uhr
                      state: "off"
                    - condition: state
                      entity_id: media_player.wohnzimmer_uhr
                      state: "idle"
              sequence:
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                    entity_id: media_player.wohnzimmer_uhr
                - service: tts.speak
                  continue_on_error: true
                  target:
                    entity_id: tts.google_de_de
                  data:
                    media_player_entity_id: media_player.wohnzimmer_uhr
                    message: Das Fenster in Samuels Zimmer kann wieder geschlossen werden.
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                    entity_id: media_player.wohnzimmer_uhr
        - choose:
            - conditions:
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: media_player.wohnzimmer_tv
                      state: "unavailable"
              sequence:
                - service: notify.wohnzimmer_tv
                  continue_on_error: true
                  data:
                    message: Das Fenster in Samuels Zimmer kann wieder geschlossen werden.

- id: turn_off_bett_if_no_device_is_charging
  alias: "Turn off bett if no device is charging"
  initial_state: false
  trigger:
    - platform: state
      entity_id:
        - sensor.fabian_ipadpro_battery_state
        - sensor.fabian_phone_battery_state
        - sensor.samuel_iphone_battery_state
      to: "discharging"
    - platform: state
      entity_id:
        - sensor.fabian_ipadpro_battery_state
        - sensor.fabian_phone_battery_state
        - sensor.samuel_iphone_battery_state
      to: "Not Charging"
    - platform: numeric_state
      entity_id:
        - sensor.fabian_ipadpro_battery_state
        - sensor.pixel_8_pro_battery_level
        - sensor.samuel_iphone_battery_state
      above: 90
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: switch.bett_usb_ports
        state: "on"
      #  - condition: or
      #    conditions:
      #      - condition: state
      #        entity_id: sensor.fabian_ipadpro_battery_state
      #        state: 'discharging'
      #      - condition: numeric_state
      #        entity_id: sensor.fabian_ipadpro_battery_state
      #        above: 90
      - condition: or
        conditions:
          - condition: state
            entity_id: sensor.fabian_phone_battery_state
            state: "discharging"
          - condition: numeric_state
            entity_id: sensor.pixel_8_pro_battery_level
            above: 80
      - condition: or
        conditions:
          - condition: state
            entity_id: sensor.samuel_iphone_battery_state
            state: "discharging"
          - condition: numeric_state
            entity_id: sensor.samuel_phone_battery_level
            above: 80
  action:
    - service: switch.turn_off
      data:
        entity_id: switch.bett_usb_ports

- id: turn_off_bett_after_x_hours
  alias: "Turn off bett after x hours"
  initial_state: false
  trigger:
    - platform: state
      entity_id: switch.bett_usb_ports
      to: "on"
      for:
        minutes: 180
    - platform: state
      entity_id: switch.bett_usb_ports
      to: "on"
      for:
        minutes: 360
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: switch.bett_usb_ports
        state: "on"
      - condition: time
        before: "20:30:00"
      - condition: time
        after: "06:30:00"
  action:
    - service: switch.turn_off
      data:
        entity_id: switch.bett_usb_ports

- id: turn_on_lights_and_cover_in_morning
  alias: "Turn on lights and open cover in morning"
  initial_state: true
  trigger:
    - platform: state
      entity_id: device_tracker.pixel_8_pro
      from: "not_home"
      to: "home"
    # - platform: state
    #   entity_id: device_tracker.redmi_note_10_pro
    #   from: "not_home"
    #   to: "home"
  condition:
    condition: and
    conditions:
      - condition: time
        after: "05:00:00"
      - condition: time
        before: "11:00:00"
      - condition: state
        entity_id: binary_sensor.workday_sensor
        state: "on"
      - condition: state
        entity_id: input_boolean.gast_modus
        state: "off"
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.turn_on_lights_and_open_cover_in_morning.attributes.last_triggered) | int > 1800 }}"
  action:
    - delay: "00:04:30"
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.gast_modus
              state: "off"
            - condition: not
              conditions:
                - condition: state
                  entity_id: cover.fabians_zimmer_rollo
                  state: "open"
          sequence:
            - service: cover.set_cover_position
              target:
                entity_id: cover.fabians_zimmer_rollo
              data:
                position: 40
    - choose:
        - conditions:
            - condition: and
              conditions:
                - condition: numeric_state
                  entity_id: sensor.dwd_illuminance
                  below: 2000
                - condition: numeric_state
                  entity_id: sensor.fabian_s_zuhause_solar_percentage
                  below: 20
          sequence:
            - service: switch.turn_off
              data:
                entity_id: switch.adaptive_lighting_sleeping_room
            - service: light.turn_on
              data:
                entity_id:
                  - light.leds_tisch
                  - light.mibedsidelamp2_22e2
                brightness: 2
            - delay: "00:02:30"
            - service: automation.trigger
              entity_id: automation.increase_lights_in_morning
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.gast_modus
              state: "off"
            - condition: time
              after: "07:00:00"
          sequence:
            - service: cover.open_cover
              target:
                entity_id: cover.fabians_zimmer_rollo
    # - choose:
    #     - conditions:
    #         - condition: state
    #           entity_id: input_boolean.leiser_modus
    #           state: "off"
    #         - condition: state
    #           entity_id: input_boolean.gast_modus
    #           state: "off"
    #         - condition: or
    #           conditions:
    #             - condition: numeric_state
    #               entity_id: climate.samuel_s_zimmer
    #               attribute: current_humidity
    #               above: 60
    #             - condition: numeric_state
    #               entity_id: climate.wohnzimmer
    #               attribute: current_humidity
    #               above: 60
    #             - condition: numeric_state
    #               entity_id: climate.fabian_s_zimmer
    #               attribute: current_humidity
    #               above: 60
    #             - condition: numeric_state
    #               entity_id: climate.bad
    #               attribute: current_humidity
    #               above: 60
    #       sequence:
    #         - service: automation.trigger
    #           entity_id: automation.notify_for_high_humidity
    #  - service: light.turn_on
    #    data_template:
    #      entity_id: light.bett_gluhbirne
    #      brightness: 100
    #      rgb_color: >
    #        {% if state_attr('sensor.weather_ebersberg_daily', 'forecast')[0]['condition'] == 'snowy' %}
    #        [255,255,255]
    #        {% elif state_attr('sensor.weather_ebersberg_daily', 'forecast')[0]['condition'] == 'rainy' %}
    #        [0,0,255]
    #        {% elif state_attr('sensor.weather_ebersberg_daily', 'forecast')[0]['condition'] == 'sunny' %}
    #        [0,255,0]
    #        {% else %}
    #        [0,0,0]
    #        {% endif %}
    #  - delay: '00:05:00'
    #  - service: light.turn_off
    #    data:
    #      entity_id:
    #        - light.mibedsidelamp2_22e2
    - delay: "00:20:00"
    - service: switch.turn_on
      data:
        entity_id: switch.adaptive_lighting_sleeping_room
    - choose:
        - conditions:
            - condition: state
              entity_id: device_tracker.fabian_pc
              state: "not_home"
            - condition: state
              entity_id: "device_tracker.c_pf38fwqx_pari"
              state: "not_home"
          sequence:
            - service: light.turn_off
              data:
                entity_id:
                  - light.leds_tisch

- id: increase_lights_in_morning
  alias: "Increase lights in morning"
  initial_state: false
  mode: restart
  trigger:
    - platform: state
      entity_id: automation.increase_lights_in_morning
      to: "on"
  condition:
    condition: and
    conditions:
      - condition: not
        conditions:
          - condition: state
            entity_id: light.mibedsidelamp2_22e2
            state: "off"
          - condition: state
            entity_id: light.leds_tisch
            state: "off"
      - condition: or
        conditions:
          - condition: state
            entity_id: light.leds_tisch
            state: "unavailable"
          - condition: not
            conditions:
              - condition: state
                entity_id: light.leds_tisch
                attribute: brightness
                state: "255"
  action:
    - delay: "00:00:15"
    - choose:
        - conditions:
            - condition: state
              entity_id: light.leds_tisch
              state: "on"
            - condition: not
              conditions:
                - condition: state
                  entity_id: light.leds_tisch
                  attribute: brightness
                  state: "255"
          sequence:
            - service: light.turn_on
              entity_id: light.leds_tisch
              data_template:
                brightness: "{{states.light.leds_tisch.attributes.brightness + 5}}"
            - service: light.turn_on
              data:
                entity_id: light.regal
    - choose:
        - conditions:
            - condition: state
              entity_id: light.mibedsidelamp2_22e2
              state: "on"
            - condition: not
              conditions:
                - condition: state
                  entity_id: light.mibedsidelamp2_22e2
                  attribute: brightness
                  state: "255"
          sequence:
            - service: light.turn_on
              entity_id: light.mibedsidelamp2_22e2
              data_template:
                brightness: "{{states.light.mibedsidelamp2_22e2.attributes.brightness + 5}}"
    - choose:
        - conditions:
            - condition: state
              entity_id: light.leds_tisch
              state: "on"
            - condition: state
              entity_id: light.mibedsidelamp2_22e2
              state: "on"
            - condition: not
              conditions:
                - condition: state
                  entity_id: light.leds_tisch
                  attribute: brightness
                  state: "255"
                - condition: state
                  entity_id: light.mibedsidelamp2_22e2
                  attribute: brightness
                  state: "255"
          sequence:
            - service: automation.trigger
              data:
                entity_id: automation.increase_lights_in_morning

- id: Remind for leaving in the morning
  alias: "Remind for leaving in the morning"
  trigger:
    - platform: time
      at: "06:55:00"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: "input_boolean.leiser_modus"
        state: "off"
      - condition: state
        entity_id: binary_sensor.workday_sensor
        state: "on"
      - condition: or
        conditions:
          - condition: state
            entity_id: device_tracker.redmi_note_10_pro
            state: home
          - condition: state
            entity_id: device_tracker.pixel_8_pro
            state: home
  action:
    - parallel:
        - choose:
            - conditions:
                - condition: state
                  entity_id: "input_boolean.gast_modus"
                  state: "off"
                - condition: or
                  conditions:
                    - condition: state
                      entity_id: device_tracker.redmi_note_10_pro
                      state: home
                    - condition: state
                      entity_id: device_tracker.pixel_8_pro
                      state: home
              sequence:
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.1 }}
                    entity_id:
                      - media_player.wohnzimmer_uhr
                      - media_player.kuche_lautsprecher
                - service: tts.speak
                  continue_on_error: true
                  target:
                    entity_id: tts.google_de_de
                  data_template:
                    media_player_entity_id:
                      - media_player.wohnzimmer_uhr
                      - media_player.kuche_lautsprecher
                    message: >
                      Es ist {{ now().hour }} Uhr {{ now().minute }} .
                      Die Sbahn um {{ states.sensor.zorneding_to_leuchtenbergring.attributes.departure }} Uhr hat voraussichtlich
                      {% if state_attr('sensor.zorneding_to_leuchtenbergring', 'delay') == 1 %}
                      eine Minute
                      {% elif state_attr('sensor.zorneding_to_leuchtenbergring', 'delay') >= 1 %}
                      {{ states.sensor.zorneding_to_leuchtenbergring.attributes.delay }} Minuten
                      {% else %}
                      keine
                      {% endif %} Verspätung.
                - delay: "00:00:12"
                - choose:
                    - conditions:
                        - condition: or
                          conditions:
                            - condition: state
                              entity_id: binary_sensor.fabian_s_zimmer_open_window
                              state: "on"
                            - condition: state
                              entity_id: binary_sensor.samuel_s_zimmer_open_window
                              state: "on"
                            - condition: state
                              entity_id: binary_sensor.wohnzimmer_open_window
                              state: "on"
                            - condition: state
                              entity_id: binary_sensor.bad_open_window
                              state: "on"
                      sequence:
                        - parallel:
                            - service: tts.speak
                              continue_on_error: true
                              target:
                                entity_id: tts.google_de_de
                              data_template:
                                media_player_entity_id:
                                  - media_player.wohnzimmer_uhr
                                  - media_player.kuche_lautsprecher
                                message: >
                                  Das Fenster im {% if is_state('binary_sensor.fabian_s_zimmer_open_window', 'on') %}
                                    Fabians Zimmer
                                  {% endif %}
                                  {% if is_state('binary_sensor.samuel_s_zimmer_open_window', 'on') %}
                                    Samuels Zimmer
                                  {% endif %}
                                  {% if is_state('binary_sensor.wohnzimmer_open_window', 'on') %}
                                    Wohnzimmer
                                  {% endif %}
                                  {% if is_state('binary_sensor.bad_open_window', 'on') %}
                                    Bad
                                  {% endif %}
                                  muss noch geschlossen werden.
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                    entity_id:
                      - media_player.wohnzimmer_uhr
                      - media_player.kuche_lautsprecher
        - choose:
            - conditions:
                - condition: and
                  conditions:
                    - condition: state
                      entity_id: device_tracker.redmi_note_10_pro
                      state: home
                    - condition: state
                      entity_id: device_tracker.pixel_8_pro
                      state: home
              sequence:
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.1 }}
                    entity_id: media_player.fabians_lautsprecher
                - service: tts.speak
                  continue_on_error: true
                  target:
                    entity_id: tts.google_de_de
                  data_template:
                    media_player_entity_id: media_player.fabians_lautsprecher
                    message: >
                      Es ist {{ now().hour }} Uhr {{ now().minute }} .
                      Die Sbahn um {{ states.sensor.zorneding_to_leuchtenbergring.attributes.departure }} Uhr hat voraussichtlich
                      {% if state_attr('sensor.zorneding_to_leuchtenbergring', 'delay') == 1 %}
                      eine Minute
                      {% elif state_attr('sensor.zorneding_to_leuchtenbergring', 'delay') >= 1 %}
                      {{ states.sensor.zorneding_to_leuchtenbergring.attributes.delay }} Minuten
                      {% else %}
                      keine
                      {% endif %} Verspätung.
                - delay: "00:00:12"
                - choose:
                    - conditions:
                        - condition: or
                          conditions:
                            - condition: state
                              entity_id: binary_sensor.fabian_s_zimmer_open_window
                              state: "on"
                            - condition: state
                              entity_id: binary_sensor.samuel_s_zimmer_open_window
                              state: "on"
                            - condition: state
                              entity_id: binary_sensor.wohnzimmer_open_window
                              state: "on"
                            - condition: state
                              entity_id: binary_sensor.bad_open_window
                              state: "on"
                      sequence:
                        - parallel:
                            - service: tts.speak
                              continue_on_error: true
                              target:
                                entity_id: tts.google_de_de
                              data_template:
                                media_player_entity_id:
                                  - media_player.fabians_lautsprecher
                                  - media_player.kuche_lautsprecher
                                message: >
                                  Das Fenster im {% if is_state('binary_sensor.fabian_s_zimmer_open_window', 'on') %}
                                    Fabians Zimmer
                                  {% endif %}
                                  {% if is_state('binary_sensor.samuel_s_zimmer_open_window', 'on') %}
                                    Samuels Zimmer
                                  {% endif %}
                                  {% if is_state('binary_sensor.wohnzimmer_open_window', 'on') %}
                                    Wohnzimmer
                                  {% endif %}
                                  {% if is_state('binary_sensor.bad_open_window', 'on') %}
                                    Bad
                                  {% endif %}
                                  muss noch geschlossen werden.
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                    entity_id: media_player.fabians_lautsprecher

- id: turn_on_light_in_sleeping_room_if_tv_turned_off
  alias: "Turn on light in sleeping room if tv turned off"
  initial_state: false
  trigger:
    - platform: state
      entity_id: device_tracker.wohnzimmer_tv
      from: "home"
      to: "not_home"
      for:
        seconds: 5
    - platform: state
      entity_id: switch.fernseher
      to: "off"
      for:
        seconds: 5
  condition:
    - condition: time
      after: "21:00:00"
      before: "23:50:00"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.turn_on_light_in_sleeping_room_if_tv_turned_off.attributes.last_triggered) | int > 1800 }}"
  action:
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: light.bett_gluhbirne
                  state: unavailable
          sequence:
            - service: light.turn_on
              data:
                entity_id: light.bett_gluhbirne
                brightness: 255
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: light.mibedsidelamp2_22e2
                  state: unavailable
          sequence:
            - service: light.turn_on
              data:
                entity_id: light.mibedsidelamp2_22e2
                brightness: 255
                color_temp: 279
    - service: light.turn_off
      data:
        entity_id:
          - light.leds_tisch
          - light.regal
    - delay: "00:04:00"
    - service: light.turn_off
      data:
        area_id:
          - 7c05afe47efd44f5a0a064769ad6e105 # Wohnzimmer

- id: turn_off_prismatik_during_the_day
  alias: "Turn off Prismatik during the day"
  initial_state: true
  trigger:
    - platform: state
      entity_id: device_tracker.fabian_pc
      to: "home"
      for:
        minutes: 2
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: sensor.dwd_illuminance
        above: 2000
      - condition: numeric_state
        entity_id: sensor.fabian_s_zuhause_solar_percentage
        above: 20
  action:
    - delay: "00:04:00"
    - service: light.turn_off
      data:
        entity_id: light.prismatik

- id: turn_on_lights_in_livingroom_when_dark_outside
  alias: "Turn on lights in livingroom when dark outside"
  initial_state: true
  trigger:
    - platform: numeric_state
      entity_id: sensor.dwd_illuminance
      below: 1800
    - platform: numeric_state
      entity_id: sensor.fabian_s_zuhause_solar_percentage
      below: 18
    - platform: sun
      event: sunset
      offset: "-00:30:00"
  condition:
    - condition: state
      entity_id: device_tracker.wohnzimmer_tv
      state: home
    - condition: state
      entity_id: "switch.fernseher"
      state: "on"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.turn_on_lights_in_livingroom_when_dark_outside.attributes.last_triggered) | int > 1800 }}"
    - condition: or
      conditions:
        - condition: state
          entity_id: person.fabian
          state: home
        - condition: state
          entity_id: person.samuel
          state: home
  action:
    - service: light.turn_on
      data:
        entity_id:
          - light.leds_wohnzimmer_tv
          - light.leds_wohnzimmer
          - light.stehlampe
        transition: 2

- id: turn_on_lights_in_samuel_room_when_dark_outside
  alias: "Turn on lights in samuel room when dark outside"
  initial_state: true
  trigger:
    - platform: numeric_state
      entity_id: sensor.dwd_illuminance
      below: 2000
    - platform: numeric_state
      entity_id: sensor.fabian_s_zuhause_solar_percentage
      below: 27
    - platform: sun
      event: sunset
      offset: "-00:30:00"
  condition:
    condition: and
    conditions:
      - condition: or
        conditions:
          - condition: and
            conditions:
              - condition: numeric_state
                entity_id: sensor.dwd_illuminance
                below: 2000
              - condition: time
                after: "15:00:00"
          - condition: numeric_state
            entity_id: sensor.fabian_s_zuhause_solar_percentage
            below: 20
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.turn_on_lights_in_samuel_room_when_dark_outside.attributes.last_triggered) | int > 1800 }}"
      - condition: or
        conditions:
          - condition: state
            entity_id: "person.fabian"
            state: "home"
          - condition: state
            entity_id: "person.samuel"
            state: "home"
      - condition: or
        conditions:
          - condition: state
            entity_id: "device_tracker.md3f9bmc"
            state: "home"
  action:
    - service: light.turn_on
      data:
        area_id:
          - b67ac5462e454381aa87f812161d8578 # Samuels Zimmer
        transition: 2

- id: turn_on_lights_in_sleeping_room_when_dark_outside
  alias: "Turn on lights in sleeping room when dark outside"
  trigger:
    - platform: sun
      event: sunset
      offset: "-00:20:00"
    - platform: numeric_state
      entity_id: sensor.dwd_illuminance
      below: 2000
    - platform: numeric_state
      entity_id: sensor.fabian_s_zuhause_solar_percentage
      below: 27
  condition:
    condition: and
    conditions:
      - condition: or
        conditions:
          - condition: state
            entity_id: "device_tracker.fabian_pc"
            state: "home"
          - condition: state
            entity_id: "device_tracker.c_pf38fwqx_pari"
            state: "home"
      - condition: or
        conditions:
          - condition: state
            entity_id: "person.fabian"
            state: "home"
          - condition: state
            entity_id: "person.samuel"
            state: "home"
      - condition: or
        conditions:
          - condition: and
            conditions:
              - condition: numeric_state
                entity_id: sensor.dwd_illuminance
                below: 2000
              - condition: time
                after: "15:00:00"
          - condition: numeric_state
            entity_id: sensor.fabian_s_zuhause_solar_percentage
            below: 20
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.turn_on_lights_in_sleeping_room_when_dark_outside.attributes.last_triggered) | int > 1800 }}"
  action:
    - service: light.turn_on
      data:
        entity_id: light.leds_tisch
        brightness: 255
        transition: 2
    - choose:
        - conditions:
            - condition: state
              entity_id: "device_tracker.fabian_pc"
              state: "home"
          sequence:
            - service: light.turn_on
              data:
                entity_id: light.prismatik
            - service: light.turn_on
              data:
                entity_id:
                  - light.leds_tisch
                  - light.mibedsidelamp2_22e2
                transition: 2
    - choose:
        - conditions:
            - condition: state
              entity_id: "device_tracker.c_pf38fwqx_pari"
              state: "home"
          sequence:
            - service: light.turn_on
              data:
                entity_id:
                  - light.leds_tisch
                  - light.mibedsidelamp2_22e2
                transition: 2

- id: turn_off_lights_in_rooms_when_bright_outside
  alias: "Turn off lights in rooms when bright outside"
  initial_state: true
  trigger:
    - platform: numeric_state
      entity_id: sensor.dwd_illuminance
      above: 20000
    - platform: numeric_state
      entity_id: sensor.fabian_s_zuhause_solar_percentage
      above: 25
    - platform: sun
      event: sunrise
  condition:
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.turn_on_lights_in_samuel_room_when_dark_outside.attributes.last_triggered) | int > 2400 }}"
  action:
    - service: light.turn_off
      data:
        area_id:
          - 7c05afe47efd44f5a0a064769ad6e105 # Wohnzimmer
          - 33e9a108bf1948e5848f156e0851d50c # Fabians Zimmer
          - b67ac5462e454381aa87f812161d8578 # Samuels Zimmer

- id: turn_off_climates_on_warm_days
  alias: "Turn off Climates on warm days"
  initial_state: true
  trigger:
    platform: numeric_state
    entity_id: sensor.weather_ebersberg_hourly
    attribute: temperature
    above: 14
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ state_attr('sensor.weather_ebersberg_daily', 'forecast')[0]['condition'] == 'sunny' }}"
      - condition: template
        value_template: "{{ state_attr('sensor.weather_ebersberg_daily', 'forecast')[1]['condition'] == 'sunny' }}"
      - condition: template
        value_template: "{{ state_attr('sensor.weather_ebersberg_daily', 'forecast')[1]['temperature'] >= 14 }}"
      - condition: state
        entity_id: "input_boolean.thermostate_aus"
        state: "off"
      - condition: or
        conditions:
          - condition: template
            value_template: "{{ now().month <= 10 and now().month >= 2 }}"
  action:
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.thermostate_aus
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_fabian
        message: "Thermostate wurden ausgeschaltet, da es {{ states.weather.ebersberg_ebersberg.attributes.temperature }}° hat und sonnig ist."
        disable_notification: true
        inline_keyboard:
          - "Einschalten:/climateson"
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_samuel
        message: "Thermostate wurden ausgeschaltet, da es {{ states.weather.ebersberg_ebersberg.attributes.temperature }}° hat und sonnig ist."
        disable_notification: true
        inline_keyboard:
          - "Einschalten:/climateson"

- id: turn_on_climates_on_cold_days
  alias: "Turn on Climates on cold days"
  initial_state: true
  trigger:
    - platform: numeric_state
      entity_id: sensor.weather_ebersberg_hourly
      attribute: temperature
      below: 10
    - platform: sun
      event: sunset
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: "input_boolean.thermostate_aus"
        state: "on"
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.turn_on_climates_on_cold_days.attributes.last_triggered) | int > 86300 }}"
      - condition: or
        conditions:
          - condition: and
            conditions:
              - condition: numeric_state
                entity_id: sensor.weather_ebersberg_hourly
                attribute: temperature
                below: 10
              - condition: sun
                after: sunset
                after_offset: "-04:00:00"
              - condition: time
                after: "20:30:00"
              - condition: template
                value_template: "{{ now().month <= 10 and now().month >= 2 }}"
          - condition: template
            value_template: "{{ state_attr('sensor.weather_ebersberg_daily', 'forecast')[1]['temperature'] <= 12 }}"
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ state_attr('sensor.weather_ebersberg_daily', 'forecast')[1]['condition'] != 'sunny' }}"
              - condition: template
                value_template: "{{ state_attr('sensor.weather_ebersberg_daily', 'forecast')[1]['temperature'] <= 14 }}"
  action:
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_fabian
        message: "Thermostate sollten wieder eingeschaltet werden, da es jetzt nur noch {{ states.weather.ebersberg_ebersberg.attributes.temperature }} °C und morgen {{ state_attr('sensor.weather_ebersberg_daily', 'forecast')[1]['temperature'] }} °C hat. Dies wurde nicht automatisch gemacht!"
        disable_notification: true
        inline_keyboard:
          - "Einschalten:/climateson"
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_samuel
        message: "Thermostate sollten wieder eingeschaltet werden, da es jetzt nur noch {{ states.weather.ebersberg_ebersberg.attributes.temperature }} °C und morgen {{ state_attr('sensor.weather_ebersberg_daily', 'forecast')[1]['temperature'] }} °C hat. Dies wurde nicht automatisch gemacht!"
        disable_notification: true
        inline_keyboard:
          - "Einschalten:/climateson"

- id: remind_for_gruppentreffen
  alias: "remind for Gruppentreffen"
  trigger:
    - platform: template
      value_template: "{{ as_timestamp(now()) | round(-1) == (as_timestamp(states.calendar.votgaming_kalender.attributes.start_time) - 111600) | round(-1) }}"
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ ((as_timestamp(states.calendar.votgaming_kalender.attributes.start_time) - as_timestamp(now())) < 112600) and ((as_timestamp(states.calendar.votgaming_kalender.attributes.start_time) - as_timestamp(now())) > 0) }}"
      - condition: state
        entity_id: calendar.votgaming_kalender
        attribute: message
        state: "Gruppentreffen"
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.remind_for_gruppentreffen.attributes.last_triggered) | int > 180000 }}"
  action:
    - choose:
        - conditions:
            - condition: and
              conditions:
                - condition: or
                  conditions:
                    - condition: template
                      value_template: "{{state_attr('sensor.weather_ebersberg_daily', 'forecast')[1]['condition'] == 'sunny' }}"
                    - condition: template
                      value_template: "{{state_attr('sensor.weather_ebersberg_daily', 'forecast')[1]['condition'] == 'partlycloudy' }}"
                - condition: template
                  value_template: "{{state_attr('sensor.weather_ebersberg_daily', 'forecast')[1]['temperature'] | int >= 18 }}"
          sequence:
            - service: telegram_bot.send_poll
              data_template:
                target: !secret telegram_chat_5friends
                question: "Morgen ist {{ states.calendar.votgaming_kalender.attributes.message }}. Es wird {{ states.sensor.weather_ebersberg_hourly.attributes.forecast[24].condition }} bei {{ states.sensor.weather_ebersberg_hourly.attributes.forecast[1].temperature }} °.{% if now().month <= 4 or now().month >= 10 %} Sonne bis {{ as_timestamp(states.sun.sun.attributes.next_dusk) |float| timestamp_custom('%H:%M', false)}}.{% endif %} Wo treffen wir uns?"
                options:
                  - "See"
                  - "Weiher"
                  - "Fabi"
                  - "Kai & Adri"
                  - "Flo"
                  - "Maxi"
                  - "Wo anders (Schreiben wo!)"
                is_anonymous: false
                allows_multiple_answers: true
                disable_notification: true
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: sensor.weather_ebersberg_hourly
                  state: "unavailable"
                - condition: state
                  entity_id: sensor.weather_ebersberg_hourly
                  state: "unknown"
          sequence:
            - service: telegram_bot.send_poll
              data_template:
                target: !secret telegram_chat_5friends
                question: "Morgen ist {{ states.calendar.votgaming_kalender.attributes.message }}. {% if now().month <= 4 or now().month >= 10 %} Sonne bis {{ as_timestamp(states.sun.sun.attributes.next_dusk) |float| timestamp_custom('%H:%M', false)}}.{% endif %} Wo treffen wir uns?"
                options:
                  - "Fabi"
                  - "Kai & Adri"
                  - "Flo"
                  - "Maxi"
                  - "Wo anders (Schreiben wo!)"
                is_anonymous: false
                allows_multiple_answers: true
                disable_notification: true
      default:
        - service: telegram_bot.send_poll
          data_template:
            target: !secret telegram_chat_5friends
            question: "Morgen ist {{ states.calendar.votgaming_kalender.attributes.message }}. Es wird {{ states.sensor.weather_ebersberg_hourly.attributes.forecast[24].condition }} bei {{ states.sensor.weather_ebersberg_hourly.attributes.forecast[24].temperature }} °.{% if now().month <= 4 or now().month >= 10 %} Sonne bis {{ as_timestamp(states.sun.sun.attributes.next_dusk) |float| timestamp_custom('%H:%M', false)}}.{% endif %} Wo treffen wir uns?"
            options:
              - "Fabi"
              - "Kai & Adri"
              - "Flo"
              - "Maxi"
              - "Draußen trotz nicht so gutem Wetter"
              - "Wo anders (Schreiben wo!)"
            is_anonymous: false
            allows_multiple_answers: true
            disable_notification: true
    - service: telegram_bot.send_poll
      data_template:
        target: !secret telegram_chat_5friends
        question: "Gemeinsam kochen? Essensvorschlag: {{ states.sensor.chefkoch_daily_recipe.state }} . Weitere Vorschläge mit /food"
        options:
          - "Ja, esse mit"
          - "Nein, brauche nix"
        is_anonymous: false
        allows_multiple_answers: false
        disable_notification: true
    - service: telegram_bot.send_poll
      data_template:
        target: !secret telegram_chat_5friends
        question: "Welcher Gast soll NÄCHSTE Woche mit dabei sein?"
        options:
          - "Niemand (sobald einer dafür stimmt gibts keinen Gast)"
          - "Daniel"
          - "Kassandra"
          - "Leon"
          - "Lorenz"
          - "Michelle"
          - "Samuel"
          - "Yannick"
          - "Mir egal / wer anderes"
        is_anonymous: false
        allows_multiple_answers: true
        disable_notification: true

- id: remind_for_bouldern
  alias: "remind for Bouldern"
  trigger:
    - platform: time
      at: "19:00:00"
  condition:
    - condition: time
      weekday:
        - sun
  action:
    - service: telegram_bot.send_message
      data:
        target: !secret telegram_chat_bouldern
        message: >
          {% set days_ost = [
            {'day': 'Montag', 'value': states('sensor.boulderwelt_ost_monday_avg_2h') | float(70), 'day_avg': states('sensor.boulderwelt_ost_monday_avg') | float(70)},
            {'day': 'Dienstag', 'value': states('sensor.boulderwelt_ost_tuesday_avg_2h') | float(70), 'day_avg': states('sensor.boulderwelt_ost_tuesday_avg') | float(70)},
            {'day': 'Mittwoch', 'value': states('sensor.boulderwelt_ost_wednesday_avg_2h') | float(70), 'day_avg': states('sensor.boulderwelt_ost_wednesday_avg') | float(70)},
            {'day': 'Donnerstag', 'value': states('sensor.boulderwelt_ost_thursday_avg_2h') | float(70), 'day_avg': states('sensor.boulderwelt_ost_thursday_avg') | float(70)},
            {'day': 'Freitag', 'value': states('sensor.boulderwelt_ost_friday_avg_2h') | float(70), 'day_avg': states('sensor.boulderwelt_ost_friday_avg') | float(70)}
          ] %}
          {% set sorted_days_ost = days_ost | sort(attribute='value') %}

          {% set days_sued = [
            {'day': 'Montag', 'value': states('sensor.boulderwelt_sued_monday_avg_2h') | float(70), 'day_avg': states('sensor.boulderwelt_sued_monday_avg') | float(70)},
            {'day': 'Dienstag', 'value': states('sensor.boulderwelt_sued_tuesday_avg_2h') | float(70), 'day_avg': states('sensor.boulderwelt_sued_tuesday_avg') | float(70)},
            {'day': 'Mittwoch', 'value': states('sensor.boulderwelt_sued_wednesday_avg_2h') | float(70), 'day_avg': states('sensor.boulderwelt_sued_wednesday_avg') | float(70)},
            {'day': 'Donnerstag', 'value': states('sensor.boulderwelt_sued_thursday_avg_2h') | float(70), 'day_avg': states('sensor.boulderwelt_sued_thursday_avg') | float(70)},
            {'day': 'Freitag', 'value': states('sensor.boulderwelt_sued_friday_avg_2h') | float(70), 'day_avg': states('sensor.boulderwelt_sued_friday_avg') | float(70)}
          ] %}
          {% set sorted_days_sued = days_sued | sort(attribute='value') %}

          {% set days_sued_wekend = [
            {'day': 'Samstag', 'value': states('sensor.boulderwelt_sued_saturday_avg') | float(70)},
            {'day': 'Sonntag', 'value': states('sensor.boulderwelt_sued_sunday_avg') | float(70)}
          ] %}
          {% set sorted_days_weekend_sued = days_sued_wekend | sort(attribute='value') %}

          Die besten Boulder-Tage unter der Woche basierend auf der Auslastung der aktuellen Woche (Zeiten 17 - 19h für Statistiken, dahinter gesamter Tag):

          - **Ost**:
            1. {{ sorted_days_ost[0].day }} ({{ sorted_days_ost[0].value }}% - Tag: {{ sorted_days_ost[0].day_avg }}%)
            2. {{ sorted_days_ost[1].day }} ({{ sorted_days_ost[1].value }}% - Tag: {{ sorted_days_ost[1].day_avg }}%)
            3. {{ sorted_days_ost[2].day }} ({{ sorted_days_ost[2].value }}% - Tag: {{ sorted_days_ost[2].day_avg }}%)

          - **Süd**:
            1. {{ sorted_days_sued[0].day }} ({{ sorted_days_sued[0].value }}% - Tag: {{ sorted_days_sued[0].day_avg }}%)
            2. {{ sorted_days_sued[1].day }} ({{ sorted_days_sued[1].value }}% - Tag: {{ sorted_days_sued[1].day_avg }}%)
            3. {{ sorted_days_sued[2].day }} ({{ sorted_days_sued[2].value }}% - Tag: {{ sorted_days_sued[2].day_avg }}%)

          - **Wochenende Süd**: {{ sorted_days_weekend_sued[0].day }} (Tag: {{ sorted_days_weekend_sued[0].value }}%)

    - service: telegram_bot.send_poll
      data_template:
        target: !secret telegram_chat_bouldern
        question: "Wann wollen wir nächste Woche bouldern?"
        options:
          - "Montag"
          - "Dienstag"
          - "Mittwoch"
          - "Donnerstag"
          - "Freitag"
          - "Samstag"
          - "Sonntag"
          - "Kann in dieser Woche gar nicht"
        is_anonymous: false
        allows_multiple_answers: true
        disable_notification: true
    #- service: telegram_bot.send_poll
    #  data_template:
    #    target: !secret telegram_chat_bouldern
    #    question: "Ab wie viel Uhr?"
    #    options:
    #      - "16 Uhr (für Mo-Fr)"
    #      - "17 Uhr (für Mo-Fr)"
    #      - "18 Uhr (für Mo-Fr)"
    #      - "19 Uhr (für Mo-Fr)"
    #      - "10 Uhr (für WE)"
    #      - "12 Uhr (für WE)"
    #      - "15 Uhr (für WE)"
    #    is_anonymous: false
    #    allows_multiple_answers: true
    #    disable_notification: true
    - service: telegram_bot.send_poll
      data_template:
        target: !secret telegram_chat_bouldern
        question: "Welche Halle?"
        options:
          - "Ost"
          - "Süd"
        is_anonymous: false
        allows_multiple_answers: true
        disable_notification: true

- id: update_boulderwelt_sensor_average
  alias: "Update Boulderwelt Sensor Average"
  trigger:
    - platform: time
      at: "23:59:00"
  action:
    - choose:
        - conditions:
            - condition: time
              weekday:
                - mon
          sequence:
            - service: input_number.set_value
              data:
                entity_id: input_number.boulderwelt_ost_monday_avg
                value: "{{ states('sensor.boulderwelt_munchen_ost_level_mean') }}"
            - service: input_number.set_value
              data:
                entity_id: input_number.boulderwelt_sued_monday_avg
                value: "{{ states('sensor.boulderwelt_munchen_sued_level_mean') }}"

        - conditions:
            - condition: time
              weekday:
                - tue
          sequence:
            - service: input_number.set_value
              data:
                entity_id: input_number.boulderwelt_ost_tuesday_avg
                value: "{{ states('sensor.boulderwelt_munchen_ost_level_mean') }}"
            - service: input_number.set_value
              data:
                entity_id: input_number.boulderwelt_sued_tuesday_avg
                value: "{{ states('sensor.boulderwelt_munchen_sued_level_mean') }}"

        - conditions:
            - condition: time
              weekday:
                - wed
          sequence:
            - service: input_number.set_value
              data:
                entity_id: input_number.boulderwelt_ost_wednesday_avg
                value: "{{ states('sensor.boulderwelt_munchen_ost_level_mean') }}"
            - service: input_number.set_value
              data:
                entity_id: input_number.boulderwelt_sued_wednesday_avg
                value: "{{ states('sensor.boulderwelt_munchen_sued_level_mean') }}"

        - conditions:
            - condition: time
              weekday:
                - thu
          sequence:
            - service: input_number.set_value
              data:
                entity_id: input_number.boulderwelt_ost_thursday_avg
                value: "{{ states('sensor.boulderwelt_munchen_ost_level_mean') }}"
            - service: input_number.set_value
              data:
                entity_id: input_number.boulderwelt_sued_thursday_avg
                value: "{{ states('sensor.boulderwelt_munchen_sued_level_mean') }}"

        - conditions:
            - condition: time
              weekday:
                - fri
          sequence:
            - service: input_number.set_value
              data:
                entity_id: input_number.boulderwelt_ost_friday_avg
                value: "{{ states('sensor.boulderwelt_munchen_ost_level_mean') }}"
            - service: input_number.set_value
              data:
                entity_id: input_number.boulderwelt_sued_friday_avg
                value: "{{ states('sensor.boulderwelt_munchen_sued_level_mean') }}"

        - conditions:
            - condition: time
              weekday:
                - sat
          sequence:
            - service: input_number.set_value
              data:
                entity_id: input_number.boulderwelt_sued_saturday_avg
                value: "{{ states('sensor.boulderwelt_munchen_sued_level_mean') }}"

        - conditions:
            - condition: time
              weekday:
                - sun
          sequence:
            - service: input_number.set_value
              data:
                entity_id: input_number.boulderwelt_sued_sunday_avg
                value: "{{ states('sensor.boulderwelt_munchen_sued_level_mean') }}"

- id: update_boulderwelt_sensor_average_2h
  alias: "Update Boulderwelt Sensor Average 2h"
  trigger:
    - platform: time
      at: "19:00:00"
  conditions:
    - condition: time
      weekday:
        - mon
        - tue
        - wed
        - thu
        - fri
  action:
    - choose:
        - conditions:
            - condition: time
              weekday:
                - mon
          sequence:
            - service: input_number.set_value
              continue_on_error: true
              data:
                entity_id: input_number.boulderwelt_ost_monday_avg_2h
                value: "{{ states('sensor.boulderwelt_munchen_ost_level_mean_2h') }}"
            - service: input_number.set_value
              continue_on_error: true
              data:
                entity_id: input_number.boulderwelt_sued_monday_avg_2h
                value: "{{ states('sensor.boulderwelt_munchen_sued_level_mean_2h') }}"

        - conditions:
            - condition: time
              weekday:
                - tue
          sequence:
            - service: input_number.set_value
              continue_on_error: true
              data:
                entity_id: input_number.boulderwelt_ost_tuesday_avg_2h
                value: "{{ states('sensor.boulderwelt_munchen_ost_level_mean_2h') }}"
            - service: input_number.set_value
              continue_on_error: true
              data:
                entity_id: input_number.boulderwelt_sued_tuesday_avg_2h
                value: "{{ states('sensor.boulderwelt_munchen_sued_level_mean_2h') }}"

        - conditions:
            - condition: time
              weekday:
                - wed
          sequence:
            - service: input_number.set_value
              continue_on_error: true
              data:
                entity_id: input_number.boulderwelt_ost_wednesday_avg_2h
                value: "{{ states('sensor.boulderwelt_munchen_ost_level_mean_2h') }}"
            - service: input_number.set_value
              continue_on_error: true
              data:
                entity_id: input_number.boulderwelt_sued_wednesday_avg_2h
                value: "{{ states('sensor.boulderwelt_munchen_sued_level_mean_2h') }}"

        - conditions:
            - condition: time
              weekday:
                - thu
          sequence:
            - service: input_number.set_value
              continue_on_error: true
              data:
                entity_id: input_number.boulderwelt_ost_thursday_avg_2h
                value: "{{ states('sensor.boulderwelt_munchen_ost_level_mean_2h') }}"
            - service: input_number.set_value
              continue_on_error: true
              data:
                entity_id: input_number.boulderwelt_sued_thursday_avg_2h
                value: "{{ states('sensor.boulderwelt_munchen_sued_level_mean_2h') }}"

        - conditions:
            - condition: time
              weekday:
                - fri
          sequence:
            - service: input_number.set_value
              continue_on_error: true
              data:
                entity_id: input_number.boulderwelt_ost_friday_avg_2h
                value: "{{ states('sensor.boulderwelt_munchen_ost_level_mean_2h') }}"
            - service: input_number.set_value
              continue_on_error: true
              data:
                entity_id: input_number.boulderwelt_sued_friday_avg_2h
                value: "{{ states('sensor.boulderwelt_munchen_sued_level_mean_2h') }}"

- id: turn_on_fridge_for_meetings
  alias: "Turn on fridge for meetings"
  initial_state: true
  trigger:
    - platform: template
      value_template: "{{ as_timestamp(now()) | round(-1) == (as_timestamp(states.calendar.fabianseitz98_gmail_com.attributes.start_time) - 10800) | round(-1) }}"
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ ((as_timestamp(states.calendar.fabianseitz98_gmail_com.attributes.start_time) - as_timestamp(now())) < 43200) and ((as_timestamp(states.calendar.fabianseitz98_gmail_com.attributes.start_time) - as_timestamp(now())) > 0) }}"
      - condition: not
        conditions:
          - condition: state
            entity_id: calendar.fabianseitz98_gmail_com
            attribute: message
            state: "Gruppentreffen"
  action:
    - choose:
        - conditions:
            - condition: and
              conditions:
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: message
                  state: "Gruppentreffen"
                - condition: state
                  entity_id: "switch.kuhlschrank"
                  state: "off"
            - condition: or
              conditions:
                - condition: template
                  value_template: "{{ now().month < 4 and now().month > 10 }}"
                - condition: and
                  conditions:
                    - condition: template
                      value_template: "{{ now().month <= 10 and now().month >= 4 }}"
                    - condition: numeric_state
                      entity_id: sensor.weather_ebersberg_hourly
                      attribute: temperature
                      below: 6
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_5friends
                message: "Erinnerung: Heute steht {{ states.calendar.fabianseitz98_gmail_com.attributes.message }} an."
                disable_notification: true
                inline_keyboard:
                  - "Kühlschrank anschalten:/fridge"
    - choose:
        - conditions:
            - condition: and
              conditions:
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: message
                  state: "Gruppentreffen"
                - condition: state
                  entity_id: input_boolean.abwesend_modus
                  state: "off"
                - condition: state
                  entity_id: "switch.kuhlschrank"
                  state: "off"
                - condition: template
                  value_template: "{{ now().month <= 10 and now().month >= 4 }}" #  Im Winter ist der Keller kalt genug, da muss der Kühlschrank nicht an sein.
                - condition: numeric_state
                  entity_id: sensor.weather_ebersberg_hourly
                  attribute: temperature
                  above: 5
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_5friends
                message: "Anscheinend steht heute {{ states.calendar.fabianseitz98_gmail_com.attributes.message }} an, soll der Kühlschrank im Keller eingeschaltet werden?"
                disable_notification: true
                inline_keyboard:
                  - "Anschalten:/fridge"
    - choose:
        - conditions:
            - condition: state
              entity_id: "switch.kuhlschrank"
              state: "off"
            - condition: template
              value_template: "{{ now().month <= 10 and now().month >= 4 }}" #  Im Winter ist der Keller kalt genug, da muss der Kühlschrank nicht an sein.
            - condition: state
              entity_id: input_boolean.abwesend_modus
              state: "off"
            - condition: not
              conditions:
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: message
                  state: "Gruppentreffen"
            - condition: or
              conditions:
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: location
                  state: !secret strasse
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: location
                  state: none
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: location
                  state: ""
            - condition: or
              conditions:
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: message
                  state: "Treffen"
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: message
                  state: "Monthly Meet"
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: message
                  state: "Treffen in Zorneding"
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: message
                  state: "Geburtstagsfeier"
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: message
                  state: "Spieleabend"
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: message
                  state: "Karten- / Brettspieleabend"
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: message
                  state: "Kartenspieleabend"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_fabian
                message: "Anscheinend steht heute {{ states.calendar.fabianseitz98_gmail_com.attributes.message }} an, soll der Kühlschrank im Keller eingeschaltet werden?"
                disable_notification: true
                inline_keyboard:
                  - "Anschalten:/fridge"

- id: remind_for_door_for_meetings
  alias: "Remind for door for meetings"
  initial_state: true
  trigger:
    - platform: template
      value_template: "{{ as_timestamp(now()) | round(-1) == (as_timestamp(states.calendar.fabianseitz98_gmail_com.attributes.start_time) - 43200) | round(-1) }}"
    - platform: template
      value_template: "{{ as_timestamp(now()) | round(-1) == (as_timestamp(states.calendar.votgaming_kalender.attributes.start_time) - 43500) | round(-1) }}"
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ ((as_timestamp(states.calendar.fabianseitz98_gmail_com.attributes.start_time) - as_timestamp(now())) < 58000) and ((as_timestamp(states.calendar.fabianseitz98_gmail_com.attributes.start_time) - as_timestamp(now())) > 0) }}"
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.remind_for_door_for_meetings.attributes.last_triggered) | int > 7200 }}"
      - condition: template
        value_template: "{{ now().month <= 4 or now().month >= 10 }}" #  Im Sommer ist der Keller warm genug, da muss nicht die Wärme vom Flur genutzt werden.
      - condition: state
        entity_id: person.fabian
        state: "home"
  action:
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: location
                  state: !secret strasse
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: location
                  state: none
            - condition: or
              conditions:
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: message
                  state: "Gruppentreffen"
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: message
                  state: "Treffen"
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: message
                  state: "Monthly Meet"
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: message
                  state: "Treffen in Zorneding"
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: message
                  state: "Geburtstagsfeier"
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: message
                  state: "Spieleabend"
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: message
                  state: "Karten- / Brettspieleabend"
                - condition: state
                  entity_id: calendar.fabianseitz98_gmail_com
                  attribute: message
                  state: "Kartenspieleabend"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_fabian
                message: "Demnächst steht {{ states.calendar.fabianseitz98_gmail_com.attributes.message }} an. Tür im Keller öffnen um die Wärme vom Heizraum zu nutzen?"

- id: remind_for_DST_change_Winter_Sommerzeit_tomorrow
  alias: "Remind tomorrow for DST change - Winter/Sommerzeit"
  trigger:
    platform: time
    at: "12:00:00"
  condition:
    condition: template
    value_template: "{{ now().strftime('%j') == (now() + timedelta(days=1)).strftime('%j') }}"
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ (now() + timedelta(days=1)).strftime('%Z') == 'CEST' }}" # Sommerzeitprüfung
          sequence:
            - service: telegram_bot.send_message
              data:
                target: !secret telegram_chat_fabian
                disable_notification: true
                message: Die Zeitumstellung ist morgen! Sommerzeit hat begonnen und die Uhrzeit wird um eine Stunde vorgestellt (eine Stunde weniger Schlaf).
            - service: telegram_bot.send_message
              data:
                target: !secret telegram_chat_samuel
                disable_notification: true
                message: Die Zeitumstellung ist morgen! Sommerzeit hat begonnen und die Uhrzeit wird um eine Stunde vorgestellt (eine Stunde weniger Schlaf).
        - conditions:
            - condition: template
              value_template: "{{ (now() + timedelta(days=1)).strftime('%Z') == 'CET' }}" # Winterzeitprüfung
          sequence:
            - service: telegram_bot.send_message
              data:
                target: !secret telegram_chat_fabian
                disable_notification: true
                message: Die Zeitumstellung ist morgen! Winterzeit hat begonnen und die Uhrzeit wird um eine Stunde zurückgestellt (eine Stunde mehr Schlaf).
            - service: telegram_bot.send_message
              data:
                target: !secret telegram_chat_samuel
                disable_notification: true
                message: Die Zeitumstellung ist morgen! Winterzeit hat begonnen und die Uhrzeit wird um eine Stunde zurückgestellt (eine Stunde mehr Schlaf).

- id: remind_for_DST_change_Winter_Sommerzeit
  alias: "Remind for DST change - Winter/Sommerzeit"
  initial_state: true
  trigger:
    - platform: template
      value_template: "{{ now().timetuple().tm_isdst }}"
  action:
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_fabian
        disable_notification: true
        message: >
          Die Zeitumstellung hat stattgefunden!
          {%- if now().timetuple().tm_isdst | int > 0 -%}
            Sommerzeit hat begonnen und die Uhrzeit wird um eine Stunde vorgestellt (eine Stunde weniger Schlaf).
          {%- else -%}
            Winterzeit hat begonnen und die Uhrzeit wird um eine Stunde zurückgestellt (eine Stunde mehr Schlaf).
          {%- endif -%}
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_samuel
        disable_notification: true
        message: >
          Die Zeitumstellung hat stattgefunden!
          {%- if now().timetuple().tm_isdst | int > 0 -%}
            Sommerzeit hat begonnen und die Uhrzeit wird um eine Stunde vorgestellt (eine Stunde weniger Schlaf).
          {%- else -%}
            Winterzeit hat begonnen und die Uhrzeit wird um eine Stunde zurückgestellt (eine Stunde mehr Schlaf).
          {%- endif -%}

- id: notify_on_HA_restart
  alias: "Notify on HA restart"
  initial_state: true
  trigger:
    platform: homeassistant
    event: start
  condition:
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_on_ha_restart.attributes.last_triggered) | int > 1800 }}"
  action:
    - service: frontend.set_theme
      data:
        name: transparentgray-LAB
    #  - service: button.press
    #  target:
    #  entity_id: button.synchronize_devices
    - service: switch.turn_on
      data:
        entity_id:
          - switch.bettlicht
          - switch.bett_gluhbirne
          - switch.lenovo_uhr
          - switch.rollo
          - switch.leds_wohnzimmer
    - choose:
        - conditions:
            - condition: time
              after: "03:10:00"
              before: "03:00:00"
            - condition: template
              value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.automatic_ha_update.attributes.last_triggered) | int > 500 }}"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_fabian
                message: "Homeassistant wurde soeben gestartet."

- id: turn_on_devices_on_tasmota_restart
  alias: Turn on devices on tasmota restart
  initial_state: true
  trigger:
    - platform: state
      entity_id: switch.bettlicht
      from: "unavailable"
      to: "off"
    - platform: state
      entity_id: switch.bettlicht
      from: "unavailable"
      to: "off"
    - platform: state
      entity_id: switch.bettlicht
      from: "unavailable"
      to: "off"
    - platform: state
      entity_id: switch.bettlicht
      from: "unavailable"
      to: "off"
  condition:
    - condition: state
      entity_id: "input_boolean.abwesend_modus"
      state: "off"
  action:
    - service: switch.turn_on
      data:
        entity_id:
          - switch.bettlicht
          - switch.bett_gluhbirne
          - switch.rollo
          - switch.lenovo_uhr
          - switch.leds_wohnzimmer

- id: run_bash_script_with_addon_bash_script_executer_every_hour
  alias: "Run Bash Script with Addon Bash Script Executer every hour"
  initial_state: false
  trigger:
    - platform: time_pattern
      minutes: "/59"
      seconds: 0
  action:
    - service: hassio.addon_start
      data:
        addon: 605cee21_bashscriptexecuter

- id: run_epicgames_free_addon_once_a_week
  alias: "Run Epic Games free addon once a week"
  initial_state: true
  trigger:
    - platform: time
      at: "17:05:00"
  condition:
    - condition: time
      weekday:
        - thu
  action:
    - service: hassio.addon_start
      data:
        addon: db21ed7f_epicgamesfree

- id: turn_on_away_mode
  alias: Turn on Away Mode
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.abwesend_modus
      to: "on"
  action:
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.leiser_modus
    - service: switch.turn_off
      data:
        entity_id:
          # - switch.lampe_samuel_s_zimmer
          - switch.samuel_s_zimmer_usb_ports
          - switch.bett_gluhbirne
          - switch.bett_steckdose
          - switch.bettlicht
    - service: cover.close_cover
      target:
        entity_id: all
    - choose:
        - conditions:
            - condition: state
              entity_id: "input_boolean.thermostate_aus"
              state: "off"
          sequence:
            # - service: climate.set_preset_mode
            #   data:
            #     entity_id: all
            #     preset_mode: "away"
            - service: climate.set_hvac_mode
              data:
                entity_id: all
                hvac_mode: auto
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_2_4g_signal_strength
                  state: "min"
          sequence:
            - service: select.select_option
              data:
                option: min
              target:
                entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_2_4g_signal_strength
    - delay: "00:00:40"
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_5g_signal_strength
                  state: "min"
          sequence:
            - service: select.select_option
              data:
                option: min
              target:
                entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_5g_signal_strength

- id: turn_off_away_mode
  alias: Turn off Away Mode
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.abwesend_modus
      to: "off"
  action:
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.leiser_modus
    - service: switch.turn_on
      data:
        entity_id:
          # - switch.lampe_samuel_s_zimmer
          # - switch.samuel_s_zimmer_usb_ports
          - switch.bett_gluhbirne
          - switch.bettlicht
    - choose:
        - conditions:
            - condition: sun
              before: sunset
          sequence:
            - service: cover.open_cover
              target:
                entity_id: all
    - choose:
        - conditions:
            - condition: state
              entity_id: "input_boolean.thermostate_aus"
              state: "off"
          sequence:
            # - service: climate.set_preset_mode
            #   data:
            #     entity_id: all
            #     preset_mode: "home"
            - service: climate.set_hvac_mode
              data:
                entity_id: climate.fabian_s_zimmer
                hvac_mode: auto
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_2_4g_signal_strength
                  state: "max"
          sequence:
            - service: select.select_option
              data:
                option: max
              target:
                entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_2_4g_signal_strength
    - delay: "00:00:40"
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_5g_signal_strength
                  state: "max"
          sequence:
            - service: select.select_option
              data:
                option: max
              target:
                entity_id: select.miwifi_28_d1_27_fc_ab_d8_wifi_5g_signal_strength

- id: turn_on_climate_off_mode
  alias: Turn on Climate Off mode
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.thermostate_aus
      to: "on"
  action:
    - service: climate.turn_off
      data:
        entity_id: all

- id: turn_off_climate_off_mode
  alias: Turn off Climate Off mode
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.thermostate_aus
      to: "off"
  action:
    - service: climate.set_hvac_mode
      data:
        entity_id: all
        hvac_mode: auto

- id: turn_on_guest_mode
  alias: Turn on Guest Mode mode
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.gast_modus
      to: "on"
  action:
    - service: switch.turn_off
      data:
        entity_id: switch.adaptive_lighting_guest_room
    - service: switch.turn_on
      data:
        entity_id:
          - switch.samuel_s_zimmer_usb_ports
          - switch.steckerleiste_samuel_s_zimmer

- id: turn_off_guest_mode
  alias: Turn on Guest Mode mode
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.gast_modus
      to: "off"
  action:
    - service: switch.turn_off
      data:
        entity_id:
          - switch.samuel_s_zimmer_usb_ports
          - switch.steckerleiste_samuel_s_zimmer

- id: turn_on_fs_strom
  alias: Turn on FS Strom
  initial_state: true
  mode: single
  trigger:
    - platform: state
      entity_id: input_boolean.fabian_pc_strom
      to: "on"
    - platform: state
      entity_id: switch.fabian_schreibtisch
      to: "on"
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.fabian_schreibtisch
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.fabian_pc_strom

- id: turn_off_fs_strom
  alias: Turn off FS Strom
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.fabian_pc_strom
      to: "off"
    - platform: state
      entity_id: switch.fabian_schreibtisch
      to: "off"
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: switch.fabian_schreibtisch
              state: "on"
            - condition: and
              conditions:
                - condition: state
                  entity_id: device_tracker.fabian_pc
                  state: "home"
                - condition: numeric_state
                  entity_id: sensor.fabian_schreibtisch_power
                  above: 20
          sequence:
            - service: button.press
              target:
                entity_id: button.fabian_pc_shutdown
            - delay: "00:30:00"
    - choose:
        - conditions:
            - condition: state
              entity_id: switch.fabian_schreibtisch
              state: "on"
            - condition: and
              conditions:
                - condition: state
                  entity_id: device_tracker.fabian_pc
                  state: "home"
                - condition: numeric_state
                  entity_id: sensor.fabian_schreibtisch_power
                  above: 20
          sequence:
            - service: button.press
              target:
                entity_id: button.fabian_pc_shutdown
            - delay: "00:30:00"
    - choose:
        - conditions:
            - condition: state
              entity_id: switch.fabian_schreibtisch
              state: "on"
            - condition: and
              conditions:
                - condition: state
                  entity_id: device_tracker.fabian_pc
                  state: "home"
                - condition: numeric_state
                  entity_id: sensor.fabian_schreibtisch_power
                  above: 20
          sequence:
            - service: button.press
              target:
                entity_id: button.fabian_pc_shutdown
            - delay: "00:01:00"
    - choose:
        - conditions:
            - condition: state
              entity_id: switch.fabian_schreibtisch
              state: "on"
            - condition: and
              conditions:
                - condition: state
                  entity_id: device_tracker.fabian_pc
                  state: "home"
                - condition: numeric_state
                  entity_id: sensor.fabian_schreibtisch_power
                  above: 20
          sequence:
            - service: notify.telegram_fabian
              data:
                message: "Der PC/Notebook ist noch an und konnte nicht heruntergefahren werden. Daher wurde der Strom nicht ausgeschaltet."
            - service: input_boolean.turn_on
              data:
                entity_id: input_boolean.fabian_pc_strom
    - choose:
        - conditions:
            - condition: and
              conditions:
                - condition: numeric_state
                  entity_id: sensor.fabian_schreibtisch_power
                  below: 21
          sequence:
            - service: switch.turn_off
              data:
                entity_id: switch.fabian_schreibtisch
    - choose:
        - conditions:
            - condition: state
              entity_id: switch.fabian_schreibtisch
              state: "off"
          sequence:
            - service: input_boolean.turn_off
              data:
                entity_id: input_boolean.fabian_pc_strom

- id: turn_on_vk_strom
  alias: Turn on SK Strom
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.samuel_pc_strom
      to: "on"
    - platform: state
      entity_id: switch.schreibtisch_samuel
      to: "on"
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.schreibtisch_samuel
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.samuel_pc_strom

- id: turn_off_vk_strom
  alias: Turn off SK Strom
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.samuel_pc_strom
      to: "off"
    - platform: state
      entity_id: switch.schreibtisch_samuel
      to: "off"
  action:
    - choose:
        - conditions:
            - condition: and
              conditions:
                - condition: state
                  entity_id: device_tracker.md3f9bmc
                  state: "home"
                - condition: numeric_state
                  entity_id: sensor.steckerleiste_samuel_energy_power
                  above: 20
          sequence:
            - delay: "00:30:00"
    - choose:
        - conditions:
            - condition: and
              conditions:
                - condition: state
                  entity_id: device_tracker.md3f9bmc
                  state: "home"
                - condition: numeric_state
                  entity_id: sensor.steckerleiste_samuel_energy_power
                  above: 20
          sequence:
            - delay: "00:30:00"
    - choose:
        - conditions:
            - condition: and
              conditions:
                - condition: numeric_state
                  entity_id: sensor.steckerleiste_samuel_energy_power
                  above: 20
          sequence:
            - delay: "00:01:00"
    - choose:
        - conditions:
            - condition: and
              conditions:
                #- condition: state
                #  entity_id: device_tracker.md3f9bmc
                #  state: "home"
                - condition: state
                  entity_id: person.samuel
                  state: "not_home"
                - condition: numeric_state
                  entity_id: sensor.steckerleiste_samuel_energy_power
                  above: 20
          sequence:
            - service: notify.telegram_samuel
              data:
                message: "Der PC war noch an, obwohl du nicht mehr zu Hause bist. Der Schreibtischstrom wurde nun dennoch ausgeschaltet."
    - service: switch.turn_off
      data:
        entity_id: switch.schreibtisch_samuel
    - choose:
        - conditions:
            - condition: state
              entity_id: switch.schreibtisch_samuel
              state: "off"
          sequence:
            - service: input_boolean.turn_off
              data:
                entity_id: input_boolean.samuel_pc_strom

- id: remind_for_away_mode
  alias: "Remind for away mode"
  initial_state: true
  trigger:
    - platform: state
      entity_id: person.fabian
      from: "home"
      to: "not_home"
      for:
        minutes: 1440
    - platform: state
      entity_id: person.samuel
      from: "home"
      to: "not_home"
      for:
        minutes: 1440
    - platform: numeric_state
      entity_id: sensor.smart_life_fabian_distance
      above: 100000
      for:
        minutes: 5
    - platform: numeric_state
      entity_id: sensor.smart_life_samuel_distance
      above: 100000
      for:
        minutes: 5
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: person.fabian
        state: not_home
      - condition: state
        entity_id: person.samuel
        state: not_home
      - condition: state
        entity_id: "input_boolean.abwesend_modus"
        state: "off"
      - condition: numeric_state
        entity_id: sensor.smart_life_fabian_distance
        above: 80000
      - condition: numeric_state
        entity_id: sensor.smart_life_samuel_distance
        above: 80000
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: switch.kuhlschrank
              state: "on"
          sequence:
            - service: notify.telegram_fabian
              data:
                message: "Abwesend Modus wurde aktiviert, da keiner daheim ist. Der Kühlschrank ist allerdings noch an, bitte ausschalten, falls 7 Tage oder mehr nicht in Verwendung."
            - service: notify.telegram_samuel
              data:
                message: "Abwesend Modus wurde aktiviert, da keiner daheim ist. Der Kühlschrank ist allerdings noch an, bitte ausschalten, falls 7 Tage oder mehr nicht in Verwendung."
      default:
        - service: notify.telegram_fabian
          data:
            message: "Abwesend Modus wurde aktiviert, da keiner daheim ist."
        - service: notify.telegram_samuel
          data:
            message: "Abwesend Modus wurde aktiviert, da keiner daheim ist."
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.abwesend_modus

- id: warn_for_state_change_if_in_away_mode
  alias: Warn for state change if in away mode
  initial_state: true
  trigger:
    - platform: state
      entity_id:
        - group.wohnzimmer
        - group.fabianszimmer
        - group.samuelszimmer
      from: "off"
      to: "on"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: "input_boolean.abwesend_modus"
        state: "on"
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.warn_for_state_change_if_in_away_mode.attributes.last_triggered) | int > 3600 }}"
  action:
    - service: telegram_bot.send_message
      data:
        target: !secret telegram_chat_fabian
        message: "ACHTUNG! Es wurde ein Gerät eingeschaltet, obwohl der Abwesend Modus aktiviert ist!"
    - service: tts.speak
      continue_on_error: true
      target:
        entity_id: tts.google_de_de
      data:
        media_player_entity_id:
          - media_player.wohnzimmer_uhr
          - media_player.kuche_lautsprecher
          - media_player.samuels_lautsprecher
          - media_player.kuche_lautsprecher
          - media_player.fabians_lautsprecher
        message: Einbrecher sind nicht erwünscht. Du wirst beobachtet und wurdest gefilmt. Verlasse die Wohnung sofort. Die Polizei wird gerufen.

- id: remind_for_pouring
  alias: "Remind for pouring"
  initial_state: false
  trigger:
    platform: time
    at: "16:30:00"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: "input_boolean.abwesend_modus"
        state: "off"
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.remind_for_pouring.attributes.last_triggered) | int > 84600 }}"
      - condition: template
        value_template: "{{ as_timestamp(states.automation.telegram_pouring_done.attributes.last_triggered) | int > 18000 }}"
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: person.fabian
              state: home
          sequence:
            - service: telegram_bot.send_message
              data:
                message: Bitte die Pflanzen gießen.
                target: !secret telegram_chat_fabian
                inline_keyboard:
                  - "Erledigt:/telegrampouringdone"
    - choose:
        - conditions:
            - condition: state
              entity_id: person.samuel
              state: home
          sequence:
            - service: telegram_bot.send_message
              data:
                message: Bitte die Pflanzen gießen.
                target: !secret telegram_chat_samuel
                inline_keyboard:
                  - "Erledigt:/telegrampouringdone"

- id: remind_for_waste_collection
  alias: "Remind for waste collection"
  initial_state: true
  trigger:
    platform: time
    at: "16:00:00"
  condition:
    condition: and
    conditions:
      - condition: or
        conditions:
          - condition: state
            entity_id: sensor.bioabfall
            state: "Morgen"
          - condition: state
            entity_id: sensor.altpapier
            state: "Morgen"
          - condition: state
            entity_id: sensor.restmull
            state: "Morgen"
          - condition: state
            entity_id: sensor.gelber_sack
            state: "Morgen"
      - condition: state
        entity_id: "input_boolean.abwesend_modus"
        state: "off"
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.telegram_waste_put_outside.attributes.last_triggered) | int > 86400 }}"
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: person.fabian
              state: home
          sequence:
            - service: telegram_bot.send_message
              data_template:
                message: >
                  Morgen wird {% if states.sensor.bioabfall.state == "Morgen" %}die Biomülltonne{% endif %}{% if states.sensor.altpapier.state == "Morgen" %}das Altpapier{% endif %}{% if states.sensor.restmull.state == "Morgen" %}die schwarze Tonne{% endif %}{% if states.sensor.gelber_sack.state == "Morgen" %}die gelben Säcke{% endif %} abgeholt. Bitte rausstellen.
                target: !secret telegram_chat_fabian
                inline_keyboard:
                  - "Erledigt:/telegramwastedone"
    - choose:
        - conditions:
            - condition: state
              entity_id: person.samuel
              state: home
          sequence:
            - service: telegram_bot.send_message
              data_template:
                message: >
                  Morgen wird {% if states.sensor.bioabfall.state == "Morgen" %}die Biomülltonne{% endif %}{% if states.sensor.altpapier.state == "Morgen" %}das Altpapier{% endif %}{% if states.sensor.restmull.state == "Morgen" %}die schwarze Tonne{% endif %}{% if states.sensor.gelber_sack.state == "Morgen" %}die gelben Säcke{% endif %} abgeholt. Bitte rausstellen.
                target: !secret telegram_chat_samuel
                inline_keyboard:
                  - "Erledigt:/telegramwastedone"
    - choose:
        - conditions:
            - condition: state
              entity_id: sensor.altpapier
              state: "Morgen"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                message: >
                  Morgen wird das Altpapier abgeholt. Bitte rausstellen.
                target: !secret telegram_chat_kai
            - service: telegram_bot.send_message
              data_template:
                message: >
                  Morgen wird das Altpapier abgeholt. Bitte rausstellen.
                target: !secret telegram_chat_adrian

- id: foodsharing_basket_available
  alias: "Foodsharing Basket Available"
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.foodsharing_48_082236
    #  - platform: template
    #  value_template: {{ states.sensor.foodsharing_48_082236.attributes.baskets[-1]['id'] }}
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: sensor.foodsharing_48_082236
        above: "0"
      - condition: template
        value_template: "{{ trigger.to_state.state|int > trigger.from_state.state|int }}"
  action:
    - service: telegram_bot.send_message
      data_template:
        message: >
          {{ state_attr('sensor.foodsharing_48_082236', 'baskets')[0]['description'] }}

          ------------

          {% if not state_attr('sensor.foodsharing_48_082236', 'baskets')[0]['picture'] == 'unavailable' %}
          [Bild]({{ state_attr('sensor.foodsharing_48_082236', 'baskets')[0]['picture'] }})
          {% endif %}
          [Link](https://foodsharing.de/essenskoerbe/{{ state_attr('sensor.foodsharing_48_082236', 'baskets')[0]['id'] }})

          {% if not state_attr('sensor.foodsharing_48_082236', 'baskets')[0]['address'] == 'unavailable' %}
          Adresse: {{ state_attr('sensor.foodsharing_48_082236', 'baskets')[0]['address'] }}
          {% endif %}

          [Google Maps Link]({{ state_attr('sensor.foodsharing_48_082236', 'baskets')[0]['maps'] }})
        target: !secret telegram_foodsharing

- id: foodsharing_basket_available_zorneding
  alias: "Foodsharing Basket Available Zorneding"
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.foodsharing_48_082236
    #  - platform: template
    #  value_template: {{ states.sensor.foodsharing_48_082236.attributes.baskets[-1]['id'] }}
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: sensor.foodsharing_48_082236
        above: "0"
      - condition: template
        value_template: "{{ trigger.to_state.state|int > trigger.from_state.state|int }}"
      - condition: or
        conditions:
          - condition: template
            value_template: "{{'Zorneding' in state_attr('sensor.foodsharing_48_082236', 'baskets')[0]['address'] }}"
          - condition: template
            value_template: "{{'Zorneding' in state_attr('sensor.foodsharing_48_082236', 'baskets')[0]['description'] }}"
  action:
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: person.fabian
                  state: "home"
                - condition: state
                  entity_id: person.fabian
                  state: "Kai-Adri"
                - condition: numeric_state
                  entity_id: sensor.smart_life_fabian_distance
                  below: 1500
          sequence:
            - service: notify.mobile_app_pixel_8_pro
              data_template:
                title: "Neuer Foodsharing Korb in Zorneding"
                message: >
                  {{ state_attr('sensor.foodsharing_48_082236', 'baskets')[0]['description'] }}
                data:
                  push:
                    sound:
                      name: "default"
                      critical: 1
                      volume: 0.4
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: person.samuel
                  state: "home"
                - condition: numeric_state
                  entity_id: sensor.smart_life_samuel_distance
                  below: 1500
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_samuel
                title: "Neuer Foodsharing Korb in Zorneding"
                message: >
                  {{ state_attr('sensor.foodsharing_48_082236', 'baskets')[0]['description'] }}
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: person.kai
                  state: "home"
                - condition: state
                  entity_id: person.kai
                  state: "Kai-Adri"
                - condition: state
                  entity_id: person.kai
                  state: "JUZ"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_kai
                title: "Neuer Foodsharing Korb in Zorneding"
                message: >
                  {{ state_attr('sensor.foodsharing_48_082236', 'baskets')[0]['description'] }}
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: person.adrian
                  state: "home"
                - condition: state
                  entity_id: person.adrian
                  state: "Kai-Adri"
                - condition: state
                  entity_id: person.adrian
                  state: "JUZ"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_adrian
                title: "Neuer Foodsharing Korb in Zorneding"
                message: >
                  {{ state_attr('sensor.foodsharing_48_082236', 'baskets')[0]['description'] }}

- id: foodsharing_basket_available_muc_east
  alias: "Foodsharing Basket Available MUC East"
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.foodsharing_48_117971
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: sensor.foodsharing_48_117971
        above: "0"
      - condition: template
        value_template: "{{ trigger.to_state.state|int > trigger.from_state.state|int }}"
  action:
    - service: telegram_bot.send_message
      data_template:
        message: >
          {{ state_attr('sensor.foodsharing_48_117971', 'baskets')[0]['description'] }}

          ------------

          {% if not state_attr('sensor.foodsharing_48_117971', 'baskets')[0]['picture'] == 'unavailable' %}
          [Bild]({{ state_attr('sensor.foodsharing_48_117971', 'baskets')[0]['picture'] }})
          {% endif %}
          [Link](https://foodsharing.de/essenskoerbe/{{ state_attr('sensor.foodsharing_48_117971', 'baskets')[0]['id'] }})

          {% if not state_attr('sensor.foodsharing_48_117971', 'baskets')[0]['address'] == 'unavailable' %}
          Adresse: {{ state_attr('sensor.foodsharing_48_117971', 'baskets')[0]['address'] }}
          {% endif %}

          [Google Maps Link]({{ state_attr('sensor.foodsharing_48_117971', 'baskets')[0]['maps'] }})
        target: !secret telegram_foodsharing_muc

- id: too_good_to_go_food_available_zorneding
  alias: "Too good to go food Available Zorneding"
  initial_state: false
  trigger:
    - platform: time
      at: "12:15:00"
  condition:
    - condition: template
      value_template: "{{ (states.sensor.tgtg_fruchtehaus_vaterstetten_uberraschungstute.state | int) + (states.sensor.tgtg_neylas_feine_kost.state | int) + (states.sensor.tgtg_organic_garden_tagescafe_vaterstetten.state | int) > 0 }}"
    - condition: or
      conditions:
        - condition: state
          entity_id: person.fabian
          state: "home"
  action:
    - service: telegram_bot.send_message
      data_template:
        message: >
          Es gibt noch {{ (states.sensor.tgtg_fruchtehaus_vaterstetten_uberraschungstute.state | int) + (states.sensor.tgtg_neylas_feine_kost.state | int) + (states.sensor.tgtg_cafe_bonjour_totalenergies_station_kantgtg_organic_garden_tagescafe_vaterstettentstrasse_wurzburg_uberraschungstute_abend.state | int) }} verfügbare Reservierungen bei TGTG. Darunter:


          {% if (states.sensor.tgtg_fruchtehaus_vaterstetten_uberraschungstute.state)|int > 0 %}
          {{ state_attr('sensor.tgtg_fruchtehaus_vaterstetten_uberraschungstute', 'friendly_name') }}

          {{ state_attr('sensor.tgtg_fruchtehaus_vaterstetten_uberraschungstute', 'item_url') }}

          Preis: {{ state_attr('sensor.tgtg_fruchtehaus_vaterstetten_uberraschungstute', 'item_price') }} statt {{ state_attr('sensor.tgtg_fruchtehaus_vaterstetten_uberraschungstute', 'original_value') }}

          Abholung: {{ state_attr('sensor.tgtg_fruchtehaus_vaterstetten_uberraschungstute', 'pickup_start') }} Uhr bis {{ state_attr('sensor.tgtg_fruchtehaus_vaterstetten_uberraschungstute', 'pickup_end') }}


          {% endif %}
          {% if (states.sensor.tgtg_neylas_feine_kost.state)|int > 0 %}
          ---
          {{ state_attr('sensor.tgtg_neylas_feine_kost', 'friendly_name') }}

          {{ state_attr('sensor.tgtg_neylas_feine_kost', 'item_url') }}

          Preis: {{ state_attr('sensor.tgtg_neylas_feine_kost', 'item_price') }} statt {{ state_attr('sensor.tgtg_neylas_feine_kost', 'original_value') }}

          Abholung: {{ state_attr('sensor.tgtg_neylas_feine_kost', 'pickup_start') }} Uhr bis {{ state_attr('sensor.tgtg_neylas_feine_kost', 'pickup_end') }}


          {% endif %}
          {% if (states.sensor.tgtg_organic_garden_tagescafe_vaterstetten.state)|int > 0 %}
          ---
          {{ state_attr('sensor.tgtg_organic_garden_tagescafe_vaterstetten', 'friendly_name') }}

          {{ state_attr('sensor.tgtg_organic_garden_tagescafe_vaterstetten', 'item_url') }}

          Preis: {{ state_attr('sensor.tgtg_organic_garden_tagescafe_vaterstetten', 'item_price') }} statt {{ state_attr('sensor.tgtg_organic_garden_tagescafe_vaterstetten', 'original_value') }}

          Abholung: {{ state_attr('sensor.tgtg_organic_garden_tagescafe_vaterstetten', 'pickup_start') }} Uhr bis {{ state_attr('sensor.tgtg_organic_garden_tagescafe_vaterstetten', 'pickup_end') }}

          {% endif %}
        data:
          disable_web_page_preview: true
        target: !secret telegram_chat_fabian

- id: rewe_discount_keyword_available
  alias: "Rewe Discount Keyword available"
  initial_state: true
  trigger:
    - platform: time
      at: "06:40:00"
  condition:
    - condition: time
      weekday:
        - mon
    - condition: not
      conditions:
        - condition: state
          entity_id: sensor.rewe_440421
          state: "unavailable"
  action:
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_juz_leiter
        data:
          disable_web_page_preview: true
        message: >
          Neue eventuell für das JUZ relevante Angebote im Rewe Zorneding Prospekt:
          {%- set product_list_loop = state_attr('sensor.rewe_440421', 'discounts') -%}
          {%- for product in product_list_loop -%}
            {% if 'Spezi' in product.product or 'Hell' in product.product or 'Chips' in product.product or 'Silenca' in product.product or 'Oettinger' in product.product %}
              {{ product.price.price }} € - {{ product.product }}
              {{ product.picture_link }}
            {%- endif -%}
          {%- endfor -%}

          ---

          #Angebote

    # - service: telegram_bot.send_message
    #   data_template:
    #     target: !secret telegram_chat_fabian
    #     message: >
    #       Neue Angebote diese Woche im Rewe Zorneding Prospekt:
    #       {%- set product_list_loop =  state_attr('sensor.rewe_440421', 'discounts') -%}
    #       {%- for product in product_list_loop -%}
    #         {% if 'Almighurt' in product.product or 'Ehrmann' in product.product or 'Oettinger' in product.product %}

    #       {{product.price.price }} € - {{product.product }}

    #       {{ product.picture_link }}
    #         {%- endif -%}
    #       {%- endfor -%}

- id: turn_off_deckenlampe_keller
  alias: "Turn off Deckenlampe Keller"
  initial_state: true
  trigger:
    - platform: state
      entity_id: switch.fernseher_keller
      to: "off"
    - platform: state
      entity_id: light.flutlicht_keller
      to: "off"
  condition:
    - condition: state
      entity_id: switch.fernseher_keller
      state: "off"
    - condition: state
      entity_id: light.flutlicht_keller
      state: "off"
  action:
    - service: light.turn_off
      data:
        entity_id: light.deckenlampe_keller

- id: automatic_ha_updates
  alias: "Install All Updates on Sunday Night"
  description: Sends a Telegram message with available updates for integrations and installs them every Sunday night at 2 AM.
  trigger:
    - platform: time
      at: "02:00:00"
  condition:
    condition: and
    conditions:
      - condition: time
        weekday:
          - sun
  action:
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_fabian
        disable_notification: true
        message: >
          Updates will be installed for the following:

          {% set integration_updates = states.update | selectattr('entity_id', 'search', 'update.') | selectattr('state', 'eq', 'on') | list %}
          {% set addon_updates = state_attr('sensor.supervisor_updates', 'addons') %}

          {% if integration_updates | length > 0 %}
          **Integrations**:
          {%- for entity in integration_updates -%}
          - {{ state_attr(entity.entity_id, 'friendly_name') }} ({{ entity.entity_id }})
          {%- endfor %}
          {% else %}
          No integration updates available.
          {% endif %}

          {% if addon_updates is not none and addon_updates | length > 0 %}
          **Add-ons**:
          {%- for addon in addon_updates -%}
          - {{ addon.name }} (Latest: {{ addon.version_latest }})
          {%- endfor %}
          {% else %}
          No add-on updates available.
          {% endif %}
    - delay: "00:05:00"
    - service: homeassistant.update_entity
      target:
        entity_id: all
    - service: hassio.addon_update
      data:
        addon: all
  mode: single

- id: incoming_call_fabian
  alias: "Incoming Call Fabian"
  initial_state: true
  trigger:
    - platform: state
      entity_id: automation.incoming_call_fabian
      to: "test"
  condition:
    - condition: state
      entity_id: "input_boolean.leiser_modus"
      state: "off"
  action:
    - service: media_player.volume_set
      data:
        volume_level: >
          {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
        entity_id: media_player.wohnzimmer_uhr
    - service: tts.speak
      continue_on_error: true
      target:
        entity_id: tts.google_de_de
      data_template:
        media_player_entity_id:
          #- media_player.wohnzimmer_uhr
          - media_player.fabians_lautsprecher
        message: "Fabian wird soeben von {{ states('sensor.fs_caller') }} angerufen!"
    - service: media_player.media_pause
      data:
        entity_id: media_player.wohnzimmer_tv
    - delay: "00:00:09"
    - service: media_player.volume_set
      data:
        volume_level: >
          {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
        entity_id: media_player.wohnzimmer_uhr
    - service: media_player.turn_off
      data:
        entity_id: media_player.wohnzimmer_uhr
    - service: media_player.turn_off
      data:
        entity_id: media_player.fabians_lautsprecher
    - service: automation.turn_off
      data:
        entity_id: automation.incoming_call_fabian

- id: dwd_weather_warnings
  alias: "DWD Weather Warnings"
  initial_state: true
  trigger:
    - platform: numeric_state
      entity_id: sensor.gemeinde_zorneding_current_warning_level
      above: 1
  condition:
    condition: and
    conditions:
      #  Maximal zwei mal am Tag schreiben
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.dwd_weather_warnings.attributes.last_triggered) | int > 43200 }}"
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: sensor.gemeinde_zorneding_current_warning_level
              state: "2"
            - condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.smart_life_fabian_distance
                  below: 20000
                - condition: state
                  entity_id: person.fabian
                  state: "home"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_fabian
                disable_notification: true
                message: >
                  Aktuell Wetterwarnung vor markantem Wetter in {{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.region_name }}.

                  *{{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_headline }}*

                  {{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_description }}


                  Voraussichtlich ab {{  states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_end }} Uhr.

                  *{% if 'böe' in states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_description %}Bitte alles vom Balkon rein holen!{% endif %}*
    - choose:
        - conditions:
            - condition: state
              entity_id: sensor.gemeinde_zorneding_current_warning_level
              state: "2"
            - condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.smart_life_samuel_distance
                  below: 20000
                - condition: state
                  entity_id: person.samuel
                  state: "home"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_samuel
                disable_notification: true
                message: >
                  Aktuell Wetterwarnung vor markantem Wetter in {{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.region_name }}.

                  *{{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_headline }}*

                  {{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_description }}


                  Voraussichtlich ab {{  states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_end }} Uhr.

                  *{% if 'böe' in states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_description %}Bitte alles vom Balkon rein holen!{% endif %}*
    - choose:
        - conditions:
            - condition: state
              entity_id: sensor.gemeinde_zorneding_current_warning_level
              state: "2"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_5friends
                disable_notification: true
                message: >
                  Aktuell Wetterwarnung vor markantem Wetter in {{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.region_name }}.

                  *{{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_headline }}*

                  {{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_description }}


                  Voraussichtlich ab {{  states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_end }} Uhr.


                  *{% if 'böe' in states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_description %}Es wird empfohlen alles von der Terrasse/Balkon rein zu holen!{% endif %}*
    - choose:
        - conditions:
            - condition: state
              entity_id: sensor.gemeinde_zorneding_current_warning_level
              state: "3"
            - condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.smart_life_fabian_distance
                  below: 20000
                - condition: state
                  entity_id: person.fabian
                  state: "home"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_fabian
                message: >
                  Aktuell Wetterwarnung vor Unwetter in {{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.region_name }}.

                  *{{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_headline }}*

                  {{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_description }}


                  Voraussichtlich ab {{  states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_end }} Uhr.

                  *{% if 'böe' in states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_description %}Bitte alles vom Balkon rein holen!{% endif %}*
    - choose:
        - conditions:
            - condition: state
              entity_id: sensor.gemeinde_zorneding_current_warning_level
              state: "3"
            - condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.smart_life_samuel_distance
                  below: 30000
                - condition: state
                  entity_id: person.samuel
                  state: "home"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_samuel
                message: >
                  Aktuell Wetterwarnung vor Unwetter in {{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.region_name }}.

                  *{{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_headline }}*

                  {{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_description }}


                  Voraussichtlich ab {{  states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_end }} Uhr.

                  *{% if 'böe' in states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_description %}Bitte alles vom Balkon rein holen!{% endif %}*
    - choose:
        - conditions:
            - condition: state
              entity_id: sensor.gemeinde_zorneding_current_warning_level
              state: "3"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_5friends
                message: >
                  Aktuell Wetterwarnung vor Unwetter in {{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.region_name }}.

                  *{{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_headline }}*

                  {{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_description }}


                  Voraussichtlich ab {{  states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_end }} Uhr.


                  *{% if 'böe' in states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_description %}Es wird empfohlen alles von der Terrasse/Balkon rein zu holen!{% endif %}*
    - choose:
        - conditions:
            - condition: state
              entity_id: sensor.gemeinde_zorneding_current_warning_level
              state: "4"
            - condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.smart_life_fabian_distance
                  below: 40000
                - condition: state
                  entity_id: person.fabian
                  state: "home"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_fabian
                message: >
                  *ACHTUNG!!!!* Aktuell Wetterwarnung vor extremen Unwetter in {{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.region_name }}.

                  *{{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_headline }}*

                  {{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_description }}


                  Voraussichtlich ab {{  states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_end }} Uhr.

                  *{% if 'böe' in states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_description %}Bitte alles vom Balkon rein holen!{% endif %}*
    - choose:
        - conditions:
            - condition: state
              entity_id: sensor.gemeinde_zorneding_current_warning_level
              state: "4"
            - condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.smart_life_samuel_distance
                  below: 40000
                - condition: state
                  entity_id: person.samuel
                  state: "home"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_samuel
                message: >
                  *ACHTUNG!!!!* Aktuell Wetterwarnung vor extremen Unwetter in {{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.region_name }}.

                  *{{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_headline }}*

                  {{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_description }}


                  Voraussichtlich ab {{  states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_end }} Uhr.

                  *{% if 'böe' in states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_description %}Bitte alles vom Balkon rein holen!{% endif %}*
    - choose:
        - conditions:
            - condition: state
              entity_id: sensor.gemeinde_zorneding_current_warning_level
              state: "4"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_5friends
                message: >
                  *ACHTUNG!!!!* Aktuell Wetterwarnung vor extremen Unwetter in {{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.region_name }}.

                  *{{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_headline }}*

                  {{ states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_description }}


                  Voraussichtlich ab {{  states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_end }} Uhr.


                  *{% if 'böe' in states.sensor.gemeinde_zorneding_current_warning_level.attributes.warning_1_description %}Es wird empfohlen alles von der Terrasse/Balkon rein zu holen!{% endif %}*

- id: server_temp_warning
  alias: "Server Temp Warning"
  initial_state: false
  trigger:
    - platform: numeric_state
      entity_id: sensor.processor_temperature
      above: 60
    - platform: numeric_state
      entity_id: sensor.processor_temperature
      above: 76
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.server_temp_warning.attributes.last_triggered) | int > 3600 }}"
  action:
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_fabian
        message: "ACHTUNG! Server Temperatur sehr hoch: {{ states.sensor.processor_temperature.state }}"

- id: server_ram_load_warning
  alias: "Server RAM Load Warning"
  initial_state: true
  trigger:
    - platform: numeric_state
      entity_id: sensor.memory_use_percent
      above: 85
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.server_ram_load_warning.attributes.last_triggered) | int > 3600 }}"
  action:
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_fabian
        message: "ACHTUNG! Server RAM Auslastung sehr hoch: {{ states.sensor.memory_use_percent.state }}"

- id: turn_on_schloss_on_button_press
  alias: Turn on Schloss on button press
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_button.schloss
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.schloss
    - delay: "00:00:03"
    - service: switch.turn_on
      data:
        entity_id: switch.schloss

- id: turn_schloss_off_after_turning_on
  alias: Turn Schloss off after turning on
  initial_state: true
  trigger:
    - platform: state
      entity_id: switch.schloss
      to: "on"
  action:
    - delay: "00:00:02"
    - service: switch.turn_off
      data:
        entity_id: switch.schloss

- id: turn_on_keller_deckenlampe_on_steckerleiste
  alias: Turn on Keller Deckenlampe on Steckerleiste
  initial_state: false
  trigger:
    - platform: state
      entity_id: switch.frei_keller
      from: "off"
      to: "on"
  action:
    - service: light.turn_on
      data:
        entity_id: light.deckenlampe_keller

- id: turn_off_keller_deckenlampe_on_steckerleiste
  alias: Turn off Keller Deckenlampe on Steckerleiste
  initial_state: true
  trigger:
    - platform: state
      entity_id: switch.frei_keller
      to: "off"
  action:
    - service: light.turn_off
      data:
        entity_id: light.deckenlampe_keller

- id: fabi_phone_battery_low
  alias: Fabi Phone Battery low
  initial_state: false
  trigger:
    - platform: numeric_state
      entity_id: sensor.pixel_8_pro_battery_level
      below: 5
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.fabi_phone_battery_low.attributes.last_triggered) | int > 3600 }}"
  action:
    - service: telegram_bot.send_message
      data_template:
        title: "Fabi Akku unter 5%"
        target: !secret telegram_chat_samuel
        message: ""

- id: mute_cast_spotify_ads
  alias: Mute Cast Spotify ads
  initial_state: false
  mode: single
  trigger:
    - platform: state
      entity_id:
        - media_player.wohnzimmer_uhr
        - media_player.kuche_lautsprecher
        - media_player.fabians_lautsprecher
        - media_player.samuels_lautsprecher
        - media_player.wohnzimmer_tv_cast
        - media_player.mini_gruppe
        - media_player.keller_tv_cast
      attribute: media_title
  action:
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.wohnzimmer_uhr
                  attribute: is_volume_muted
                  state: "false"
            - condition: or
              conditions:
                - condition: state
                  entity_id: media_player.wohnzimmer_uhr
                  attribute: media_title
                  state: "Spotify"
                - condition: state
                  entity_id: media_player.wohnzimmer_uhr
                  attribute: media_title
                  state: "Advertisement"
          sequence:
            - service: media_player.volume_mute
              data:
                entity_id: media_player.wohnzimmer_uhr
                is_volume_muted: true
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.wohnzimmer_uhr
                  attribute: media_title
                  state: "Advertisement"
                - condition: state
                  entity_id: media_player.wohnzimmer_uhr
                  attribute: media_title
                  state: "Spotify"
                - condition: state
                  entity_id: media_player.wohnzimmer_uhr
                  attribute: is_volume_muted
                  state: "true"
          sequence:
            - service: media_player.volume_mute
              data:
                entity_id: media_player.wohnzimmer_uhr
                is_volume_muted: false
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.kuche_lautsprecher
                  attribute: is_volume_muted
                  state: "false"
            - condition: or
              conditions:
                - condition: state
                  entity_id: media_player.kuche_lautsprecher
                  attribute: media_title
                  state: "Spotify"
                - condition: state
                  entity_id: media_player.kuche_lautsprecher
                  attribute: media_title
                  state: "Advertisement"
          sequence:
            - service: media_player.volume_mute
              data:
                entity_id: media_player.kuche_lautsprecher
                is_volume_muted: true
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.kuche_lautsprecher
                  attribute: media_title
                  state: "Advertisement"
                - condition: state
                  entity_id: media_player.kuche_lautsprecher
                  attribute: media_title
                  state: "Spotify"
                - condition: state
                  entity_id: media_player.kuche_lautsprecher
                  attribute: is_volume_muted
                  state: "true"
          sequence:
            - service: media_player.volume_mute
              data:
                entity_id: media_player.kuche_lautsprecher
                is_volume_muted: false
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.fabians_lautsprecher
                  attribute: is_volume_muted
                  state: "false"
            - condition: or
              conditions:
                - condition: state
                  entity_id: media_player.fabians_lautsprecher
                  attribute: media_title
                  state: "Spotify"
                - condition: state
                  entity_id: media_player.fabians_lautsprecher
                  attribute: media_title
                  state: "Advertisement"
          sequence:
            - service: media_player.volume_mute
              data:
                entity_id: media_player.fabians_lautsprecher
                is_volume_muted: true
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.fabians_lautsprecher
                  attribute: media_title
                  state: "Advertisement"
                - condition: state
                  entity_id: media_player.fabians_lautsprecher
                  attribute: media_title
                  state: "Spotify"
                - condition: state
                  entity_id: media_player.fabians_lautsprecher
                  attribute: is_volume_muted
                  state: "true"
          sequence:
            - service: media_player.volume_mute
              data:
                entity_id: media_player.fabians_lautsprecher
                is_volume_muted: false
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.samuels_lautsprecher
                  attribute: is_volume_muted
                  state: "false"
            - condition: or
              conditions:
                - condition: state
                  entity_id: media_player.samuels_lautsprecher
                  attribute: media_title
                  state: "Spotify"
                - condition: state
                  entity_id: media_player.samuels_lautsprecher
                  attribute: media_title
                  state: "Advertisement"
          sequence:
            - service: media_player.volume_mute
              data:
                entity_id: media_player.samuels_lautsprecher
                is_volume_muted: true
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.samuels_lautsprecher
                  attribute: media_title
                  state: "Advertisement"
                - condition: state
                  entity_id: media_player.samuels_lautsprecher
                  attribute: media_title
                  state: "Spotify"
                - condition: state
                  entity_id: media_player.samuels_lautsprecher
                  attribute: is_volume_muted
                  state: "true"
          sequence:
            - service: media_player.volume_mute
              data:
                entity_id: media_player.samuels_lautsprecher
                is_volume_muted: false
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.wohnzimmer_tv_cast
                  attribute: is_volume_muted
                  state: "false"
            - condition: or
              conditions:
                - condition: state
                  entity_id: media_player.wohnzimmer_tv_cast
                  attribute: media_title
                  state: "Spotify"
                - condition: state
                  entity_id: media_player.wohnzimmer_tv_cast
                  attribute: media_title
                  state: "Advertisement"
          sequence:
            - service: media_player.volume_mute
              data:
                entity_id: media_player.wohnzimmer_tv_cast
                is_volume_muted: true
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.wohnzimmer_tv_cast
                  attribute: media_title
                  state: "Advertisement"
                - condition: state
                  entity_id: media_player.wohnzimmer_tv_cast
                  attribute: media_title
                  state: "Spotify"
                - condition: state
                  entity_id: media_player.wohnzimmer_tv_cast
                  attribute: is_volume_muted
                  state: "true"
          sequence:
            - service: media_player.volume_mute
              data:
                entity_id: media_player.wohnzimmer_tv_cast
                is_volume_muted: false
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.mini_gruppe
                  attribute: is_volume_muted
                  state: "false"
            - condition: or
              conditions:
                - condition: state
                  entity_id: media_player.mini_gruppe
                  attribute: media_title
                  state: "Spotify"
                - condition: state
                  entity_id: media_player.mini_gruppe
                  attribute: media_title
                  state: "Advertisement"
          sequence:
            - service: media_player.volume_mute
              data:
                entity_id: media_player.mini_gruppe
                is_volume_muted: true
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.mini_gruppe
                  attribute: media_title
                  state: "Advertisement"
                - condition: state
                  entity_id: media_player.mini_gruppe
                  attribute: media_title
                  state: "Spotify"
                - condition: state
                  entity_id: media_player.mini_gruppe
                  attribute: is_volume_muted
                  state: "true"
          sequence:
            - service: media_player.volume_mute
              data:
                entity_id: media_player.mini_gruppe
                is_volume_muted: false
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.keller_tv_cast
                  attribute: is_volume_muted
                  state: "false"
            - condition: or
              conditions:
                - condition: state
                  entity_id: media_player.keller_tv_cast
                  attribute: media_title
                  state: "Spotify"
                - condition: state
                  entity_id: media_player.keller_tv_cast
                  attribute: media_title
                  state: "Advertisement"
          sequence:
            - service: media_player.volume_mute
              data:
                entity_id: media_player.keller_tv_cast
                is_volume_muted: true
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.keller_tv_cast
                  attribute: media_title
                  state: "Advertisement"
                - condition: state
                  entity_id: media_player.keller_tv_cast
                  attribute: media_title
                  state: "Spotify"
                - condition: state
                  entity_id: media_player.keller_tv_cast
                  attribute: is_volume_muted
                  state: "true"
          sequence:
            - service: media_player.volume_mute
              data:
                entity_id: media_player.keller_tv_cast
                is_volume_muted: false

- id: turn_off_devices_after_power_loss
  alias: Turn off devices after power loss
  initial_state: true
  trigger:
    - platform: state
      entity_id:
        - light.bett_gluhbirne
      from: "unavailable"
      to: "on"
  action:
    - service: light.turn_on
      data:
        entity_id:
          - light.bett_gluhbirne

- id: low_battery_thermostats
  alias: Low battery thermostats
  initial_state: true
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.bad_battery_state
        - binary_sensor.fabian_s_zimmer_battery_state
      from: "off"
      to: "on"
      for:
        hours: 4
    - platform: state
      entity_id:
        - climate.wohnzimmer
        - climate.samuel_s_zimmer
      to: "unavailable"
      for:
        hours: 2
  condition:
    condition: not
    conditions:
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.low_battery_thermostats.attributes.last_triggered) | int > 43200 }}"
      - condition: state
        entity_id: climate.bad
        state: "unavailable"
      - condition: state
        entity_id: climate.fabian_s_zimmer
        state: "unavailable"
  action:
    - service: notify.telegram_fabian
      data_template:
        message: >
          Die Batterie im Thermostat
          {% if is_state('climate.wohnzimmer', 'unavailable') %}
          Wohnzimmer
          {% endif %}
          {% if is_state('climate.samuel_s_zimmer', 'unavailable') %}
          Samuels Zimmer
          {% endif %}
          {% if is_state('binary_sensor.fabian_s_zimmer_battery_state', 'on') %}
          fabian_s_zimmer
          {% endif %}
          {% if is_state('binary_sensor.bad_battery_state', 'on') %}
          Bad
          {% endif %}
          ist
          {% if is_state('binary_sensor.fabian_s_zimmer_battery_state', 'on') or is_state('binary_sensor.bad_battery_state', 'on') %}
          bald
          {% else %}
          KOMPLETT
          {% endif %}
          leer. Bitte auswechseln! Luftfeuchtigkeitsautomationen & Temperatureinstellungen funktionieren so lange nur eingeschränkt.
    - service: notify.telegram_samuel
      data_template:
        message: >
          Die Batterie im Thermostat
          {% if is_state('climate.wohnzimmer', 'unavailable') %}
          Wohnzimmer
          {% endif %}
          {% if is_state('climate.samuel_s_zimmer', 'unavailable') %}
          Samuels Zimmer
          {% endif %}
          {% if is_state('binary_sensor.fabian_s_zimmer_battery_state', 'on') %}
          fabian_s_zimmer
          {% endif %}
          {% if is_state('binary_sensor.bad_battery_state', 'on') %}
          Bad
          {% endif %}
          ist
          {% if is_state('binary_sensor.fabian_s_zimmer_battery_state', 'on') or is_state('binary_sensor.bad_battery_state', 'on') %}
          bald
          {% else %}
          KOMPLETT
          {% endif %}
          leer. Bitte auswechseln! Luftfeuchtigkeitsautomationen & Temperatureinstellungen funktionieren so lange nur eingeschränkt.

- id: cast_ha_to_tv_if_idle
  alias: Cast HA to TV if idleing
  trigger:
    - platform: state
      entity_id: media_player.wohnzimmer_tv
      to:
        - "idle"
        - "standby"
      for:
        minutes: 3
  action:
    service: cast.show_lovelace_view
    data:
      entity_id: media_player.wohnzimmer_tv_cast
      view_path: cast

- id: fritzbox_public_ip_change
  alias: Fritzbox Public IP Change
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.fritz_box_3490_external_ip
      not_from:
        - "unavailable"
        - "unknown"
        - ""
        - "Unknown"
  condition:
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.fritzbox_no_internet_access.attributes.last_triggered) | int > 360 }}"
    - condition: not
      conditions:
        - condition: state
          entity_id: sensor.fritz_box_3490_external_ip
          state: "unavailable"
        - condition: state
          entity_id: sensor.fritz_box_3490_external_ip
          state: ""
        - condition: state
          entity_id: sensor.fritz_box_3490_external_ip
          state: "unknown"
  action:
    - service: notify.telegram_fabian
      data:
        message: "Öffentliche IP hat sich geändert zu {{ states.sensor.fritz_box_3490_external_ip.state }}"

#   - id: turn_on_fritzbox_wifi_if_miwifi_is_off
#     alias: Turn on Fritzbox Wifi if Miwifi is off
#     initial_state: true
#     trigger:
#       - platform: state
#         entity_id: sbinary_sensor.xiaomi_abd8_wan_state
#         state: "not_connected"
#       - platform: template
#         value_template: "{{ if not is_state('sbinary_sensor.xiaomi_abd8_wan_state', 'connected'}}"
#     condition:
#       - condition: template
#         value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.turn_on_fritzbox_wifi_if_miwifi_is_off.attributes.last_triggered) | int > 360 }}"
#       - condition: not
#         conditions:
#           - condition: state
#             entity_id: 'binary_sensor.fritz_box_3490_connection'
#             state: 'not_connected'
#     action:
#       - service: notify.telegram_fabian
#         data:
#           message: 'Miwifi hat kein Internet'

- id: fritzbox_no_internet_access
  alias: Fritzbox no Internet access
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.fritz_box_3490_connection
      from: "Connected"
      to: "Not_Connected"
      for:
        seconds: 15
  condition:
    condition: and
    conditions:
      - condition: time
        after: "10:30:00"
        before: "22:30:00"
      - condition: state
        entity_id: "input_boolean.leiser_modus"
        state: "off"
      - condition: or
        conditions:
          - condition: state
            entity_id: person.samuel
            state: home
          - condition: state
            entity_id: person.fabian
            state: home
          - condition: template
            value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.fritzbox_no_internet_access.attributes.last_triggered) | int > 1200 }}"
  action:
    #  - service: rest_command.assistant_broadcast
    #    data:
    #      command: Die Fritzbox hat keine Internet Verbindung und wird nun neugestartet.
    #      user: "homeassistant"
    - service: tts.speak
      continue_on_error: true
      target:
        entity_id: tts.google_de_de
      data_template:
        media_player_entity_id:
          - media_player.fabians_lautsprecher
          - media_player.wohnzimmer_uhr
          - media_player.kuche_lautsprecher
          - media_player.samuels_lautsprecher
        message: "Die Fritzbox hat keine Internet Verbindung und wird nun neugestartet."
    - service: fritz.reboot
      data:
        host: 192.168.178.1
    - service: automation.turn_on
      data:
        entity_id: automation.fritzbox_internet_access_returned
    - service: automation.turn_off
      data:
        entity_id: automation.fritzbox_no_internet_access

- id: fritzbox_internet_access_returned
  alias: Fritzbox Internet access returned
  initial_state: false
  trigger:
    - platform: state
      entity_id: binary_sensor.fritz_box_3490_connection
      from: "Not_Connected"
      to: "Connected"
  condition:
    condition: and
    conditions:
      - condition: time
        after: "10:30:00"
        before: "22:30:00"
      - condition: state
        entity_id: "input_boolean.leiser_modus"
        state: "off"
  action:
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: person.samuel
                  state: home
                - condition: state
                  entity_id: person.fabian
                  state: home
          sequence:
            #  - service: rest_command.assistant_broadcast
            #    data:
            #      command: Die Internetverbindung ist wiederhergestellt.
            #      user: "homeassistant"
            - service: tts.speak
              continue_on_error: true
              target:
                entity_id: tts.google_de_de
              data_template:
                media_player_entity_id:
                  - media_player.fabians_lautsprecher
                  - media_player.wohnzimmer_uhr
                  - media_player.kuche_lautsprecher
                  - media_player.samuels_lautsprecher
                message: "Die Internetverbindung ist wiederhergestellt."
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: person.samuel
                  state: home
                - condition: state
                  entity_id: person.fabian
                  state: home
          sequence:
            - service: telegram_bot.send_message
              data:
                target: !secret telegram_chat_fabian
                message: "Die Fritzbox Internet Verbundung wurde verloren und wurde soeben wiederhergestellt."
    - service: automation.turn_on
      data:
        entity_id: automation.fritzbox_no_internet_access
    - service: automation.turn_off
      data:
        entity_id: automation.fritzbox_internet_access_returned

#  - id: internet_speed_test_poor_fabian
#    alias: Internet Speed Test Poor Fabian
#
#    initial_state: true
#    trigger:
#      - platform: template
#        value_template: "{{ states('sensor.speedtest_download')|float < 40 }}"
#    condition:
#      - condition: template
#        value_template: "{{ states.device_tracker.google_maps_112174659110860535869.state == 'home' }}"
#    action:
#      - service: notify.telegram_fabian
#        data:
#          message: 'Die Internetgeschwindigkeit ist aktuell langsam ( {{ states.sensor.speedtest_download }} Mbit/s ). Eventuell die Fritzbox neustarten?'

#  - id: internet_speed_test_poor_fabian
#    alias: Internet Speed Test Poor samuel
#
#    initial_state: true
#    trigger:
#      - platform: template
#        value_template: "{{ states('sensor.speedtest_download')|float < 30 }}"
#    condition:
#      - condition: template
#        value_template: "{{ states.device_tracker.google_maps_112056758146194246561.state == 'home' }}"
#      - condition: state
#        entity_id: device_tracker.md3f9bmc
#        state: home
#    action:
#      - service: notify.telegram_samuel
#        data:
#          message: 'Die Internetgeschwindigkeit ist aktuell langsam. Eventuell die Fritzbox neustarten?'

#  - id: update_tasmota
#    alias: Update Tasmota
#    initial_state: true
#    trigger:
#      - platform: numeric_state
#        entity_id: sensor.latest_tasmota
#        above: 0
#    action:
#      - service: notify.telegram_fabian
#        data:
#          message: 'Alle Tasmota Geräte werden aktualisiert auf Version {{ states.sensor.latest_tasmota.state }}.'
#      - service: mqtt.publish
#        data:
#          topic: cmnd/tasmotas/Upgrade
#          payload: 1

- id: deckenlampe_button_hold
  alias: Deckenlampe Button Hold
  initial_state: true
  trigger:
    - platform: device
      domain: tasmota
      device_id: d75263b1d81c803aac073abd2257aa2d
      type: button_long_press
      subtype: button_1
      discovery_id: 68C63A87B4BF_button_1_HOLD
    - platform: event
      event_type: ios.action_fired
      event_data:
        actionName: "Light Livingroom"
  action:
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: light.leds_wohnzimmer
                  state: "off"
                - condition: state
                  entity_id: light.leds_wohnzimmer
                  state: "unavailable"
            - condition: or
              conditions:
                - condition: state
                  entity_id: light.stehlampe
                  state: "off"
                - condition: state
                  entity_id: light.stehlampe
                  state: "unavailable"
            - condition: or
              conditions:
                - condition: state
                  entity_id: light.leds_wohnzimmer_tv
                  state: "off"
                - condition: state
                  entity_id: light.leds_wohnzimmer_tv
                  state: "unavailable"
          sequence:
            #  - service: light.turn_off
            #    data:
            #      area_id: 7c05afe47efd44f5a0a064769ad6e105 # Wohnzimmer
            #      transition: 2
            #      brightness: 255
            - service: light.turn_on
              data:
                entity_id: light.stehlampe
                transition: 2
                brightness: 255
                color_temp: 225
            - service: light.turn_on
              data:
                entity_id: light.leds_wohnzimmer
                transition: 2
                brightness: 255
                rgb_color: [255, 255, 255]
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: light.leds_wohnzimmer
                  state: "on"
                  for:
                    seconds: 2
                - condition: state
                  entity_id: light.stehlampe
                  state: "on"
                  for:
                    seconds: 2
                - condition: state
                  entity_id: light.leds_wohnzimmer_tv
                  state: "on"
                  for:
                    seconds: 2
          sequence:
            - service: light.turn_off
              data:
                area_id: 7c05afe47efd44f5a0a064769ad6e105 # Wohnzimmer

- id: deckenlampe_button_double_press
  alias: Deckenlampe Button double press
  initial_state: true
  trigger:
    - platform: device
      domain: tasmota
      device_id: d75263b1d81c803aac073abd2257aa2d
      type: button_double_press
      subtype: button_1
      discovery_id: 68C63A87B4BF_button_1_DOUBLE
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: switch.fernseher
              state: "on"
          sequence:
            - service: switch.turn_off
              data:
                entity_id: switch.fernseher
    - choose:
        - conditions:
            - condition: state
              entity_id: switch.fernseher
              state: "off"
          sequence:
            - service: switch.turn_on
              data:
                entity_id: switch.fernseher

- id: keller_power_strip_double_press
  alias: Keller power strip double press
  initial_state: true
  trigger:
    - platform: device
      domain: tasmota
      device_id: ebf8e0a468385963dc6561b555ce4e4f
      type: button_double_press
      subtype: button_1
      discovery_id: 24A16007D751_button_1_DOUBLE
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: light.deckenlampe_keller
              state: "on"
          sequence:
            - service: light.turn_off
              data:
                entity_id: light.deckenlampe_keller
    - choose:
        - conditions:
            - condition: state
              entity_id: light.deckenlampe_keller
              state: "off"
          sequence:
            - service: light.turn_on
              data:
                entity_id: light.deckenlampe_keller

- id: lichtschalter_button_hold
  alias: Lichtschalter Button Hold
  initial_state: true
  trigger:
    - platform: device
      domain: tasmota
      device_id: 564e0bea23153d99c590e8fe2ef83464
      type: button_long_press
      subtype: button_1
      discovery_id: 68C63AA72808_button_1_HOLD
    - platform: event
      event_type: ios.action_fired
      event_data:
        actionName: "Light Sleepingroom"
  action:
    - choose:
        - conditions:
            - condition: and
              conditions:
                - condition: or
                  conditions:
                    - condition: state
                      entity_id: light.bett_gluhbirne
                      state: "off"
                    - condition: state
                      entity_id: light.bett_gluhbirne
                      state: "unavailable"
                - condition: or
                  conditions:
                    - condition: state
                      entity_id: light.mibedsidelamp2_22e2
                      state: "off"
                    - condition: state
                      entity_id: light.mibedsidelamp2_22e2
                      state: "unavailable"
                - condition: or
                  conditions:
                    - condition: state
                      entity_id: light.leds_tisch
                      state: "off"
                    - condition: state
                      entity_id: light.leds_tisch
                      state: "unavailable"
                - condition: or
                  conditions:
                    - condition: state
                      entity_id: light.regal
                      state: "off"
                    - condition: state
                      entity_id: light.regal
                      state: "unavailable"
          sequence:
            - service: light.turn_on
              data:
                entity_id: light.leds_tisch
                brightness: 255
                transition: 2
            - service: light.turn_on
              data:
                entity_id:
                  - light.bett_gluhbirne
                  - light.mibedsidelamp2_22e2
                brightness: 255
                color_temp: 225
                transition: 2
            - service: light.turn_on
              entity_id: light.regal
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: light.leds_tisch
                  state: "on"
                  for:
                    seconds: 2
                - condition: state
                  entity_id: light.bett_gluhbirne
                  state: "on"
                  for:
                    seconds: 2
                - condition: state
                  entity_id: light.regal
                  state: "on"
                  for:
                    seconds: 2
                - condition: state
                  entity_id: light.mibedsidelamp2_22e2
                  state: "on"
                  for:
                    seconds: 2
          sequence:
            - service: light.turn_off
              data:
                area_id:
                  - 33e9a108bf1948e5848f156e0851d50c # Fabians Zimmer

- id: lichtschalter_button_double_press
  alias: Lichtschalter Button double press
  initial_state: true
  trigger:
    - platform: device
      domain: tasmota
      device_id: 564e0bea23153d99c590e8fe2ef83464
      type: button_double_press
      subtype: button_1
      discovery_id: 68C63AA72808_button_1_DOUBLE
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: switch.fabian_schreibtisch
              state: "on"
          sequence:
            - service: switch.turn_off
              data:
                entity_id: switch.fabian_schreibtisch
    - choose:
        - conditions:
            - condition: state
              entity_id: switch.fabian_schreibtisch
              state: "off"
          sequence:
            - service: switch.turn_on
              data:
                entity_id: switch.fabian_schreibtisch

- id: restart_bluetooth_on_tv
  alias: Restart Bluetooth on TV
  initial_state: false
  trigger:
    - platform: state
      entity_id: automation.restart_bluetooth_on_tv
      to: "on"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: device_tracker.wohnzimmer_tv
        state: "home"
  action:
    - service: androidtv.adb_command
      data:
        entity_id: media_player.wohnzimmer_tv
        command: "settings put global bluetooth_disabled_profiles 0"
    - delay: "00:00:01"
    - service: androidtv.adb_command
      data:
        entity_id: media_player.wohnzimmer_tv
        command: "settings put global bluetooth_disabled_profiles 1"
    - service: automation.turn_off
      data:
        entity_id: automation.restart_bluetooth_on_tv

- id: notify_for_high_humidity
  alias: Notify for high humidity
  trigger:
    - platform: numeric_state
      entity_id:
        - climate.samuel_s_zimmer
        - climate.wohnzimmer
        - climate.fabian_s_zimmer
        - climate.bad
      attribute: current_humidity
      above: 60
    - platform: state
      entity_id: person.fabian
      from: "not_home"
      to: "home"
      for:
        minutes: 3
    - platform: state
      entity_id: person.samuel
      from: "not_home"
      to: "home"
      for:
        minutes: 3
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.leiser_modus
        state: "off"
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_for_high_humidity.attributes.last_triggered) | int > 7200 }}"
      - condition: not
        conditions:
          - condition: state
            entity_id: automation.notify_for_high_humidity
            attribute: last_triggered
            state: none
      - condition: or
        conditions:
          - condition: state
            entity_id: person.samuel
            state: home
          - condition: state
            entity_id: person.fabian
            state: home
      - condition: or
        conditions:
          - condition: numeric_state
            entity_id: climate.samuel_s_zimmer
            attribute: current_humidity
            above: 60
          - condition: numeric_state
            entity_id: climate.wohnzimmer
            attribute: current_humidity
            above: 60
          - condition: numeric_state
            entity_id: climate.fabian_s_zimmer
            attribute: current_humidity
            above: 60
          - condition: numeric_state
            entity_id: climate.bad
            attribute: current_humidity
            above: 60
      - condition: or
        conditions:
          - condition: and
            conditions:
              - condition: state
                entity_id: binary_sensor.workday_sensor
                state: "on"
              - condition: time
                before: "21:30:00"
              - condition: time
                after: "08:00:00"
          - condition: and
            conditions:
              - condition: state
                entity_id: binary_sensor.workday_sensor
                state: "off"
              - condition: time
                before: "22:00:00"
              - condition: time
                after: "11:00:00"
  action:
    - parallel:
        - choose:
            - conditions:
                - condition: state
                  entity_id: media_player.kuche_lautsprecher
                  state: "off"
              sequence:
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                    entity_id: media_player.kuche_lautsprecher
                - delay: 00:00:05
                - service: tts.speak
                  continue_on_error: true
                  target:
                    entity_id: tts.google_de_de
                  data_template:
                    media_player_entity_id: media_player.kuche_lautsprecher
                    message: >
                      {% if (as_timestamp(now()) - as_timestamp(states.person.fabian.last_changed) | int < 240) and (as_timestamp(now()) - as_timestamp(states.person.samuel.last_changed) | int < 240) %}
                      Willkommen zurück Fabi und Samuel
                      {% elif (as_timestamp(now()) - as_timestamp(states.person.fabian.last_changed) | int < 240) %}
                      Willkommen zurück Fabi.
                      {% elif (as_timestamp(now()) - as_timestamp(states.person.samuel.last_changed) | int < 240) %}
                      Willkommen zurück Samuel.
                      {% endif %}
                      Die Luftfeuchtigkeit ist zu hoch im Raum
                      {% if (states.climate.samuel_s_zimmer.attributes.current_humidity) > 60 %}
                      von Samuel,
                      {% endif %}
                      {% if (states.climate.fabian_s_zimmer.attributes.current_humidity) > 60 %}
                      von Fabi,
                      {% endif %}
                      {% if (states.climate.wohnzimmer.attributes.current_humidity) > 60 %}
                      Wohnzimmer,
                      {% endif %}
                      {% if (states.climate.bad.attributes.current_humidity) > 60 %}
                      Bad,
                      {% endif %}
                      Bitte lüften.
                - delay: 00:00:05
                - service: media_player.volume_set
                  data:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                    entity_id: media_player.kuche_lautsprecher
        - choose:
            - conditions:
                - condition: state
                  entity_id: media_player.fabians_lautsprecher
                  state: "off"
                - condition: template
                  value_template: "{{ as_timestamp(now()) - as_timestamp(states.person.fabian.last_changed) | int < 240 }}"
              sequence:
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                    entity_id: media_player.fabians_lautsprecher
                - delay: 00:00:05
                - service: tts.speak
                  continue_on_error: true
                  target:
                    entity_id: tts.google_de_de
                  data_template:
                    media_player_entity_id: media_player.fabians_lautsprecher
                    message: >
                      {% if (as_timestamp(now()) - as_timestamp(states.person.fabian.last_changed) | int < 240) and (as_timestamp(now()) - as_timestamp(states.person.samuel.last_changed) | int < 240) %}
                      Willkommen zurück Fabi und Samuel
                      {% elif (as_timestamp(now()) - as_timestamp(states.person.fabian.last_changed) | int < 240) %}
                      Willkommen zurück Fabi.
                      {% elif (as_timestamp(now()) - as_timestamp(states.person.samuel.last_changed) | int < 240) %}
                      Willkommen zurück Samuel.
                      {% endif %}
                      Die Luftfeuchtigkeit ist zu hoch im Raum
                      {% if (states.climate.samuel_s_zimmer.attributes.current_humidity) > 60 %}
                      von Samuel,
                      {% endif %}
                      {% if (states.climate.fabian_s_zimmer.attributes.current_humidity) > 60 %}
                      von Fabi,
                      {% endif %}
                      {% if (states.climate.wohnzimmer.attributes.current_humidity) > 60 %}
                      Wohnzimmer,
                      {% endif %}
                      {% if (states.climate.bad.attributes.current_humidity) > 60 %}
                      Bad,
                      {% endif %}
                      Bitte lüften.
                - delay: 00:00:05
                - service: media_player.volume_set
                  data:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                    entity_id: media_player.fabians_lautsprecher
        - choose:
            - conditions:
                - condition: state
                  entity_id: media_player.wohnzimmer_uhr
                  state: "off"
                - condition: state
                  entity_id: media_player.wohnzimmer_tv
                  state: "unavailable"
                - condition: state
                  entity_id: input_boolean.gast_modus
                  state: "off"
              sequence:
                - service: media_player.volume_set
                  data_template:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                    entity_id: media_player.wohnzimmer_uhr
                - delay: 00:00:05
                - service: tts.speak
                  continue_on_error: true
                  target:
                    entity_id: tts.google_de_de
                  data_template:
                    media_player_entity_id: media_player.wohnzimmer_uhr
                    message: >
                      {% if (as_timestamp(now()) - as_timestamp(states.person.fabian.last_changed) | int < 240) and (as_timestamp(now()) - as_timestamp(states.person.samuel.last_changed) | int < 240) %}
                      Willkommen zurück Fabi und Samuel
                      {% elif (as_timestamp(now()) - as_timestamp(states.person.fabian.last_changed) | int < 240) %}
                      Willkommen zurück Fabi.
                      {% elif (as_timestamp(now()) - as_timestamp(states.person.samuel.last_changed) | int < 240) %}
                      Willkommen zurück Samuel.
                      {% endif %}
                      Die Luftfeuchtigkeit ist zu hoch im Raum
                      {% if (states.climate.samuel_s_zimmer.attributes.current_humidity) > 60 %}
                      von Samuel,
                      {% endif %}
                      {% if (states.climate.fabian_s_zimmer.attributes.current_humidity) > 60 %}
                      von Fabi,
                      {% endif %}
                      {% if (states.climate.wohnzimmer.attributes.current_humidity) > 60 %}
                      Wohnzimmer,
                      {% endif %}
                      {% if (states.climate.bad.attributes.current_humidity) > 60 %}
                      Bad,
                      {% endif %}
                      Bitte lüften.
                - delay: 00:00:03
                - service: media_player.volume_set
                  data:
                    volume_level: >
                      {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                    entity_id: media_player.wohnzimmer_uhr
            - conditions:
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: media_player.wohnzimmer_tv
                      state: "unavailable"
              sequence:
                - service: notify.wohnzimmer_tv
                  continue_on_error: true
                  data_template:
                    message: >
                      Die Luftfeuchtigkeit ist zu hoch im Raum
                      {% if (states.climate.samuel_s_zimmer.attributes.current_humidity) > 60 %}
                      von Samuel,
                      {% endif %}
                      {% if (states.climate.fabian_s_zimmer.attributes.current_humidity) > 60 %}
                      von Fabi,
                      {% endif %}
                      {% if (states.climate.wohnzimmer.attributes.current_humidity) > 60 %}
                      Wohnzimmer,
                      {% endif %}
                      {% if (states.climate.bad.attributes.current_humidity) > 60 %}
                      Bad,
                      {% endif %}
                      Bitte lüften.

- id: notify_for_extreme_high_humidity
  alias: Notify for extreme high humidity
  trigger:
    - platform: numeric_state
      entity_id:
        - climate.samuel_s_zimmer
        - climate.wohnzimmer
        - climate.fabian_s_zimmer
        - climate.bad
      attribute: current_humidity
      above: 69
  condition:
    - condition: time
      after: "06:00:00"
    - condition: state
      entity_id: person.samuel
      state: not_home
    - condition: state
      entity_id: person.fabian
      state: not_home
    - condition: state
      entity_id: "input_boolean.abwesend_modus"
      state: "off"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_for_extreme_high_humidity.attributes.last_triggered) | int > 32400 }}"
  action:
    - choose:
        - conditions:
            - condition: numeric_state
              entity_id: sensor.smart_life_fabian_distance
              below: 89000
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_fabian
                message: >
                  Achtung, sehr hohe Luftfeuchtigkeit:{% if (states.climate.samuel_s_zimmer.attributes.current_humidity) > 67 %}

                  Luftfeuchtigkeit Samuels Zimmer{{ states.climate.samuel_s_zimmer.attributes.current_humidity }} %.{% endif %}
                  {% if (states.climate.wohnzimmer.attributes.current_humidity) > 67 %} Luftfeuchtigkeit Wohnzimmer{{ states.climate.wohnzimmer.attributes.current_humidity }} %.{% endif %}
                  {% if (states.climate.fabian_s_zimmer.attributes.current_humidity) > 67 %} Luftfeuchtigkeit fabian_s_zimmer{{ states.climate.fabian_s_zimmer.attributes.current_humidity }} %.{% endif %}
                  {% if (states.climate.bad.attributes.current_humidity) > 67 %} Luftfeuchtigkeit Bad{{ states.climate.bad.attributes.current_humidity }} %.{% endif %}
    - choose:
        - conditions:
            - condition: numeric_state
              entity_id: sensor.smart_life_fabian_distance
              below: 89000
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_samuel
                message: >
                  Achtung, sehr hohe Luftfeuchtigkeit:{% if (states.climate.samuel_s_zimmer.attributes.current_humidity) > 67 %}

                  Luftfeuchtigkeit Samuels Zimmer{{ states.climate.samuel_s_zimmer.attributes.current_humidity }} %.{% endif %}
                  {% if (states.climate.wohnzimmer.attributes.current_humidity) > 67 %} Luftfeuchtigkeit Wohnzimmer{{ states.climate.wohnzimmer.attributes.current_humidity }} %.{% endif %}
                  {% if (states.climate.fabian_s_zimmer.attributes.current_humidity) > 67 %} Luftfeuchtigkeit fabian_s_zimmer{{ states.climate.fabian_s_zimmer.attributes.current_humidity }} %.{% endif %}
                  {% if (states.climate.bad.attributes.current_humidity) > 67 %} Luftfeuchtigkeit Bad{{ states.climate.bad.attributes.current_humidity }} %.{% endif %}

- id: detect_if_coal_lighter_is_currently_active
  alias: Detect if coal lighter is currently active
  initial_state: true
  mode: single
  trigger:
    - platform: numeric_state
      entity_id: sensor.keller_steckdose_energy_power
      above: 380
      below: 1000
      for:
        seconds: 35
    - platform: state
      entity_id: switch.kohleanzunder
      to: "on"
      for:
        minutes: 1
    - platform: state
      entity_id: input_button.kohleanzunder_timer
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.detect_if_coal_lighter_is_currently_active.attributes.last_triggered) | int > 1080 }}"
      - condition: or
        conditions:
          - condition: and
            conditions:
              - condition: numeric_state
                entity_id: sensor.keller_steckdose_energy_power
                above: 380
              - condition: state
                entity_id: switch.kohleanzunder
                state: "on"
          - condition: template
            value_template: "{{ as_timestamp(now()) - as_timestamp(states.input_button.kohleanzunder_timer.state) | int < 30 }}"
  action:
    - service: automation.turn_off
      data:
        entity_id:
          - automation.detect_if_washing_machine_is_currently_active
    - choose:
        #  IF 5 friends are there
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: person.flo
                  state: home
                - condition: state
                  entity_id: person.maxi
                  state: home
                - condition: state
                  entity_id: person.fabian
                  state: "JUZ"
                - condition: and
                  conditions:
                    - condition: state
                      entity_id: person.fabian
                      state: "Kai-Adri"
                    - condition: state
                      entity_id: person.flo
                      state: "Kai-Adri"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_5friends
                message: "Kohleanzünder wurde eingeschaltet."
        #  ELSEIF only K&A are there
        - conditions:
            - condition: or
              conditions:
                - condition: and
                  conditions:
                    - condition: and
                      conditions:
                        - condition: state
                          entity_id: person.kai
                          state: home
                        - condition: state
                          entity_id: person.adri
                          state: home
                    - condition: not
                      conditions:
                        - condition: state
                          entity_id: person.flo
                          state: home
                        - condition: state
                          entity_id: person.maxi
                          state: home
                - condition: and
                  conditions:
                    - condition: state
                      entity_id: person.fabian
                      state: "Kai-Adri"
                    - condition: state
                      entity_id: person.adri
                      state: "Kai-Adri"
                    - condition: state
                      entity_id: person.kai
                      state: "Kai-Adri"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_afk
                message: "Kohleanzünder wurde eingeschaltet."
                inline_keyboard:
                  - "Dauer:/remaining_time"
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: person.adri
                  state: home
                - condition: and
                  conditions:
                    - condition: state
                      entity_id: person.fabian
                      state: "Kai-Adri"
                    - condition: state
                      entity_id: person.adri
                      state: "Kai-Adri"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_adrian
                message: "Kohleanzünder wurde eingeschaltet."
                inline_keyboard:
                  - "Dauer:/remaining_time"
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_fabian
                message: "Kohleanzünder wurde eingeschaltet."
                inline_keyboard:
                  - "Dauer:/remaining_time"
        - conditions:
            - condition: and
              conditions:
                - condition: state
                  entity_id: person.samuel
                  state: home
            - condition: not
              conditions:
                - condition: state
                  entity_id: person.fabian
                  state: home
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_samuel
                message: "Kohleanzünder wurde eingeschaltet."
                inline_keyboard:
                  - "Dauer:/remaining_time"
      #  ELSE only notify fabian
      default:
        - service: telegram_bot.send_message
          data_template:
            target: !secret telegram_chat_fabian
            message: "Kohleanzünder wurde eingeschaltet."
            inline_keyboard:
              - "Dauer:/remaining_time"
    #- delay: "00:09:00"
    #- choose:
    #    #  IF 5 friends are there
    #    - conditions:
    #        - condition: or
    #          conditions:
    #            - condition: state
    #              entity_id: person.flo
    #              state: home
    #            - condition: state
    #              entity_id: person.maxi
    #              state: home
    #            - condition: state
    #              entity_id: person.fabian
    #              state: "JUZ"
    #      sequence:
    #        - service: telegram_bot.send_message
    #          data_template:
    #            target: !secret telegram_chat_5friends
    #            message: "Bitte Kohle wenden."
    #        - service: notify.mobile_app_pixel_8_pro
    #          data:
    #            message: "Bitte Kohle wenden"
    #            data:
    #              push:
    #                sound:
    #                  name: "default"
    #                  critical: 1
    #                  volume: 0.7
    #    #  ELSEIF only K&A are there
    #    - conditions:
    #        - condition: or
    #          conditions:
    #            - condition: and
    #              conditions:
    #                - condition: and
    #                  conditions:
    #                    - condition: state
    #                      entity_id: person.kai
    #                      state: home
    #                    - condition: state
    #                      entity_id: person.adri
    #                      state: home
    #                - condition: not
    #                  conditions:
    #                    - condition: state
    #                      entity_id: person.flo
    #                      state: home
    #                    - condition: state
    #                      entity_id: person.maxi
    #                      state: home
    #            - condition: and
    #              conditions:
    #                - condition: state
    #                  entity_id: person.fabian
    #                  state: "Kai-Adri"
    #                - condition: state
    #                  entity_id: person.adri
    #                  state: "Kai-Adri"
    #                - condition: state
    #                  entity_id: person.kai
    #                  state: "Kai-Adri"
    #      sequence:
    #        - service: telegram_bot.send_message
    #          data_template:
    #            target: !secret telegram_chat_afk
    #            message: "Bitte Kohle wenden."
    #        - service: notify.mobile_app_pixel_8_pro
    #          data:
    #            message: "Bitte Kohle wenden"
    #            data:
    #              push:
    #                sound:
    #                  name: "default"
    #                  critical: 1
    #                  volume: 0.7
    #    - conditions:
    #        - condition: or
    #          conditions:
    #            - condition: state
    #              entity_id: person.adri
    #              state: home
    #            - condition: and
    #              conditions:
    #                - condition: state
    #                  entity_id: person.fabian
    #                  state: "Kai-Adri"
    #                - condition: state
    #                  entity_id: person.adri
    #                  state: "Kai-Adri"
    #      sequence:
    #        - service: telegram_bot.send_message
    #          data_template:
    #            target: !secret telegram_chat_adrian
    #            message: "Bitte Kohle wenden."
    #        - service: telegram_bot.send_message
    #          data_template:
    #            target: !secret telegram_chat_fabian
    #            message: "Bitte Kohle wenden."
    #        - service: notify.mobile_app_pixel_8_pro
    #          data:
    #            message: "Bitte Kohle wenden"
    #            data:
    #              push:
    #                sound:
    #                  name: "default"
    #                  critical: 1
    #                  volume: 0.7
    #    #  ELSE only notify fabian
    #    - conditions:
    #        - condition: and
    #          conditions:
    #            - condition: state
    #              entity_id: person.samuel
    #              state: home
    #        - condition: not
    #          conditions:
    #            - condition: state
    #              entity_id: person.fabian
    #              state: home
    #      sequence:
    #        - service: telegram_bot.send_message
    #          data_template:
    #            target: !secret telegram_chat_samuel
    #            message: "Bitte Kohle wenden."
    #  default:
    #    - service: telegram_bot.send_message
    #      data_template:
    #        target: !secret telegram_chat_fabian
    #        message: "Bitte Kohle wenden."
    #    - service: notify.mobile_app_pixel_8_pro
    #      data:
    #        message: "Bitte Kohle wenden"
    #        data:
    #          push:
    #            sound:
    #              name: "default"
    #              critical: 1
    #              volume: 0.7
    #- choose:
    #    - conditions:
    #        - condition: not
    #          conditions:
    #            - condition: state
    #              entity_id: media_player.keller_tv
    #              state: unavailable
    #      sequence:
    #        - service: androidtv.adb_command
    #          continue_on_error: true
    #          data:
    #            entity_id: media_player.keller_tv
    #            command: "pm clear com.tcl.videoplayer"
    #        - service: androidtv.adb_command
    #          continue_on_error: true
    #          data:
    #            entity_id: media_player.keller_tv
    #            command: "am start -a android.intent.action.VIEW -d /sdcard/jonny_rozay_shisha_smoke.mp4 -t video/mp4"
    #        #  - service: notify.keller_tv
    #        #    continue_on_error: true
    #        #    data:
    #        #      message: "Bitte Kohle wenden."
    - delay: "00:06:00"
    #  - choose:
    #      - conditions:
    #          - condition: not
    #            conditions:
    #              - condition: state
    #                entity_id: media_player.keller_tv
    #                state: unavailable
    #        sequence:
    #          - service: notify.keller_tv
    #            continue_on_error: true
    #            data:
    #              message: "Der Eisschlauch kann schon mal geholt werden."
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: person.fabian
                  state: home
                - condition: state
                  entity_id: person.fabian
                  state: JUZ
                - condition: state
                  entity_id: person.fabian
                  state: "Kai-Adri"
                - condition: template
                  value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.detect_if_coal_lighter_is_currently_active.attributes.last_triggered) | int > 14400 }}"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_fabian
                message: "Der Eisschlauch kann schon mal geholt werden."
        - conditions:
            - condition: and
              conditions:
                - condition: state
                  entity_id: person.samuel
                  state: home
                - condition: template
                  value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.detect_if_coal_lighter_is_currently_active.attributes.last_triggered) | int > 14400 }}"
            - condition: not
              conditions:
                - condition: state
                  entity_id: person.fabian
                  state: home
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_samuel
                message: "Der Eisschlauch kann schon mal geholt werden."
    - delay: "00:02:00"
    - service: switch.turn_off
      data:
        entity_id: switch.kohleanzunder
    - delay: "00:01:00"
    - choose:
        #  IF 5 friends are there
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: person.flo
                  state: home
                - condition: state
                  entity_id: person.maxi
                  state: home
                - condition: state
                  entity_id: person.fabian
                  state: "JUZ"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_5friends
                message: "Die Kohle sollte fertig sein! Strom ausschalten nicht vergessen."
            - service: notify.mobile_app_pixel_8_pro
              data:
                message: "Die Kohle sollte fertig sein! Strom ausschalten nicht vergessen."
                data:
                  push:
                    sound:
                      name: "default"
                      critical: 1
                      volume: 0.7
        #  ELSEIF only K&A are there
        - conditions:
            - condition: or
              conditions:
                - condition: and
                  conditions:
                    - condition: and
                      conditions:
                        - condition: state
                          entity_id: person.kai
                          state: home
                        - condition: state
                          entity_id: person.adri
                          state: home
                    - condition: not
                      conditions:
                        - condition: state
                          entity_id: person.flo
                          state: home
                        - condition: state
                          entity_id: person.maxi
                          state: home
                - condition: and
                  conditions:
                    - condition: state
                      entity_id: person.fabian
                      state: "Kai-Adri"
                    - condition: state
                      entity_id: person.adri
                      state: "Kai-Adri"
                    - condition: state
                      entity_id: person.kai
                      state: "Kai-Adri"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_afk
                message: "Die Kohle sollte fertig sein! Strom ausschalten nicht vergessen."
            - service: notify.mobile_app_pixel_8_pro
              data:
                message: "Die Kohle sollte fertig sein!"
                data:
                  push:
                    sound:
                      name: "default"
                      critical: 1
                      volume: 0.7
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: person.adri
                  state: home
                - condition: and
                  conditions:
                    - condition: state
                      entity_id: person.fabian
                      state: "Kai-Adri"
                    - condition: state
                      entity_id: person.adri
                      state: "Kai-Adri"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_adrian
                message: "Die Kohle sollte fertig sein! Strom wurde ausgeschaltet."
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_fabian
                message: "Die Kohle sollte fertig sein! Strom wurde ausgeschaltet."
            - service: notify.mobile_app_pixel_8_pro
              data:
                message: "Die Kohle sollte fertig sein!"
                data:
                  push:
                    sound:
                      name: "default"
                      critical: 1
                      volume: 0.7
        - conditions:
            - condition: and
              conditions:
                - condition: state
                  entity_id: person.samuel
                  state: home
            - condition: not
              conditions:
                - condition: state
                  entity_id: person.fabian
                  state: home
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_samuel
                message: "Die Kohle sollte fertig sein! Strom wurde ausgeschaltet."
      #  ELSE only notify fabian
      default:
        - service: telegram_bot.send_message
          data_template:
            target: !secret telegram_chat_fabian
            message: "Die Kohle sollte fertig sein! Strom wurde ausgeschaltet."
        - service: notify.mobile_app_pixel_8_pro
          data:
            message: "Die Kohle sollte fertig sein!"
            data:
              push:
                sound:
                  name: "default"
                  critical: 1
                  volume: 0.7
    - service: automation.turn_on
      data:
        entity_id:
          - automation.detect_if_washing_machine_is_currently_active
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.keller_tv
                  state: unavailable
          sequence:
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: "pm clear com.tcl.videoplayer"
            - service: androidtv.adb_command
              continue_on_error: true
              data:
                entity_id: media_player.keller_tv
                command: "am start -a android.intent.action.VIEW -d /sdcard/bitte_gib_mir_die_shisha.mp4 -t video/mp4"
            - service: notify.keller_tv
              continue_on_error: true
              data:
                message: "Die Kohle sollte fertig sein!"

- id: check_if_coal_lighter_has_been_forgotten
  alias: Check if coal_lighter has been forgotten
  initial_state: true
  trigger:
    - platform: state
      entity_id: switch.kohleanzunder
      to: "on"
      for:
        minutes: 25
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.detect_if_washing_machine_is_currently_active.attributes.last_triggered) | int > 1260 }}"
      - condition: state
        entity_id: switch.kohleanzunder
        state: "on"
  action:
    - choose:
        #  IF 5 friends are there
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: person.flo
                  state: home
                - condition: state
                  entity_id: person.maxi
                  state: home
                - condition: state
                  entity_id: person.fabian
                  state: "JUZ"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_5friends
                message: "Der Kohleanzunder wurde vor 25 Minuten eingeschaltet aber die Automationen nicht gestartet. Ggf. Fehler und die Kohle ist fertig."
        #  ELSEIF only K&A are there
        - conditions:
            - condition: or
              conditions:
                - condition: and
                  conditions:
                    - condition: and
                      conditions:
                        - condition: state
                          entity_id: person.kai
                          state: home
                        - condition: state
                          entity_id: person.adri
                          state: home
                    - condition: not
                      conditions:
                        - condition: state
                          entity_id: person.flo
                          state: home
                        - condition: state
                          entity_id: person.maxi
                          state: home
                - condition: and
                  conditions:
                    - condition: state
                      entity_id: person.fabian
                      state: "Kai-Adri"
                    - condition: state
                      entity_id: person.adri
                      state: "Kai-Adri"
                    - condition: state
                      entity_id: person.kai
                      state: "Kai-Adri"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_afk
                message: "Der Kohleanzunder wurde vor 25 Minuten eingeschaltet aber die Automationen nicht gestartet. Ggf. Fehler und die Kohle ist fertig."
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: person.adri
                  state: home
                - condition: and
                  conditions:
                    - condition: state
                      entity_id: person.fabian
                      state: "Kai-Adri"
                    - condition: state
                      entity_id: person.adri
                      state: "Kai-Adri"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_adrian
                message: "Der Kohleanzunder wurde vor 25 Minuten eingeschaltet aber die Automationen nicht gestartet. Ggf. Fehler und die Kohle ist fertig."
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_fabian
                message: "Der Kohleanzunder wurde vor 25 Minuten eingeschaltet aber die Automationen nicht gestartet. Ggf. Fehler und die Kohle ist fertig."
      #  ELSE only notify fabian
      default:
        - service: telegram_bot.send_message
          data_template:
            target: !secret telegram_chat_fabian
            message: "Der Kohleanzunder wurde vor 25 Minuten eingeschaltet aber die Automationen nicht gestartet. Ggf. Fehler und die Kohle ist fertig."

- id: check_if_washing_machine_has_been_forgotten
  alias: Check if washing machine has been forgotten
  initial_state: true
  trigger:
    - platform: state
      entity_id: switch.waschmaschine
      to: "on"
      for:
        hours: 6
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.detect_if_washing_machine_is_currently_active.attributes.last_triggered) | int > 21650 }}"
      - condition: state
        entity_id: switch.waschmaschine
        state: "on"
  action:
    - service: notify.telegram_samuel
      data:
        message: "Die Waschmaschine wurde vor 6 Stunden eingeschaltet aber die Automation nicht gestartet. Fehler und Wäsche wurde vergessen?"
    - service: notify.telegram_fabian
      data:
        message: "Die Waschmaschine wurde vor 6 Stunden eingeschaltet aber die Automation nicht gestartet. Fehler und Wäsche wurde vergessen?"

- id: detect_if_washing_machine_is_currently_active
  alias: Detect if Washing machine is currently active
  mode: single
  trigger:
    - platform: numeric_state
      entity_id: sensor.keller_steckdose_energy_power
      above: 22
      below: 469
      for:
        seconds: 40
    - platform: numeric_state
      entity_id: sensor.keller_steckdose_energy_power
      above: 1800
      for:
        seconds: 5
    - platform: state
      entity_id: switch.waschmaschine
      to: "on"
      for:
        minutes: 8
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.detect_if_washing_machine_is_currently_active.attributes.last_triggered) | int > 3600 }}"
      - condition: state
        entity_id: switch.waschmaschine
        state: "on"
      - condition: numeric_state
        entity_id: sensor.keller_steckdose_energy_power
        above: 22
  action:
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.smart_life_fabian_distance
                  below: 89000
                - condition: state
                  entity_id: person.fabian
                  state: "home"
          sequence:
            - service: notify.telegram_fabian
              data:
                message: "Die Waschmaschine wurde gestartet. Wähle das Waschprogramm aus um eine Zeit zu erhalten, wann die Waschmaschine fertig ist:"
                data:
                  inline_keyboard:
                    - "30° PL:/washerstart30, 40° PL:/washerstart40, 40° Koch-Bunt:/washerstart40kb, 20° Fein:/washerstart20fw, 60° Koch-Bunt:/washerstart60kb"
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.smart_life_samuel_distance
                  below: 55000
                - condition: state
                  entity_id: person.samuel
                  state: "home"
          sequence:
            - service: notify.telegram_samuel
              data:
                message: "Die Waschmaschine wurde gestartet. Wähle das Waschprogramm aus um eine Zeit zu erhalten, wann die Waschmaschine fertig ist:"
                data:
                  inline_keyboard:
                    - "30° PL:/washerstart30, 40° PL:/washerstart40, 40° Koch-Bunt:/washerstart40kb, 20° Fein:/washerstart20fw, 60° Koch-Bunt:/washerstart60kb"
    - service: input_select.select_option
      data:
        entity_id: input_select.washing_machine_status
        option: Running
    - service: automation.turn_on
      data:
        entity_id:
          - automation.set_washing_machine_active_when_power_detected
          - automation.set_washing_machine_clean_when_power_drops
    - service: automation.turn_off
      data:
        entity_id:
          - automation.detect_if_coal_lighter_is_currently_active
          - automation.detect_if_washing_machine_is_currently_active

- id: set_washing_machine_active_when_power_detected
  alias: Set washing machine active when power detected
  trigger:
    - platform: numeric_state
      entity_id: sensor.keller_steckdose_energy_power
      above: 22
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: sensor.washing_machine_state
        state: Idle
      - condition: state
        entity_id: sensor.washing_machine_state
        state: Clean
      - condition: state
        entity_id: sensor.washing_machine_state
        state: Finishing
      #  - condition: template
      #    value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.detect_if_coal_lighter_is_currently_active.attributes.last_triggered) | int > 50 }}"
  action:
    - service: input_select.select_option
      data:
        entity_id: input_select.washing_machine_status
        option: Running

#  When the power drops, move the state of the washing machine to Clean
- id: set_washing_machine_clean_when_power_drops
  alias: Set washing machine clean when power drops
  trigger:
    - platform: numeric_state
      entity_id: sensor.keller_steckdose_energy_power
      below: 6
      for:
        minutes: 3
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_select.washing_machine_status
        state: Running
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.detect_if_coal_lighter_is_currently_active.attributes.last_triggered) | int > 900 }}"
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.set_washing_machine_active_when_power_detected.attributes.last_triggered) | int > 1680 }}"
  action:
    - service: input_select.select_option
      data:
        entity_id: input_select.washing_machine_status
        option: Clean
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.smart_life_fabian_distance
                  below: 35000
                - condition: state
                  entity_id: person.fabian
                  state: "home"
          sequence:
            - service: notify.telegram_fabian
              data:
                message: "Die Waschmaschine ist fertig. Bitte ausräumen."
                data:
                  inline_keyboard:
                    - "Erledigt:/telegramwasherdone"
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.smart_life_samuel_distance
                  below: 35000
                - condition: state
                  entity_id: person.samuel
                  state: "home"
          sequence:
            - service: notify.telegram_samuel
              data:
                message: "Die Waschmaschine ist fertig. Bitte ausräumen."
                data:
                  inline_keyboard:
                    - "Erledigt:/telegramwasherdone"
    - service: automation.turn_on
      data:
        entity_id:
          - automation.detect_if_washing_machine_is_currently_active
          - automation.detect_if_coal_lighter_is_currently_active
    - service: switch.turn_off
      data:
        entity_id: switch.waschmaschine
    - service: automation.turn_off
      data:
        entity_id: automation.set_washing_machine_clean_when_power_drops
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.leiser_modus
              state: "off"
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.wohnzimmer_uhr
                  state: "playing"
          sequence:
            - service: tts.speak
              continue_on_error: true
              target:
                entity_id: tts.google_de_de
              data_template:
                media_player_entity_id: media_player.wohnzimmer_uhr
                message: "Die Waschmaschine ist fertig."
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.leiser_modus
              state: "off"
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.kuche_lautsprecher
                  state: "playing"
          sequence:
            - service: tts.speak
              continue_on_error: true
              target:
                entity_id: tts.google_de_de
              data_template:
                media_player_entity_id: media_player.kuche_lautsprecher
                message: "Die Waschmaschine ist fertig."
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.leiser_modus
              state: "off"
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.fabians_lautsprecher
                  state: "playing"
          sequence:
            - service: tts.speak
              continue_on_error: true
              target:
                entity_id: tts.google_de_de
              data_template:
                media_player_entity_id: media_player.fabians_lautsprecher
                message: "Die Waschmaschine ist fertig."

- id: set_washing_machine_idle_after_timeout
  alias: Set washing machine idle after timeout
  trigger:
    - platform: state
      entity_id: input_select.washing_machine_status
      to: Clean
      for:
        minutes: 120
  action:
    - service: input_select.select_option
      data:
        entity_id: input_select.washing_machine_status
        option: Idle

- id: resume_music_in_keller_after_shisha_video
  alias: Resume music in keller after shisha video
  initial_state: true
  trigger:
    - platform: state
      entity_id: media_player.keller_tv
      attribute: app_id
      from: com.tcl.videoplayer
  action:
    - service: media_player.media_play
      data:
        entity_id: media_player.keller_tv

- id: remind_for_finished_rice_cooker
  alias: Remind for finished rice cooker
  initial_state: true
  trigger:
    - platform: numeric_state
      entity_id: sensor.xiaomi_miio_cooker_remaining
      below: 5
  condition:
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.remind_for_finished_rice_cooker.attributes.last_triggered) | int > 1200 }}"
  action:
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: person.fabian
                  state: "home"
                - condition: state
                  entity_id: person.samuel
                  state: "home"
          sequence:
            - service: notify.telegram_samuel
              data_template:
                message: "Der Reiskocher ist in {{ states.sensor.xiaomi_miio_cooker_remaining.state }} Minuten fertig."
            - service: notify.telegram_fabian
              data_template:
                message: "Der Reiskocher ist in {{ states.sensor.xiaomi_miio_cooker_remaining.state }} Minuten fertig."
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.leiser_modus
              state: "off"
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.wohnzimmer_uhr
                  state: "playing"
            - condition: or
              conditions:
                - condition: state
                  entity_id: person.fabian
                  state: "home"
                - condition: state
                  entity_id: person.samuel
                  state: "home"
          sequence:
            - service: tts.speak
              continue_on_error: true
              target:
                entity_id: tts.google_de_de
              data_template:
                media_player_entity_id:
                  - media_player.wohnzimmer_uhr
                  - media_player.kuche_lautsprecher
                message: "Der Reiskocher ist in {{ states.sensor.xiaomi_miio_cooker_remaining.state }} Minuten fertig."
    - service: input_select.select_option
      data:
        entity_id: input_select.rice_cooker_program
        option: schnelles Kochen

- id: turn_on_rice_cooker_when_timer_started
  alias: "Turn on rice cooker when timer started"
  initial_state: true
  trigger:
    - platform: template
      value_template: "{{ as_timestamp(now()) | round(-1) == (states.input_datetime.cooker_start_time.attributes.timestamp) | round(-1) }}"
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.kuchengerate
    - delay: 00:01:00
    - service: switch.turn_on
      data:
        entity_id: switch.xiaomi_miio_cooker
    - service: notify.telegram_samuel
      data_template:
        message: "Der Reiskocher wurde automatisch angeschaltet im Programm {{ states.input_select.rice_cooker_program.state }}."
    - service: notify.telegram_fabian
      data_template:
        message: "Der Reiskocher wurde automatisch angeschaltet im Programm {{ states.input_select.rice_cooker_program.state }}."

- id: set_rice_cooker_menu_state
  alias: "Set ricecooker menu state"
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.xiaomi_miio_cooker_menu
      not_from:
        - "unavailable"
        - "unknown"
        - ""
        - "Unknown"
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: sensor.xiaomi_miio_cooker_menu
              state: "Fine Rice"
          sequence:
            - service: input_select.select_option
              data:
                entity_id: input_select.rice_cooker_program
                option: "Kochen 1h"
    - choose:
        - conditions:
            - condition: state
              entity_id: sensor.xiaomi_miio_cooker_menu
              state: "Keep warm"
          sequence:
            - service: input_select.select_option
              data:
                entity_id: input_select.rice_cooker_program
                option: "Wärmen"
    - choose:
        - conditions:
            - condition: state
              entity_id: sensor.xiaomi_miio_cooker_menu
              state: "Quick Rice"
          sequence:
            - service: input_select.select_option
              data:
                entity_id: input_select.rice_cooker_program
                option: "schnelles Kochen"
    - choose:
        - conditions:
            - condition: state
              entity_id: sensor.xiaomi_miio_cooker_menu
              state: "Congee"
          sequence:
            - service: input_select.select_option
              data:
                entity_id: input_select.rice_cooker_program
                option: "Porridge"
    - choose:
        - conditions:
            - condition: state
              entity_id: sensor.xiaomi_miio_cooker_menu
              state: "Unknown menu"
          sequence:
            - service: input_select.select_option
              data:
                entity_id: input_select.rice_cooker_program
                option: "Sonstiges"

- id: remind_for_finished_airfryer
  alias: Remind for finished airfryer
  initial_state: true
  trigger:
    - platform: numeric_state
      entity_id: sensor.xiaomi_airfryer_remaining
      below: 5
  condition:
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.remind_for_finished_airfryer.attributes.last_triggered) | int > 1200 }}"
  action:
    - choose:
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: person.fabian
                  state: "home"
                - condition: state
                  entity_id: person.samuel
                  state: "home"
          sequence:
            - service: notify.telegram_samuel
              data_template:
                message: "Der Airfryer ist in {{ states.sensor.xiaomi_airfryer_remaining.state }} Minuten fertig."
            - service: notify.telegram_fabian
              data_template:
                message: "Der Airfryer ist in {{ states.sensor.xiaomi_airfryer_remaining.state }} Minuten fertig."
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.leiser_modus
              state: "off"
            - condition: not
              conditions:
                - condition: state
                  entity_id: media_player.wohnzimmer_uhr
                  state: "playing"
            - condition: or
              conditions:
                - condition: state
                  entity_id: person.fabian
                  state: "home"
                - condition: state
                  entity_id: person.samuel
                  state: "home"
          sequence:
            - service: tts.speak
              continue_on_error: true
              target:
                entity_id: tts.google_de_de
              data_template:
                media_player_entity_id:
                  - media_player.wohnzimmer_uhr
                  - media_player.kuche_lautsprecher
                message: "Der Airfryer ist in {{ states.sensor.xiaomi_airfryer_remaining.state }} Minuten fertig."

- id: kitchen_timer_reminder
  alias: Kitchen Timer Reminder
  initial_state: true
  trigger:
    - platform: numeric_state
      entity_id: sensor.kuche_lautsprecher_timers
      below: 5
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: switch.fernseher
        state: "on"
      - condition: state
        entity_id: switch.fernseher_keller
        state: "on"
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: person.fabian
              state: home
          sequence:
            - service: notify.telegram_fabian
              data:
                message: "Der Timer in der Küche ist in {{ states.sensor.kuche_lautsprecher_timers.state }} Minuten fertig."
    - choose:
        - conditions:
            - condition: state
              entity_id: person.samuel
              state: home
          sequence:
            - service: notify.telegram_samuel
              data:
                message: "Der Timer in der Küche ist in {{ states.sensor.kuche_lautsprecher_timers.state }} Minuten fertig."
    - choose:
        - conditions:
            - condition: state
              entity_id: switch.fernseher
              state: "on"
          sequence:
            - service: tts.speak
              continue_on_error: true
              target:
                entity_id: tts.google_de_de
              data_template:
                media_player_entity_id: media_player.wohnzimmer_uhr
                message: "Der Timer in der Küche ist in {{ states.sensor.kuche_lautsprecher_timers.state }} Minuten fertig."

- id: turn_off_kitchen_devices_after_x_minutes
  alias: "Turn off kitchen devices after x minutes"
  initial_state: true
  trigger:
    - platform: state
      entity_id: switch.kuchengerate
      to: "on"
      for:
        minutes: 20
    - platform: state
      entity_id: switch.kuchengerate
      from: "off"
      to: "on"
      for:
        minutes: 25
    - platform: state
      entity_id: switch.xiaomi_miio_cooker
      from: "on"
      to: "off"
      for:
        minutes: 40
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: switch.xiaomi_miio_cooker
        state: "off"
      - condition: state
        entity_id: switch.kuchengerate
        state: "on"
  action:
    - service: switch.turn_off
      data:
        entity_id: switch.kuchengerate

#   - id: turn_on_airplane_mode_fabi
#     alias: 'Turn on Airplane Mode Fabi'
#     initial_state: true
#     trigger:
#       - platform: time
#         at: '23:30:00'
#       - platform: time
#         at: '03:30:00'
#     condition:
#       condition: and
#       conditions:
#         - condition: time
#           weekday:
#             - mon
#             - tue
#             - wed
#             - thu
#             - sun
#         - condition: state
#           entity_id: device_tracker.pixel_8_pro
#           state: home
#         - condition: template
#           value_template: >
#             {% set domain = 'light' %}
#             {% set state = 'off' %}
#             {{ states[domain] | count == states[domain] | selectattr('state','eq', state) | list | count }}
#     action:
#       - service: notify.mobile_app_pixel_8_pro
#         data_template:
#           title: "Flugmodus"
#           message: "Flugmodus wurde vergessen und wird nun automatisch aktiviert!"
#         data:
#           data:
#             tag: 'notification-about-sensor'

- id: check_termostat_sleepingroom
  alias: "check thermostats"
  initial_state: true
  trigger:
    platform: time
    at: "19:40:00"
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.adaptive_lighting_sleeping_room
    - choose:
        - conditions:
            - condition: state
              entity_id: "input_boolean.thermostate_aus"
              state: "off"
            - condition: not
              conditions:
                - condition: state
                  entity_id: climate.fabian_s_zimmer
                  state: "auto"
                - condition: state
                  entity_id: device_tracker.fabian_pc
                  state: "home"
          sequence:
            #  - service: notify.telegram_fabian
            #    data:
            #      message: "Das Thermostat in Fabians Zimmer war noch auf {{ states.climate.fabian_s_zimmer.attributes.temperature }} °C eingestellt und wurde nun automatisch eingeschaltet."
            - service: climate.set_hvac_mode
              data:
                entity_id: climate.fabian_s_zimmer
                hvac_mode: auto

- id: pill_reminder
  alias: "Pill Reminder"
  trigger:
    platform: time
    at: "19:50:00"
  action:
    - choose:
        - conditions:
            - condition: numeric_state
              entity_id: counter.pille
              below: "29"
          sequence:
            - service: counter.increment
              target:
                entity_id: counter.pille
    - choose:
        - conditions:
            - condition: numeric_state
              entity_id: counter.pille
              below: 30
              above: 28
          sequence:
            - service: counter.reset
              target:
                entity_id: counter.pille
    - choose:
        - conditions:
            - condition: numeric_state
              entity_id: counter.pille
              below: "21"
          sequence:
            - service: notify.telegram_fabian
              data_template:
                message: "Pille nehmen nicht vergessen! Heute ist Tag {{ states.counter.pille.state }} von {{ (states.counter.pille.attributes.maximum) - 1 }}."
                data:
                  inline_keyboard:
                    - "Erledigt:/pilldone, Erinnern in 1h:/pill1h"
    - choose:
        - conditions:
            - condition: numeric_state
              entity_id: counter.pille
              below: 22
              above: 20
          sequence:
            - service: notify.telegram_fabian
              data:
                message: "Pille nehmen nicht vergessen! Heute ist der letze Tag, an dem du die Pille nehmen musst. Ab morgen kommen für 7 Tage keine Erinnerungen."
                data:
                  inline_keyboard:
                    - "Erledigt:/pilldone, Erinnern in 1h:/pill1h, Durchnehmen:/pillreset"
            - service: notify.telegram_fabian
              data:
                message: "Heute ist der letze Tag, an dem samuel die Pille nimmt für 7 Tage."

- id: samuel_forgot_pill
  alias: "samuel forgot pill"
  initial_state: false
  trigger:
    - platform: time
      at: "23:00:00"
  condition:
    condition: and
    conditions:
      - condition: time
        weekday:
          - mon
          - tue
          - wed
          - thu
          - sun
      - condition: not
        conditions:
          - condition: state
            entity_id: automation.telegram_pill_marked_done
            attribute: last_triggered
            state: none
      - condition: numeric_state
        entity_id: counter.pille
        below: "22"
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.telegram_pill_marked_done.attributes.last_triggered) | int > 10800 }}"
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: person.samuel
              state: home
          sequence:
            - service: tts.speak
              continue_on_error: true
              target:
                entity_id: tts.google_de_de
              data_template:
                media_player_entity_id: media_player.fabians_lautsprecher
                message: "Samuel, du hast die Pille vergessen"
    - service: notify.telegram_samuel
      data:
        message: "Du hast die Pille vergessen!"
    - service: notify.mobile_app_samuel_iphone
      data:
        message: "Du hast die Pille vergessen!"
        data:
          push:
            sound:
              name: "default"
              critical: 1
              volume: 1.0

- id: samuel_forgot_pill_weekend
  alias: "samuel forgot pill weekend"
  initial_state: false
  trigger:
    - platform: time
      at: "00:00:00"
  condition:
    condition: and
    conditions:
      - condition: time
        weekday:
          - fri
          - sat
      - condition: not
        conditions:
          - condition: state
            entity_id: automation.telegram_pill_marked_done
            attribute: last_triggered
            state: none
      - condition: numeric_state
        entity_id: counter.pille
        below: 22
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.telegram_pill_marked_done.attributes.last_triggered) | int > 14760 }}"
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: person.samuel
              state: home
          sequence:
            - service: tts.speak
              continue_on_error: true
              target:
                entity_id: tts.google_de_de
              data_template:
                media_player_entity_id: media_player.fabians_lautsprecher
                message: "Samuel, du hast die Pille vergessen"
    - service: notify.telegram_samuel
      data:
        message: "Du hast die Pille vergessen!"
    - service: notify.mobile_app_samuel_iphone
      data:
        message: "Du hast die Pille vergessen!"
        data:
          push:
            sound:
              name: "default"
              critical: 1
              volume: 1.0

- id: turn_off_everything_in_keller_if_tv_is_unavailable
  alias: Turn off everything in keller if tv is unavailable
  initial_state: true
  trigger:
    platform: state
    entity_id: media_player.keller_tv
    to: "unavailable"
    for:
      minutes: 10
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: switch.fernseher_keller
        state: "off"
      - condition: state
        entity_id: switch.strom_keller
        state: "off"
  action:
    #- service: switch.turn_off
    #  data:
    #    entity_id: switch.kuhlschrank
    - service: switch.turn_off
      data:
        entity_id: switch.keller_usb_ports

- id: remind_for_light_keller
  alias: Remind for light keller
  initial_state: true
  trigger:
    platform: state
    entity_id: media_player.keller_tv
    from: "unavailable"
  condition:
    condition: and
    conditions:
      - condition: time
        after: "17:00:00"
        before: "00:00:00"
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.remind_for_light_keller.attributes.last_triggered) | int > 12000 }}"
      - condition: or
        conditions:
          - condition: state
            entity_id: group.fabianszimmer
            state: "on"
          - condition: state
            entity_id: group.wohnzimmer
            state: "on"
  action:
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_fabian
        message: >
          Es ist noch Licht oder Strom an im
          {% if (is_state("group.fabianszimmer", "on")) -%}
          fabian_s_zimmer
          {% endif %}
          {% if (is_state("group.wohnzimmer", "on")) -%}
          Wohnzimmer
          {% endif %}
          {% if (is_state("group.samuelszimmer", "on")) -%}
          & Samuels Zimmer
          {% endif %}
          . Ausschalten?

- id: set_climate_living_room_if_in_keller
  alias: Set climate living room if in keller
  initial_state: true
  trigger:
    platform: state
    entity_id: media_player.keller_tv
    from: "unavailable"
  condition:
    condition: and
    conditions:
      - condition: time
        after: "17:00:00"
        before: "00:00:00"
  action:
    - service: climate.turn_off
      data:
        entity_id: climate.wohnzimmer

- id: set_climate_living_room_if_samuel_and_fabi_at_pc
  alias: Set climate living room if samuel and fabi at PC
  initial_state: true
  trigger:
    - platform: state
      entity_id: device_tracker.fabian_pc
      to: "home"
    - platform: state
      entity_id: device_tracker.md3f9bmc
      to: "home"
    - platform: state
      entity_id: device_tracker.c_pf38fwqx_pari
      to: "home"
    - platform: state
      entity_id: device_tracker.md3f9bmc
      to: "home"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: "input_boolean.thermostate_aus"
        state: "off"
      - condition: state
        entity_id: input_boolean.gast_modus
        state: "off"
      - condition: or
        conditions:
          - condition: state
            entity_id: device_tracker.fabian_pc
            state: "home"
          - condition: state
            entity_id: device_tracker.c_pf38fwqx_pari
            state: "home"
          - condition: not
            conditions:
              - condition: state
                entity_id: person.fabian
                state: "home"
      - condition: or
        conditions:
          - condition: state
            entity_id: "switch.schreibtisch_samuel"
            state: "on"
          - condition: not
            conditions:
              - condition: state
                entity_id: person.samuel
                state: "home"
  action:
    - service: climate.set_temperature
      data:
        entity_id: climate.wohnzimmer
        temperature: 16
        hvac_mode: heat
    - service: automation.turn_on
      data:
        entity_id: automation.set_climate_living_room_if_samuel_and_fabi_not_at_pc

- id: set_climate_living_room_if_samuel_and_fabi_not_at_pc
  alias: Set climate living room if samuel and fabi not at PC
  initial_state: false
  trigger:
    - platform: state
      entity_id: device_tracker.fabian_pc
      to: "not_home"
    - platform: state
      entity_id: device_tracker.md3f9bmc
      to: "not_home"
    - platform: state
      entity_id: device_tracker.c_pf38fwqx_pari
      to: "not_home"
    - platform: state
      entity_id: switch.schreibtisch_samuel
      to: "off"
  condition:
    - condition: state
      entity_id: "input_boolean.thermostate_aus"
      state: "off"
  action:
    - service: climate.set_hvac_mode
      data:
        entity_id: climate.wohnzimmer
        hvac_mode: auto
    - service: automation.turn_off
      data:
        entity_id: automation.set_climate_living_room_if_samuel_and_fabi_not_at_pc

- id: remind_for_guest_mode
  alias: remind for guest mode
  initial_state: false
  trigger:
    platform: state
    entity_id: media_player.keller_tv
    to: "unavailable"
    for:
      minutes: 5
  condition:
    condition: and
    conditions:
      - condition: time
        after: "23:00:00"
        before: "06:00:00"
      - condition: state
        entity_id: "input_boolean.gast_modus"
        state: "off"
      - condition: not
        conditions:
          - condition: state
            entity_id: calendar.fabianseitz98_gmail_com
            attribute: message
            state: "Gruppentreffen"
  action:
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.gast_modus
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_fabian
        message: "Übernachtet heute ein Gast? Gast Modus wurde automatisch eingeschaltet."
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_samuel
        message: "Übernachtet heute ein Gast? Gast Modus wurde automatisch eingeschaltet."

- id: set_climate_living_room_if_keller_left
  alias: Set climate living room if keller left
  initial_state: true
  trigger:
    platform: state
    entity_id: media_player.keller_tv
    to: "unavailable"
    for:
      minutes: 10
  condition:
    condition: and
    conditions:
      - condition: time
        after: "17:00:00"
        before: "00:00:00"
      - condition: state
        entity_id: "input_boolean.thermostate_aus"
        state: "off"
  action:
    - service: climate.set_hvac_mode
      data:
        entity_id: climate.wohnzimmer
        hvac_mode: auto

- id: notify_on_sbahn_delay_home_work
  alias: "Notify Fabi on sbahn delay Home -> Work"
  initial_state: true
  trigger:
    - platform: numeric_state
      entity_id: "sensor.zorneding_to_leuchtenbergring"
      attribute: delay
      above: 5
  condition:
    condition: and
    conditions:
      - condition: or
        conditions:
          - condition: state
            entity_id: device_tracker.pixel_8_pro
            state: home
          - condition: state
            entity_id: device_tracker.redmi_note_10_pro
            state: home
      - condition: time
        after: "06:30:00"
        before: "07:10:00"
      - condition: state
        entity_id: binary_sensor.workday_sensor
        state: "on"
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: device_tracker.pixel_8_pro
              state: home
          sequence:
            - service: notify.telegram_fabian
              data:
                title: "Sbahn um {{ states.sensor.zorneding_to_leuchtenbergring.attributes.departure }} hat +{{ states.sensor.zorneding_to_leuchtenbergring.attributes.delay }} min Verspätung."
                message: "Nächste Sbahn: {{ states.sensor.zorneding_to_leuchtenbergring.attributes.next_1 }} Uhr"

- id: notify_fabian_on_sbahn_delay_work_home
  alias: "Notify on Sbahn delay Work -> Home"
  initial_state: true
  trigger:
    - platform: numeric_state
      entity_id: "sensor.starnberg_nord_to_zorneding"
      attribute: delay
      above: 3
  condition:
    condition: and
    conditions:
      - condition: time
        after: "16:45:00"
        before: "17:30:00"
        weekday:
          - mon
          - tue
          - wed
          - thu
      - condition: state
        entity_id: binary_sensor.workday_sensor
        state: "on"
      - condition: numeric_state
        entity_id: sensor.smart_life_fabian_distance
        below: 89000
      - condition: numeric_state
        entity_id: sensor.smart_life_fabian_distance
        above: 20000
      - condition: not
        conditions:
          - condition: state
            entity_id: person.fabian
            state: home
  action:
    - service: notify.telegram_fabian
      data:
        title: "Sbahn um {{ states.sensor.starnberg_nord_to_zorneding.attributes.departure }} Uhr nach Hause +{{ states.sensor.starnberg_nord_to_zorneding.attributes.delay }} min."
        message: "Nächste Sbahn: {{ states.sensor.starnberg_nord_to_zorneding.attributes.next_1 }} Uhr"

- id: notify_on_sbahn_delay_work_samuel_home
  alias: "Notify on Sbahn delay Work samuel -> Home"
  initial_state: false
  trigger:
    - platform: state
      entity_id: person.samuel
      from: "Arbeit samuel"
      to: "not_home"
  condition:
    - condition: numeric_state
      entity_id: "sensor.leuchtenbergring_to_zorneding"
      attribute: delay
      above: 3
    - condition: state
      entity_id: binary_sensor.workday_sensor
      state: "on"
  action:
    - service: notify.telegram_samuel
      data:
        message: "Sbahn in Leuchtenbergring um {{ states.sensor.leuchtenbergring_to_zorneding.attributes.departure }} Uhr hat voraussichtlich {{ states.sensor.leuchtenbergring_to_zorneding.attributes.delay }} min Verspätung."

- id: notify_samuel_fabian_on_way_home
  alias: "Notify samuel Fabian on way home"
  initial_state: false
  trigger:
    - platform: state
      entity_id: sensor.smart_life_fabian_direction_of_travel
      to: "towards"
      for:
        minutes: 6
  condition:
    - condition: numeric_state
      entity_id: sensor.smart_life_fabian_distance
      above: 3000
    - condition: numeric_state
      entity_id: sensor.smart_life_fabian_distance
      below: 30000
    - condition: state
      entity_id: person.samuel
      state: home
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_samuel_fabian_on_way_home.attributes.last_triggered) | int > 3600 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_samuel_fabian_on_way_home_longer_distance.attributes.last_triggered) | int > 3600 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_samuel_fabian_on_way_home_long_distance.attributes.last_triggered) | int > 3600 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_samuel_fabian_on_way_home_from_sta.attributes.last_triggered) | int > 3700 }}"
    - condition: not
      conditions:
        - condition: state
          entity_id: person.fabian
          state: "Arbeit Fabi"
  action:
    - service: notify.telegram_samuel
      data:
        message: "Fabian ist auf dem Weg nach Hause und ist noch {{ states.sensor.smart_life_fabian_distance.state }} km entfernt von zu Hause."

- id: notify_samuel_fabian_on_way_home_longer_distance
  alias: "Notify samuel Fabian on way home longer distance"
  initial_state: false
  trigger:
    - platform: state
      entity_id: sensor.smart_life_fabian_direction_of_travel
      to: "towards"
      for:
        minutes: 22
  condition:
    - condition: numeric_state
      entity_id: sensor.smart_life_fabian_distance
      above: 29000
    - condition: numeric_state
      entity_id: sensor.smart_life_fabian_distance
      below: 90000
    - condition: state
      entity_id: person.samuel
      state: home
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_samuel_fabian_on_way_home.attributes.last_triggered) | int > 4600 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_samuel_fabian_on_way_home_longer_distance.attributes.last_triggered) | int > 4600 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_samuel_fabian_on_way_home_long_distance.attributes.last_triggered) | int > 4600 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_samuel_fabian_on_way_home_from_sta.attributes.last_triggered) | int > 4700 }}"
    - condition: not
      conditions:
        - condition: state
          entity_id: person.fabian
          state: "Arbeit Fabi"
  action:
    - service: notify.telegram_samuel
      data:
        message: "Fabian ist auf dem Weg nach Hause und ist noch {{ states.sensor.smart_life_fabian_distance.state }} km entfernt von zu Hause."

- id: notify_samuel_fabian_on_way_home_long_distance
  alias: "Notify samuel Fabian on way home long distance"
  initial_state: false
  trigger:
    - platform: state
      entity_id: sensor.smart_life_fabian_direction_of_travel
      to: "towards"
      for:
        minutes: 50
  condition:
    - condition: numeric_state
      entity_id: sensor.smart_life_fabian_distance
      above: 89000
    - condition: state
      entity_id: person.samuel
      state: home
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_samuel_fabian_on_way_home.attributes.last_triggered) | int > 4600 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_samuel_fabian_on_way_home_longer_distance.attributes.last_triggered) | int > 4600 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_samuel_fabian_on_way_home_long_distance.attributes.last_triggered) | int > 4600 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_samuel_fabian_on_way_home_from_sta.attributes.last_triggered) | int > 4600 }}"
    - condition: not
      conditions:
        - condition: state
          entity_id: person.fabian
          state: "Arbeit Fabi"
  action:
    - service: notify.telegram_samuel
      data:
        message: "Fabian ist auf dem Weg nach Hause und ist noch {{ states.sensor.smart_life_fabian_distance.state }} km entfernt von zu Hause."

- id: notify_fabian_samuel_on_way_home
  alias: "Notify Fabian samuel on way home"
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.smart_life_fabian_direction_of_travel
      to: "towards"
      for:
        minutes: 8
  condition:
    - condition: numeric_state
      entity_id: sensor.smart_life_samuel_distance
      above: 3000
    - condition: numeric_state
      entity_id: sensor.smart_life_samuel_distance
      below: 30000
    - condition: state
      entity_id: person.fabian
      state: home
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_fabian_samuel_on_way_home.attributes.last_triggered) | int > 1800 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_fabian_samuel_on_way_home_longer_distance.attributes.last_triggered) | int > 1800 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_fabian_samuel_on_way_home_long_distance.attributes.last_triggered) | int > 1800 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_fabian_samuel_on_way_home_from_work.attributes.last_triggered) | int > 3600 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_fabian_samuel_on_way_home_from_berufsschule.attributes.last_triggered) | int > 3600 }}"
    - condition: not
      conditions:
        - condition: state
          entity_id: person.samuel
          state: "arbeit_samuel"
        - condition: state
          entity_id: person.samuel
          state: "Arbeit samuel"
        - condition: state
          entity_id: person.samuel
          state: "Berufsschule"
  action:
    - service: notify.telegram_fabian
      data:
        message: "samuel ist auf dem Weg nach Hause und ist noch {{ states.sensor.smart_life_samuel_distance.state }} km entfernt von zu Hause."

- id: notify_fabian_samuel_on_way_home_longer_distance
  alias: "Notify Fabian samuel on way home longer distance"
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.smart_life_samuel_direction_of_travel
      to: "towards"
      for:
        minutes: 15
  condition:
    - condition: numeric_state
      entity_id: sensor.smart_life_samuel_distance
      above: 29000
    - condition: numeric_state
      entity_id: sensor.smart_life_samuel_distance
      below: 90000
    - condition: state
      entity_id: person.fabian
      state: home
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_fabian_samuel_on_way_home.attributes.last_triggered) | int > 1800 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_fabian_samuel_on_way_home_longer_distance.attributes.last_triggered) | int > 1800 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_fabian_samuel_on_way_home_long_distance.attributes.last_triggered) | int > 1800 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_fabian_samuel_on_way_home_from_work.attributes.last_triggered) | int > 3600 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_fabian_samuel_on_way_home_from_berufsschule.attributes.last_triggered) | int > 3600 }}"
    - condition: not
      conditions:
        - condition: state
          entity_id: person.samuel
          state: "arbeit_samuel"
        - condition: state
          entity_id: person.samuel
          state: "Berufsschule"
  action:
    - service: notify.telegram_fabian
      data:
        message: "samuel ist auf dem Weg nach Hause und ist noch {{ states.sensor.smart_life_samuel_distance.state }} km entfernt von zu Hause."

- id: notify_fabian_samuel_on_way_home_long_distance
  alias: "Notify Fabian samuel on way home long distance"
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.smart_life_samuel_direction_of_travel
      to: "towards"
      for:
        minutes: 30
  condition:
    - condition: numeric_state
      entity_id: sensor.smart_life_samuel_distance
      above: 89000
    - condition: state
      entity_id: person.fabian
      state: home
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_fabian_samuel_on_way_home.attributes.last_triggered) | int > 1800 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_fabian_samuel_on_way_home_longer_distance.attributes.last_triggered) | int > 1800 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_fabian_samuel_on_way_home_long_distance.attributes.last_triggered) | int > 1800 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_fabian_samuel_on_way_home_from_work.attributes.last_triggered) | int > 3600 }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_fabian_samuel_on_way_home_from_berufsschule.attributes.last_triggered) | int > 3600 }}"
    - condition: not
      conditions:
        - condition: state
          entity_id: person.samuel
          state: "arbeit_samuel"
        - condition: state
          entity_id: person.samuel
          state: "Berufsschule"
  action:
    - service: notify.telegram_fabian
      data:
        message: "samuel ist auf dem Weg nach Hause und ist noch {{ states.sensor.smart_life_samuel_distance.state }} km entfernt von zu Hause."

- id: notify_samuel_fabian_on_way_home_from_sta
  alias: "Notify samuel Fabian on way home from STA"
  initial_state: false
  trigger:
    - platform: state
      entity_id: person.fabian
      from: "Arbeit Fabi"
      to: "not_home"
  condition:
    - condition: time
      after: "14:00:00"
    - condition: state
      entity_id: binary_sensor.workday_sensor
      state: "on"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_samuel_fabian_on_way_home_from_sta.attributes.last_triggered) | int > 3600 }}"
    - condition: numeric_state
      entity_id: sensor.smart_life_samuel_distance
      below: 35000
    - condition: numeric_state
      entity_id: sensor.smart_life_fabian_distance
      above: 10000
  action:
    - parallel:
        - choose:
            - conditions:
                - condition: state
                  entity_id: person.samuel
                  state: home
                - condition: state
                  entity_id:
                    - input_boolean.leiser_modus
                    - input_boolean.gast_modus
                  state: "off"
              sequence:
                - choose:
                    - conditions:
                        - condition: state
                          entity_id: media_player.kuche_lautsprecher
                          state: "off"
                      sequence:
                        - service: media_player.volume_set
                          data_template:
                            volume_level: >
                              {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                            entity_id: media_player.kuche_lautsprecher
                        - delay: 00:00:02
                        - service: tts.speak
                          continue_on_error: true
                          target:
                            entity_id: tts.google_de_de
                          data_template:
                            media_player_entity_id: media_player.kuche_lautsprecher
                            message: "Fabian ist auf dem Weg nach Hause und kommt voraussichtlich um {{ states.sensor.starnberg_nord_to_zorneding.attributes.arrival }} Uhr mit {{ states.sensor.starnberg_nord_to_zorneding.attributes.delay }} min Verspätung in Zorneding an."
                        - delay: 00:00:08
                        - service: media_player.volume_set
                          data:
                            volume_level: >
                              {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                            entity_id: media_player.kuche_lautsprecher
                - choose:
                    - conditions:
                        - condition: state
                          entity_id: media_player.samuels_lautsprecher
                          state: "off"
                      sequence:
                        - service: media_player.volume_set
                          data_template:
                            volume_level: >
                              {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                            entity_id: media_player.samuels_lautsprecher
                        - delay: 00:00:02
                        - service: tts.speak
                          continue_on_error: true
                          target:
                            entity_id: tts.google_de_de
                          data_template:
                            media_player_entity_id: media_player.samuels_lautsprecher
                            message: "Fabian ist auf dem Weg nach Hause und kommt voraussichtlich um {{ states.sensor.starnberg_nord_to_zorneding.attributes.arrival }} Uhr mit {{ states.sensor.starnberg_nord_to_zorneding.attributes.delay }} min Verspätung in Zorneding an."
                        - delay: 00:00:08
                        - service: media_player.volume_set
                          data:
                            volume_level: >
                              {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                            entity_id: media_player.samuels_lautsprecher
                - choose:
                    - conditions:
                        - condition: state
                          entity_id: media_player.wohnzimmer_uhr
                          state: "off"
                      sequence:
                        - service: media_player.volume_set
                          data_template:
                            volume_level: >
                              {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) }}
                            entity_id: media_player.wohnzimmer_uhr
                        - delay: 00:00:02
                        - service: tts.speak
                          continue_on_error: true
                          target:
                            entity_id: tts.google_de_de
                          data_template:
                            media_player_entity_id: media_player.wohnzimmer_uhr
                            message: "Fabian ist auf dem Weg nach Hause und kommt voraussichtlich um {{ states.sensor.starnberg_nord_to_zorneding.attributes.arrival }} Uhr mit {{ states.sensor.starnberg_nord_to_zorneding.attributes.delay }} min Verspätung in Zorneding an."
                        - delay: 00:00:08
                        - service: media_player.volume_set
                          data:
                            volume_level: >
                              {{ ((states.input_number.lautstarke_ansagen.state) | float * 0.1) | round(1) | float - 0.2 }}
                            entity_id: media_player.wohnzimmer_uhr
    - service: notify.telegram_samuel
      data:
        message: "Fabian ist auf dem Weg nach Hause von Starnberg und kommt voraussichtlich um {{ states.sensor.starnberg_nord_to_zorneding.attributes.arrival }} Uhr mit {{ states.sensor.starnberg_nord_to_zorneding.attributes.delay }} min Verspätung in Zorneding an."

- id: notify_samuel_fabian_on_way_home_from_gil
  alias: "Notify samuel Fabian on way home from GIL"
  initial_state: false
  trigger:
    - platform: state
      entity_id: person.fabian
      from: "Arbeit Fabi GIL"
      to: "not_home"
  condition:
    - condition: time
      after: "14:00:00"
    - condition: state
      entity_id: binary_sensor.workday_sensor
      state: "on"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_samuel_fabian_on_way_home_from_gil.attributes.last_triggered) | int > 3600 }}"
    - condition: numeric_state
      entity_id: sensor.smart_life_samuel_distance
      below: 35000
  action:
    - service: notify.telegram_samuel
      data:
        message: "Fabian ist auf dem Weg nach Hause von Gilching und kommt voraussichtlich in 1,25 Stunden nach Hause."

- id: notify_samuel_fabian_on_way_home_from_muc
  alias: "Notify samuel Fabian on way home from MUC"
  initial_state: false
  trigger:
    - platform: state
      entity_id: person.fabian
      from: "Arbeit Fabi MUC"
      to: "not_home"
  condition:
    - condition: time
      after: "14:00:00"
    - condition: state
      entity_id: binary_sensor.workday_sensor
      state: "on"
    - condition: numeric_state
      entity_id: sensor.smart_life_samuel_distance
      below: 35000
  action:
    - service: notify.telegram_samuel
      data:
        message: "Fabian ist auf dem Weg nach Hause von Gräfelfing und kommt voraussichtlich in einer Stunde in Zorneding an."

- id: notify_samuel_fabian_on_way_home_from_whm
  alias: "Notify samuel Fabian on way home from WHM"
  initial_state: false
  trigger:
    - platform: state
      entity_id: person.fabian
      from: "Arbeit Fabi WHM"
      to: "not_home"
  condition:
    - condition: time
      after: "14:00:00"
    - condition: state
      entity_id: binary_sensor.workday_sensor
      state: "on"
    - condition: numeric_state
      entity_id: sensor.smart_life_samuel_distance
      below: 35000
  action:
    - service: notify.telegram_samuel
      data:
        message: "Fabian ist auf dem Weg nach Hause von Weilheim. Da er mit dem Auto fährt ist keine Zeitangabe möglich. Voraussichtlich daheim in ca. 1,5 Stunden."

- id: telegram_send_daily_weather_forecast_fabian
  alias: "Telegram send daily weather forecast fabian"
  initial_state: true
  trigger:
    - platform: state
      entity_id: device_tracker.pixel_8_pro
      from: "not_home"
      to: "home"
  condition:
    - condition: time
      before: "10:00:00"
    - condition: time
      after: "05:00:00"
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.telegram_send_daily_weather_forecast_fabian.attributes.last_triggered) | int > 36000 }}"
  action:
    #- service: weather.get_forecasts
    #  data:
    #    type: daily
    #  target:
    #    entity_id: sensor.weather_ebersberg_daily
    #  response_variable: weather_forecast
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_fabian
        disable_notification: true
        #{{ states.sensor.sensor.ebersberg_temperature_2.attributes.templow }} °C {{ '\u21F5' }} {{ weather_forecast.forecast.0.temperature }} °C
        message: >
          Wettervorhersage für heute {{ states.weather.ebersberg_ebersberg.state }} bei {{ states.weather.ebersberg_ebersberg.attributes.temperature }} °C
          *Momentan {{ states.sensor.weather_ebersberg_hourly.attributes.forecast[0].temperature }} °C*


          Niederschlag: {{ states.sensor.ebersberg_precipitation_2.state }} mm/h, Wahrscheinlichkeit: {{ states.sensor.ebersberg_precipitation_probability_2.state }} %.


          {% if states.person.samuel.state != "home" %}Samuel ist nicht daheim.{% endif %}

- id: remind_for_dnd
  alias: "remind for dnd"
  initial_state: true
  trigger:
    - platform: template
      value_template: "{{ as_timestamp(now()) | round(-1) == (as_timestamp(states.calendar.votgaming_kalender.attributes.start_time) - 198000) | round(-1) }}"
    - platform: template
      value_template: "{{ as_timestamp(now()) | round(-1) == (as_timestamp(states.calendar.votgaming_kalender.attributes.start_time) - 111600) | round(-1) }}"
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.remind_for_dnd.attributes.last_triggered) | int > 518400 }}"
      - condition: template
        value_template: "{{ ((as_timestamp(states.calendar.votgaming_kalender.attributes.start_time) - as_timestamp(now())) < 199000) and ((as_timestamp(states.calendar.votgaming_kalender.attributes.start_time) - as_timestamp(now())) > 0) }}"
      - condition: state
        entity_id: calendar.votgaming_kalender
        attribute: message
        state: "Dungeons & Dragons Spieleabend"
  action:
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_spieletreff
        disable_notification: true
        message: >
          Erinnerung: Am {%- set date = as_timestamp(states.calendar.votgaming_kalender.attributes.start_time) -%}{% set weekday = ['Sonntag','Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag'] %}{% set weekday_number = date | timestamp_custom('%w') | int %} {% set weekday_found = weekday[weekday_number] %} {{weekday_found}} ab {{ as_timestamp(states.calendar.votgaming_kalender.attributes.start_time) | timestamp_custom('%H:%M', true) }} ist {{ states.calendar.votgaming_kalender.attributes.message }}.

- id: notification_on_new_kadermanager_comment
  alias: "Notification on New Kadermanager Comment"
  trigger:
    - platform: state
      entity_id: sensor.kadermanager_zorro
  condition:
    condition: template
    #{% set old_comments = trigger.from_state.attributes.events[0].comments if trigger.from_state.attributes.events else [] %}
    #{% set new_comments = trigger.to_state.attributes.events[0].comments if trigger.to_state.attributes.events else [] %}
    #{{ new_comments | length > old_comments | length }}
    value_template: >
      {% set old_comments = trigger.from_state.attributes.events[0].comments if trigger.from_state.attributes.events else [] %}
      {% set new_comments = trigger.to_state.attributes.events[0].comments if trigger.to_state.attributes.events else [] %}
      {{ new_comments != old_comments }}
  action:
    - service: whatsapp.send_message
      continue_on_error: true
      data_template:
        clientId: default
        to: !secret whatsapp_volleyball_group
        body:
          text:
            "Neuer Kadermanager Kommentar von {{ states.sensor.kadermanager_zorro.attributes.events[0].comments[0].author }}:

            {{ states.sensor.kadermanager_zorro.attributes.events[0].comments[0].text }}"

- id: notification_on_new_kadermanager_comment_tischabwischer
  alias: "Notification on New Kadermanager Comment Tischabwischer"
  trigger:
    - platform: state
      entity_id: sensor.kadermanager_tischabwischer
  condition:
    condition: template
    value_template: >
      {% set old_comments = trigger.from_state.attributes.events[0].comments if trigger.from_state.attributes.events else [] %}
      {% set new_comments = trigger.to_state.attributes.events[0].comments if trigger.to_state.attributes.events else [] %}
      {{ new_comments != old_comments }}
  action:
    - service: whatsapp.send_message
      continue_on_error: true
      data_template:
        clientId: default
        to: !secret whatsapp_volleyball_tischabwischer
        body:
          text:
            "Neuer Kadermanager Kommentar von {{ states.sensor.kadermanager_tischabwischer.attributes.events[0].comments[0].author }}:

            {{ states.sensor.kadermanager_tischabwischer.attributes.events[0].comments[0].text }}"

- id: remind_for_volleyball_by_kadermanager
  alias: "remind for volleyball by kadermanager"
  initial_state: true
  trigger:
    - platform: template
      value_template: >
        {% set event = state_attr('sensor.kadermanager_zorro', 'events')[0] %}
        {% set event_date = event['date'] %}
        {% set event_time = event['time'] %}
        {% set event_type = event['type'] %}
        {% set event_datetime = strptime(event_date + ' ' + event_time, '%Y-%m-%d %H:%M') %}
        {% set reminder_days = 2 if event_type != 'Spiel' else 4 %}
        {% set reminder_datetime = event_datetime - timedelta(days=reminder_days) %}
        {% set rounded_reminder_datetime = reminder_datetime.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1 if reminder_datetime.minute >= 30 else 0) %}
        {% set now = now() %}
        {% set rounded_now = (now.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1 if now.minute >= 30 else 0)).replace(tzinfo=None) %}
        {{ rounded_reminder_datetime == rounded_now }}
    - platform: template
      value_template: >
        {% set event_date = state_attr('sensor.kadermanager_zorro', 'events')[0]['date'] %}
        {% set event_time = state_attr('sensor.kadermanager_zorro', 'events')[0]['time'] %}
        {% set event_datetime = strptime(event_date + ' ' + event_time, '%Y-%m-%d %H:%M') %}
        {% set reminder_datetime = event_datetime - timedelta(days=1, hours=12) %}
        {% set rounded_reminder_datetime = reminder_datetime.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1 if reminder_datetime.minute >= 30 else 0) %}

        {% set now = now() %}
        {% set rounded_now = (now.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1 if now.minute >= 30 else 0)).replace(tzinfo=None) %}

        {{ rounded_reminder_datetime == rounded_now }}
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.remind_for_volleyball_on_warm_sundays.attributes.last_triggered) | int > 302400 }}"
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.remind_for_volleyball_by_kadermanager.attributes.last_triggered) | int > 302400 }}"
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {% set events = state_attr('sensor.kadermanager_zorro', 'events') %}
                {% set event_0 = events[0] if events | length > 0 else None %}
                {% if events | length > 1 %}
                  {% set event_1 = events[1] %}
                  {% if event_0['date'] == event_1['date'] %}
                    {% if event_0['type'] == 'Spiel' %}
                      true
                    {% elif event_1['type'] == 'Spiel' %}
                      true
                    {% elif event_0['type'] == 'Sonstiges' %}
                      false
                    {% elif event_1['type'] == 'Sonstiges' %}
                      false
                    {% else %}
                      false
                    {% endif %}
                  {% else %}
                    {{ event_0['type'] == 'Spiel' }}
                  {% endif %}
                {% elif event_0 is not none %}
                  {{ event_0['type'] == 'Spiel' }}
                {% else %}
                  false
                {% endif %}
            - condition: template
              value_template: "{{ state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['type'] == 'Spiel' }}"
            - condition: template
              value_template: >
                {% set event = state_attr('sensor.kadermanager_zorro', 'events')[0] %}
                {% set date = strptime(event['date'], '%Y-%m-%d') %}
                {% set weekday = ['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag', 'Sonntag'] %}
                {% set weekday_number = date.weekday() %}
                {% set weekday_found = weekday[weekday_number] %}
                {%- set weekday_number = date.weekday() %}
                {%- set weekday_found = weekday[weekday_number] %}
                {%- set tischabwischer_event = state_attr('sensor.kadermanager_tischabwischer', 'events')[0] %}
                {%- set tischabwischer_date = strptime(tischabwischer_event['date'], '%Y-%m-%d') %}
                {%- set weekday_number_tischabwischer = tischabwischer_date.weekday() %}
                {%- set weekday_found_tischabwischer = weekday[weekday_number_tischabwischer] %}
                {{ weekday_found == weekday_found_tischabwischer }}
          sequence:
            - service: whatsapp.send_message
              continue_on_error: true
              data_template:
                clientId: default
                to: !secret whatsapp_volleyball_group
                body:
                  text:
                    "{% set events = state_attr('sensor.kadermanager_zorro', 'events') %}
                    {% set event_0 = events[0] if events | length > 0 else None %}
                    {% if events | length > 1 %}
                    {% set event_1 = events[1] %}
                    {% if event_0['date'] == event_1['date'] %}
                    {% if event_0['type'] == 'Spiel' %}
                    {%- set zorro_event = event_0 %}
                    {% elif event_1['type'] == 'Spiel' %}
                    {%- set zorro_event = event_1 %}
                    {% elif event_0['type'] == 'Sonstiges' %}
                    {%- set zorro_event = event_0 %}
                    {% elif event_1['type'] == 'Sonstiges' %}
                    {%- set zorro_event = event_1 %}
                    {% else %}
                    {%- set zorro_event = event_0 %}
                    {% endif %}
                    {% else %}
                    {%- set zorro_event = event_0 %}
                    {% endif %}
                    {% else %}
                    {%- set zorro_event = event_0 %}
                    {% endif %}

                    {%- set tischabwischer_event = state_attr('sensor.kadermanager_tischabwischer', 'events')[0] %}
                    {%- set zorro_date = strptime(zorro_event['date'], '%Y-%m-%d') %}
                    {%- set tischabwischer_date = strptime(tischabwischer_event['date'], '%Y-%m-%d') %}
                    {%- set weekday = ['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag', 'Sonntag'] %}
                    {%- set weekday_number = zorro_date.weekday() %}
                    {%- set weekday_found = weekday[weekday_number] %}
                    {%- set weekday_number_tischabwischer = tischabwischer_date.weekday() %}
                    {%- set weekday_found_tischabwischer = weekday[weekday_number_tischabwischer] %}

                    {{ weekday_found }} ab {{ zorro_event['time'] }} Uhr findet {{ zorro_event['type'] }} {{ zorro_event['title'] }} statt.
                    Bisherige Kadermanager Zusagen: {{ zorro_event['in_count'] }}.
                    {% if zorro_event['in_count'] < 8 %}


                    Es sind derzeit zu wenige Spieler mit Zusagen hinterlegt für ein Ligaspiel! Bitte tragt euch daher zeitnah ein: {{ zorro_event['link'] }}
                    {% else %}

                    Bitte im Kadermanager abstimmen nicht vergessen: {{ zorro_event['link'] }}
                    {% endif %}


                    Außerdem hat die zweite Mannschaft ebenfalls ein Ligaspiel am {{ weekday_found_tischabwischer }}: {{ tischabwischer_event['title'] }}.
                    Bisherige Kadermanager Zusagen: {{ tischabwischer_event['in_count'] }}.
                    {% if tischabwischer_event['in_count'] < 8 %}


                    Es sind derzeit zu wenige Spieler mit Zusagen hinterlegt für ein Ligaspiel! Bitte tragt euch daher zeitnah ein: {{ tischabwischer_event['link'] }}
                    {% endif %}


                    {% if 'Heim' in zorro_event['title'] and 'Heim' in tischabwischer_event['title'] %}
                    Bitte denkt daran, euch gegenseitig einen Schiedsrichter zu stellen, da es sich um zwei Heimspiele handelt, wenn noch nicht geschehen. Bitte meldet euch bei Verfügbarkeit! Danke!
                    {% elif 'Heim' in zorro_event['title'] %}
                    Mannschaft 3 hat ein Heimspiel. Bitte stellt sicher, dass ein Schiedsrichter gefunden wird und meldet euch bei Verfügbarkeit! Danke!
                    {% elif 'Heim' in tischabwischer_event['title'] %}
                    Mannschaft 2 hat ein Heimspiel. Bitte stellt sicher, dass ein Schiedsrichter gefunden wird und meldet euch bei Verfügbarkeit! Danke!
                    {% endif %}

                    {% if weekday_found == 'Dienstag' and weekday_found_tischabwischer == 'Dienstag' %}
                    Es wird daher KEIN Training stattfinden!
                    {% endif %}"
        - conditions:
            - condition: template
              value_template: >
                {% set events = state_attr('sensor.kadermanager_zorro', 'events') %}
                {% set event_0 = events[0] if events | length > 0 else None %}
                {% if events | length > 1 %}
                  {% set event_1 = events[1] %}
                  {% if event_0['date'] == event_1['date'] %}
                    {% if event_0['type'] == 'Spiel' %}
                      true
                    {% elif event_1['type'] == 'Spiel' %}
                      true
                    {% elif event_0['type'] == 'Sonstiges' %}
                      false
                    {% elif event_1['type'] == 'Sonstiges' %}
                      false
                    {% else %}
                      false
                    {% endif %}
                  {% else %}
                    true
                  {% endif %}
                {% elif event_0 is not none %}
                  {{ event_0['type'] == 'Spiel' }}
                {% else %}
                  false
                {% endif %}
          sequence:
            - service: whatsapp.send_message
              continue_on_error: true
              data_template:
                clientId: default
                to: !secret whatsapp_volleyball_zorro_group
                body:
                  text:
                    "{% set events = state_attr('sensor.kadermanager_zorro', 'events') %}
                    {% set event_0 = events[0] if events | length > 0 else None %}
                    {% if events | length > 1 %}
                    {% set event_1 = events[1] %}
                    {% if event_0['date'] == event_1['date'] %}
                    {% if event_0['type'] == 'Spiel' %}
                    {%- set zorro_event = event_0 %}
                    {% elif event_1['type'] == 'Spiel' %}
                    {%- set zorro_event = event_1 %}
                    {% elif event_0['type'] == 'Sonstiges' %}
                    {%- set zorro_event = event_0 %}
                    {% elif event_1['type'] == 'Sonstiges' %}
                    {%- set zorro_event = event_1 %}
                    {% else %}
                    {%- set zorro_event = event_0 %}
                    {% endif %}
                    {% else %}
                    {%- set zorro_event = event_0 %}
                    {% endif %}
                    {% else %}
                    {%- set zorro_event = event_0 %}
                    {% endif %}
                    {%- set date = strptime(zorro_event['date'], '%Y-%m-%d') %}
                    {%- set weekday = ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'] -%}
                    {% set weekday_number = date.weekday() %}
                    {% set weekday_found = weekday[weekday_number] %}
                    {{ weekday_found }} ab {{ zorro_event['time'] }} Uhr findet {{ zorro_event['type'] }} {{ zorro_event['title'] }} statt. Bisherige Kadermanager Zusagen: {{ zorro_event['in_count'] }}.

                    {% if zorro_event['in_count'] < 8 %}
                    Es sind derzeit zu wenige Spieler mit Zusagen hinterlegt für ein Ligaspiel! Bitte tragt euch daher zeitnah ein: {{ zorro_event['link'] }}
                    {% else %}
                    Stimmt bitte fleißig im Kadermanager ab: {{ zorro_event['link'] }}
                    {% endif %}"
            - choose:
                - conditions:
                    - condition: template
                      value_template: >
                        {% set event = state_attr('sensor.kadermanager_zorro', 'events')[0] %}
                        {% set date = strptime(event['date'], '%Y-%m-%d') %}
                        {% set weekday = ['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag', 'Sonntag'] %}
                        {% set weekday_number = date.weekday() %}
                        {% set weekday_found = weekday[weekday_number] %}
                        {{ weekday_found == 'Dienstag' }}
                  sequence:
                    - service: whatsapp.send_message
                      continue_on_error: true
                      data_template:
                        clientId: default
                        to: !secret whatsapp_volleyball_group
                        body:
                          text:
                            "{% set events = state_attr('sensor.kadermanager_zorro', 'events') %}
                            {% set event_0 = events[0] if events | length > 0 else None %}
                            {% if events | length > 1 %}
                            {% set event_1 = events[1] %}
                            {% if event_0['date'] == event_1['date'] %}
                            {% if event_0['type'] == 'Spiel' %}
                            {%- set zorro_event = event_0 %}
                            {% elif event_1['type'] == 'Spiel' %}
                            {%- set zorro_event = event_1 %}
                            {% elif event_0['type'] == 'Sonstiges' %}
                            {%- set zorro_event = event_0 %}
                            {% elif event_1['type'] == 'Sonstiges' %}
                            {%- set zorro_event = event_1 %}
                            {% else %}
                            {%- set zorro_event = event_0 %}
                            {% endif %}
                            {% else %}
                            {%- set zorro_event = event_0 %}
                            {% endif %}
                            {% else %}
                            {%- set zorro_event = event_0 %}
                            {% endif %}
                            {%- set date = strptime(zorro_event['date'], '%Y-%m-%d') %}
                            {%- set weekday = ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'] -%}
                            {% set weekday_number = date.weekday() %}
                            {% set weekday_found = weekday[weekday_number] %}

                            Mannschaft 3 hat am {{ strptime(zorro_event['date'], '%Y-%m-%d') }} {{ weekday_found }} ab {{ zorro_event['time'] }} Uhr {{ zorro_event['type'] }} {{ zorro_event['title'] }}.

                            Das Training findet somit bei Bedarf nur mit der 2. Mannschaft statt. {% if 'Heim' in zorro_event['title'] %} Wenn es freiwillige als Schiedsrichter gibt, meldet euch bitte!{% endif %}"
        - conditions:
            - condition: or
              conditions:
                - condition: template
                  value_template: "{{state_attr('sensor.weather_ebersberg_daily', 'forecast')[2]['condition'] == 'sunny' }}"
                - condition: template
                  value_template: "{{state_attr('sensor.weather_ebersberg_daily', 'forecast')[2]['condition'] == 'partlycloudy' }}"
            - condition: template
              value_template: "{{state_attr('sensor.weather_ebersberg_daily', 'forecast')[2]['temperature'] | int >= 20 }}"
            - condition: template
              value_template: "{{ now().month <= 10 and now().month >= 4 }}"
            - condition: template
              value_template: "{{ state_attr('sensor.kadermanager_zorro', 'events')[0]['type'] != 'Spiel' }}"
          sequence:
            - service: whatsapp.send_message
              continue_on_error: true
              data_template:
                clientId: default
                to: !secret whatsapp_volleyball_group
                body:
                  text: >
                    {%- set date = strptime(state_attr('sensor.kadermanager_zorro', 'events')[0]['date'], '%Y-%m-%d') -%}
                    {%- set now_date = strptime(now().strftime('%Y-%m-%d'), '%Y-%m-%d') -%}
                    {%- set days_until_event = (date - now_date).days -%}
                    {%- set weekday = ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'] -%}
                    {% set weekday_number = date.weekday() %}
                    {% set weekday_found = weekday[weekday_number] %}
                    {% if weekday_found == "Sonntag" or weekday_found == "Samstag" %}
                      {{ weekday_found }} ist das Wetter gut: {{ states.sensor.weather_ebersberg_daily.attributes.forecast[days_until_event].condition }}
                      bei {{ states.sensor.weather_ebersberg_daily.attributes.forecast[days_until_event].temperature }}° und {{ states.sensor.weather_ebersberg_daily.attributes.forecast[days_until_event].wind_speed }} km/h Wind.
                      Beachvolleyball ab {{ state_attr('sensor.kadermanager_zorro', 'events')[0]['time'] }} Uhr?
                    {% else %}
                      {%- set event_time_str = state_attr('sensor.kadermanager_zorro', 'events')[0]['time'] -%}
                      {%- set event_date_str = states.calendar.volleyballtraining.attributes.start_time[:10] -%}
                      {%- set event_datetime_str = event_date_str + ' ' + event_time_str -%}
                      {%- set event_timestamp = as_timestamp(event_datetime_str) -%}
                      {{ weekday_found }} ist das Wetter gut: {{ states.sensor.weather_ebersberg_daily.attributes.forecast[days_until_event].condition }}
                      bei {{ states.sensor.weather_ebersberg_daily.attributes.forecast[days_until_event].temperature }}° und {{ states.sensor.weather_ebersberg_daily.attributes.forecast[days_until_event].wind_speed }} km/h Wind.
                      Beachvolleyball vor dem Training ab {{ (event_timestamp - 2.5 * 3600) | timestamp_custom('%H:%M', true) }} Uhr?
                    {% endif %}

                    Bisherige Kadermanager Zusagen für {{ state_attr('sensor.kadermanager_zorro', 'events')[0]['type'] }} {{ state_attr('sensor.kadermanager_zorro', 'events')[0]['title'] }}: {{ state_attr('sensor.kadermanager_zorro', 'events')[0]['in_count'] }}
                    Stimmt bitte fleißig im Kadermanager ab:

                    {{ state_attr('sensor.kadermanager_zorro', 'events')[0]['link'] }}
      default:
        - service: whatsapp.send_message
          continue_on_error: true
          data_template:
            clientId: default
            to: !secret whatsapp_volleyball_group
            body:
              text:
                "{%- set date = strptime(state_attr('sensor.kadermanager_zorro', 'events')[0]['date'], '%Y-%m-%d') %}
                {%- set weekday = ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'] -%}
                {% set weekday_number = date.weekday() %}
                {% set weekday_found = weekday[weekday_number] %}
                {{ weekday_found }} ab {{ state_attr('sensor.kadermanager_zorro', 'events')[0]['time'] }} Uhr findet {{ state_attr('sensor.kadermanager_zorro', 'events')[0]['type'] }} {{ state_attr('sensor.kadermanager_zorro', 'events')[0]['title'] }} statt. Bisherige Kadermanager Zusagen: {{ state_attr('sensor.kadermanager_zorro', 'events')[0]['in_count'] }}


                Stimmt bitte fleißig im Kadermanager ab:

                {{ state_attr('sensor.kadermanager_zorro', 'events')[0]['link'] }}"

- id: remind_for_volleyball_by_kadermanager_2_mannschaft
  alias: "remind for volleyball by kadermanager 2. Mannschaft"
  initial_state: true
  trigger:
    - platform: template
      value_template: >
        {% set event = state_attr('sensor.kadermanager_tischabwischer', 'events')[0] %}
        {% set event_date = event['date'] %}
        {% set event_time = event['time'] %}
        {% set event_type = event['type'] %}
        {% set event_datetime = strptime(event_date + ' ' + event_time, '%Y-%m-%d %H:%M') %}
        {% set reminder_days = 2 if event_type != 'Spiel' else 5 %}
        {% set reminder_datetime = event_datetime - timedelta(days=reminder_days) %}
        {% set rounded_reminder_datetime = reminder_datetime.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1 if reminder_datetime.minute >= 30 else 0) %}
        {% set now = now() %}
        {% set rounded_now = (now.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1 if now.minute >= 30 else 0)).replace(tzinfo=None) %}
        {{ rounded_reminder_datetime == rounded_now }}
    - platform: template
      value_template: >
        {% set event_date = state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['date'] %}
        {% set event_time = state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['time'] %}
        {% set event_datetime = strptime(event_date + ' ' + event_time, '%Y-%m-%d %H:%M') %}
        {% set reminder_datetime = event_datetime - timedelta(days=1, hours=12) %}
        {% set rounded_reminder_datetime = reminder_datetime.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1 if reminder_datetime.minute >= 30 else 0) %}

        {% set now = now() %}
        {% set rounded_now = (now.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1 if now.minute >= 30 else 0)).replace(tzinfo=None) %}

        {{ rounded_reminder_datetime == rounded_now }}
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.remind_for_volleyball_by_kadermanager_2_mannschaft.attributes.last_triggered) | int > 302400 }}"
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {% set events = state_attr('sensor.kadermanager_zorro', 'events') %}
                {% set event_0 = events[0] if events | length > 0 else None %}
                {% if events | length > 1 %}
                  {% set event_1 = events[1] %}
                  {% if event_0['date'] == event_1['date'] %}
                    {{ event_0['type'] != 'Spiel' and event_1['type'] != 'Spiel' }}
                  {% else %}
                    {{ event_0['type'] != 'Spiel' }}
                  {% endif %}
                {% elif event_0 is not none %}
                  {{ event_0['type'] != 'Spiel' }}
                {% else %}
                  true
                {% endif %}
            - condition: template
              value_template: "{{ state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['type'] == 'Spiel' }}"
          sequence:
            - service: whatsapp.send_message
              continue_on_error: true
              data_template:
                clientId: default
                to: !secret whatsapp_volleyball_tischabwischer
                body:
                  text:
                    "{%- set date = strptime(state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['date'], '%Y-%m-%d') %}
                    {%- set weekday = ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'] -%}
                    {% set weekday_number = date.weekday() %}
                    {% set weekday_found = weekday[weekday_number] %}
                    {{ weekday_found }} ab {{ state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['time'] }} Uhr findet {{ state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['type'] }} {{ state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['title'] }} statt. Bisherige Kadermanager Zusagen: {{ state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['in_count'] }}

                    {% if state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['in_count'] < 8 %}
                    Es sind derzeit zu wenige Spieler mit Zusagen hinterlegt für ein Ligaspiel! Bitte tragt euch daher zeitnah ein: {{ state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['link'] }}
                    {% else %}
                    Stimmt bitte fleißig im Kadermanager ab: {{ state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['link'] }}
                    {% endif %}"
            - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['type'] == 'Spiel' }}"
                    - condition: template
                      value_template: >
                        {% set event = state_attr('sensor.kadermanager_tischabwischer', 'events')[0] %}
                        {% set date = strptime(event['date'], '%Y-%m-%d') %}
                        {% set weekday = ['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag', 'Sonntag'] %}
                        {% set weekday_number = date.weekday() %}
                        {% set weekday_found = weekday[weekday_number] %}
                        {{ weekday_found == 'Dienstag' }}
                  sequence:
                    - service: whatsapp.send_message
                      continue_on_error: true
                      data_template:
                        clientId: default
                        to: !secret whatsapp_volleyball_group
                        body:
                          text:
                            "Mannschaft 2 hat am {%- set date = strptime(state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['date'], '%Y-%m-%d') %}
                            {%- set weekday = ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'] -%}
                            {% set weekday_number = date.weekday() %}
                            {% set weekday_found = weekday[weekday_number] %}
                            {{ weekday_found }} ab {{ state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['time'] }} Uhr {{ state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['type'] }} {{ state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['title'] }}.

                            Das Training findet somit bei Bedarf nur mit der 3. Mannschaft statt. {% set event = state_attr('sensor.kadermanager_tischabwischer', 'events')[0] %}{% if 'Heim' in event['title'] %} Wenn es freiwillige als Schiedsrichter gibt, meldet euch bitte!{% endif %}"
      default:
        - service: whatsapp.send_message
          continue_on_error: true
          data_template:
            clientId: default
            to: !secret whatsapp_volleyball_tischabwischer
            body:
              text:
                "{%- set date = strptime(state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['date'], '%Y-%m-%d') %}
                {%- set weekday = ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'] -%}
                {% set weekday_number = date.weekday() %}
                {% set weekday_found = weekday[weekday_number] %}
                {{ weekday_found }} ab {{ state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['time'] }} Uhr findet {{ state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['type'] }} {{ state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['title'] }} statt.

                Bisherige Kadermanager Zusagen: {{ state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['in_count'] }}


                Stimmt bitte fleißig im Kadermanager ab:

                {{ state_attr('sensor.kadermanager_tischabwischer', 'events')[0]['link'] }}"

- id: kadermanager_participant_count_reminder
  alias: "Remind for Kadermanager participant count"
  initial_state: true
  trigger:
    - platform: template
      value_template: >
        {% set event_date = state_attr('sensor.kadermanager_zorro', 'events')[0]['date'] %}
        {% set event_time = state_attr('sensor.kadermanager_zorro', 'events')[0]['time'] %}
        {% set event_datetime = strptime(event_date + ' ' + event_time, '%Y-%m-%d %H:%M') %}
        {% set reminder_datetime = event_datetime - timedelta(hours=3) %}
        {% set rounded_reminder_datetime = reminder_datetime.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1 if reminder_datetime.minute >= 30 else 0) %}

        {% set now = now() %}
        {% set rounded_now = (now.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1 if now.minute >= 30 else 0)).replace(tzinfo=None) %}

        {{ rounded_reminder_datetime == rounded_now }}
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.remind_for_participant_count_on_kadermanager.attributes.last_triggered) | int > 64800 }}"
      - condition: template
        value_template: "{{ state_attr('sensor.kadermanager_zorro', 'events')[0]['type'] != 'Spiel' }}"
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {% set declined_players = state_attr('sensor.kadermanager_zorro', 'events')[0]['players']['declined_players'] %}
                {{ 'Fabian S.' not in declined_players }}
            - condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.smart_life_fabian_distance
                  below: 30000
                - condition: state
                  entity_id: person.fabian
                  state: "home"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_fabian
                data:
                  disable_web_page_preview: true
                message: >
                  [Kadermanager]({{ state_attr('sensor.kadermanager_zorro', 'events')[0]['link'] }})
                  Zusagen für heute: {{ state_attr('sensor.kadermanager_zorro', 'events')[0]['in_count'] }}
                  {% set accepted_players = state_attr('sensor.kadermanager_zorro', 'events')[0]['players']['accepted_players'] %}
                  {% if accepted_players %}


                  Zugesagt haben:

                  {{ accepted_players | join(', ') }}
                  {% endif %}

                  {% set declined_players = state_attr('sensor.kadermanager_zorro', 'events')[0]['players']['declined_players'] %}
                  {% if declined_players %}

                  Abgesagt haben:

                  {{ declined_players | join(', ') }}
                  {% endif %}
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {% set declined_players = state_attr('sensor.kadermanager_zorro', 'events')[0]['players']['declined_players'] %}
                {{ 'Samuel K' not in declined_players }}
            - condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.smart_life_samuel_distance
                  below: 20000
                - condition: state
                  entity_id: person.samuel
                  state: "home"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_samuel
                data:
                  disable_web_page_preview: true
                message: >
                  [Kadermanager]({{ state_attr('sensor.kadermanager_zorro', 'events')[0]['link'] }})
                  Zusagen für heute: {{ state_attr('sensor.kadermanager_zorro', 'events')[0]['in_count'] }}
                  {% set accepted_players = state_attr('sensor.kadermanager_zorro', 'events')[0]['players']['accepted_players'] %}
                  {% if accepted_players %}


                  Zugesagt haben:

                  {{ accepted_players | join(', ') }}
                  {% endif %}

                  {% set declined_players = state_attr('sensor.kadermanager_zorro', 'events')[0]['players']['declined_players'] %}
                  {% if declined_players %}

                  Abgesagt haben:

                  {{ declined_players | join(', ') }}
                  {% endif %}
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {% set event = state_attr('sensor.kadermanager_zorro', 'events')[0] %}
                {% set date = strptime(event['date'], '%Y-%m-%d') %}
                {% set weekday = ['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag', 'Sonntag'] %}
                {% set weekday_number = date.weekday() %}
                {% set weekday_found = weekday[weekday_number] %}
                {{ weekday_found == 'Dienstag' }}
            - condition: template
              value_template: >
                {% set declined_players = state_attr('sensor.kadermanager_zorro', 'events')[0]['players']['declined_players'] %}
                {{ 'Anton' not in declined_players }}
          sequence:
            - service: whatsapp.send_message
              continue_on_error: true
              data_template:
                clientId: default
                to: !secret whatsapp_anton
                body:
                  text:
                    "Kadermanager ({{ state_attr('sensor.kadermanager_zorro', 'events')[0]['link'] }})
                    Zusagen für heute: {{ state_attr('sensor.kadermanager_zorro', 'events')[0]['in_count'] }}
                    {% set accepted_players = state_attr('sensor.kadermanager_zorro', 'events')[0]['players']['accepted_players'] %}
                    {% if accepted_players %}


                    Zugesagt haben:

                    {{ accepted_players | join(', ') }}
                    {% endif %}

                    {% set declined_players = state_attr('sensor.kadermanager_zorro', 'events')[0]['players']['declined_players'] %}
                    {% if declined_players %}

                    Abgesagt haben:

                    {{ declined_players | join(', ') }}
                    {% endif %}"

- id: remind_for_volleyball
  alias: "remind for volleyball"
  initial_state: false
  trigger:
    - platform: template
      value_template: "{{ as_timestamp(now()) | round(-2) == (as_timestamp(states.calendar.volleyballtraining.attributes.start_time) - 172800) | round(-2) }}"
    - platform: template
      value_template: "{{ as_timestamp(now()) | round(-2) == (as_timestamp(states.calendar.volleyballtraining.attributes.start_time) - 140400) | round(-2) }}"
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ ((as_timestamp(states.calendar.volleyballtraining.attributes.start_time) - as_timestamp(now())) < 173000) and ((as_timestamp(states.calendar.volleyballtraining.attributes.start_time) - as_timestamp(now())) > 0) }}"
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.remind_for_volleyball_on_warm_sundays.attributes.last_triggered) | int > 140200 }}"
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.remind_for_volleyball.attributes.last_triggered) | int > 140200 }}"
  action:
    #- service: shell_command.unpin_all_telegram
    #  data_template:
    #    telegram_bot_api: !secret telegram_bot_api
    #    chat_id: !secret telegram_volleyball
    - service: telegram_bot.send_poll
      data_template:
        target: !secret telegram_volleyball
        question:
          "{%- set date = as_timestamp(states.calendar.volleyballtraining.attributes.start_time) -%}
          {% set weekday = ['Sonntag','Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag'] %} {% set weekday_number = date | timestamp_custom('%w') | int %}
          {% set weekday_found = weekday[weekday_number] %} {{weekday_found}} ab {{ as_timestamp(states.calendar.volleyballtraining.attributes.start_time) | timestamp_custom('%H:%M', true) }} Uhr findet {{ states.calendar.volleyballtraining.attributes.message }} statt. Ich komme? Kadermanagerabstimmung nicht vergessen."
        options:
          - "Ja"
          - "Nein"
          - "Vielleicht"
          - "Nur zeitweise/verspätet"
        is_anonymous: false
        allows_multiple_answers: false
        disable_notification: true
    - choose:
        - conditions:
            - condition: template
              value_template: "{{not is_state_attr('calendar.volleyballtraining', 'description', '')}}"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_volleyball
                data:
                  disable_web_page_preview: true
                message: >
                  Zusatzinfos: {{ states.calendar.volleyballtraining.attributes.description }}

- id: remind_for_volleyball_on_warm_sundays
  alias: "Remind for Volleyball on warm Sundays"
  initial_state: false
  trigger:
    - platform: time
      at: "13:00:00"
  condition:
    condition: and
    conditions:
      - condition: time
        weekday:
          - fri
      - condition: or
        conditions:
          - condition: template
            value_template: "{{state_attr('sensor.weather_ebersberg_daily', 'forecast')[2]['condition'] == 'sunny' }}"
          - condition: template
            value_template: "{{state_attr('sensor.weather_ebersberg_daily', 'forecast')[2]['condition'] == 'partlycloudy' }}"
      - condition: template
        value_template: "{{state_attr('sensor.weather_ebersberg_daily', 'forecast')[2]['temperature'] | int >= 20 }}"
      - condition: template
        value_template: "{{ now().month <= 10 and now().month >= 4 }}"
  action:
    - service: shell_command.unpin_all_telegram
      data_template:
        telegram_bot_api: !secret telegram_bot_api
        chat_id: !secret telegram_volleyball
    - service: telegram_bot.send_poll
      data_template:
        target: !secret telegram_volleyball
        question:
          "{%- set date = as_timestamp(states.calendar.volleyballtraining.attributes.start_time) -%}{% set weekday = ['Sonntag','Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag'] %}
          {% set weekday_number = date | timestamp_custom('%w') | int %} {% set weekday_found = weekday[weekday_number] %} {{weekday_found}} ist das Wetter gut: {{ states.sensor.weather_ebersberg_daily.attributes.forecast[2].condition }}
          bei {{ states.sensor.weather_ebersberg_daily.attributes.forecast[2].temperature }}° und {{ states.sensor.weather_ebersberg_daily.attributes.forecast[2].wind_speed }} km/h Wind.
          Ich komme zum Beachvolleyball ab {{ as_timestamp(states.calendar.volleyballtraining.attributes.start_time) | timestamp_custom('%H:%M', true) }} Uhr?"
        options:
          - "Ja"
          - "Nein"
          - "Vielleicht"
          - "Nur zeitweise/verspätet"
        is_anonymous: false
        allows_multiple_answers: false
        disable_notification: true
    - choose:
        - conditions:
            - condition: template
              value_template: "{{not is_state_attr('calendar.volleyballtraining', 'description', '')}}"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_volleyball
                data:
                  disable_web_page_preview: true
                message: >
                  Zusatzinfos: {{ states.calendar.volleyballtraining.attributes.description }}
    - service: whatsapp.send_message
      continue_on_error: true
      data_template:
        clientId: default
        to: !secret whatsapp_volleyball_group
        body:
          text:
            "{%- set date = as_timestamp(states.calendar.volleyballtraining.attributes.start_time) -%}{% set weekday = ['Sonntag','Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag'] %}
            {% set weekday_number = date | timestamp_custom('%w') | int %} {% set weekday_found = weekday[weekday_number] %} {{weekday_found}} ist das Wetter gut: {{ states.sensor.weather_ebersberg_daily.attributes.forecast[2].condition }}
            bei {{ states.sensor.weather_ebersberg_daily.attributes.forecast[2].temperature }}° und {{ states.sensor.weather_ebersberg_daily.attributes.forecast[2].wind_speed }} km/h Wind. Beachvolleyball ab {{ as_timestamp(states.calendar.volleyballtraining.attributes.start_time) | timestamp_custom('%H:%M', true) }}?"

- id: remind_for_juz
  alias: "remind for juz"
  initial_state: true
  trigger:
    - platform: template
      value_template: "{{ as_timestamp(now()) | round(-2) == (as_timestamp(states.calendar.juz_zorneding_public.attributes.start_time) - 111600) | round(-2) }}"
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ ((as_timestamp(states.calendar.juz_zorneding_public.attributes.start_time) - as_timestamp(now())) < 112600) and ((as_timestamp(states.calendar.juz_zorneding_public.attributes.start_time) - as_timestamp(now())) > 0) }}"
  action:
    - service: telegram_bot.send_poll
      data_template:
        target: !secret telegram_chat_juz_group
        question:
          "Das JUZ hat {%- set date = as_timestamp(states.calendar.juz_zorneding_public.attributes.start_time) -%}{% set weekday = ['Sonntag','Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag'] %}
          {% set weekday_number = date | timestamp_custom('%w') | int %} {% set weekday_found = weekday[weekday_number] %} {{weekday_found}} ab {{ as_timestamp(states.calendar.juz_zorneding_public.attributes.start_time) | timestamp_custom('%H:%M', true) }}
          Uhr für {{ states.calendar.juz_zorneding_public.attributes.message }} geöffnet. Wir freuen uns auf euren Besuch! Ich komme?"
        options:
          - "Ja"
          - "Nein"
          - "Vielleicht"
        is_anonymous: false
        allows_multiple_answers: false
        disable_notification: true
    - choose:
        - conditions:
            - condition: template
              value_template: "{{not is_state_attr('calendar.juz_zorneding_public', 'description', '')}}"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_juz_group
                message: >
                  Zusatzinfo: {{ states.calendar.juz_zorneding_public.attributes.description }}
            - service: whatsapp.send_message
              continue_on_error: true
              data_template:
                clientId: default
                to: !secret whatsapp_chat_juz_group
                body:
                  text:
                    "Das JUZ hat{%- set date = as_timestamp(states.calendar.juz_zorneding_public.attributes.start_time) -%}{% set weekday = ['Sonntag','Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag'] %} {% set weekday_number = date | timestamp_custom('%w') | int %} {% set weekday_found = weekday[weekday_number] %} {{weekday_found}} ab {{ as_timestamp(states.calendar.juz_zorneding_public.attributes.start_time) | timestamp_custom('%H:%M', true) }} Uhr für {{ states.calendar.juz_zorneding_public.attributes.message }} geöffnet. Wir freuen uns auf euren Besuch!
                    Zusatzinfo: {{ states.calendar.juz_zorneding_public.attributes.description }}"
      default:
        - service: whatsapp.send_message
          continue_on_error: true
          data_template:
            clientId: default
            to: !secret whatsapp_chat_juz_group
            body:
              text: "Das JUZ hat{%- set date = as_timestamp(states.calendar.juz_zorneding_public.attributes.start_time) -%}{% set weekday = ['Sonntag','Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag'] %} {% set weekday_number = date | timestamp_custom('%w') | int %} {% set weekday_found = weekday[weekday_number] %} {{weekday_found}} ab {{ as_timestamp(states.calendar.juz_zorneding_public.attributes.start_time) | timestamp_custom('%H:%M', true) }} Uhr für {{ states.calendar.juz_zorneding_public.attributes.message }} geöffnet. Wir freuen uns auf euren Besuch!"

- id: send_juz_mails_to_telegram
  alias: "send juz mails to telegram"
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.juz_outlook
      attribute: data
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: sensor.juz_outlook
        above: "0"
      - condition: not
        conditions:
          - condition: state
            entity_id: sensor.juz_outlook
            state: unavailable
          - condition: template
            value_template: "{{ trigger.to_state.state|int > trigger.from_state.state|int }}"
          - condition: state
            entity_id: sensor.juz_outlook
            attribute: data
            state: ""
          - condition: template
            value_template: "{{'noreply@ionos.de' in state_attr('sensor.juz_outlook', 'data')[0]['sender'] }}"
          - condition: template
            value_template: "{{'Angenommen: ' in state_attr('sensor.juz_outlook', 'data')[0]['subject'] }}"
          - condition: template
            value_template: "{{'Abgelehnt: ' in state_attr('sensor.juz_outlook', 'data')[0]['subject'] }}"
          - condition: template
            value_template: "{{'Willkommen bei OTTO UP Plus' in state_attr('sensor.juz_outlook', 'data')[0]['subject'] }}"
          - condition: template
            value_template: "{{'OTTO-Kundenkonto: Bitte E-Mail-Adresse bestätigen.' in state_attr('sensor.juz_outlook', 'data')[0]['subject'] }}"
          - condition: template
            value_template: "{{'Änderung der Datennutzung' in state_attr('sensor.juz_outlook', 'data')[0]['subject'] }}"
          - condition: template
            value_template: "{{'Deine Rechnung von OTTO' in state_attr('sensor.juz_outlook', 'data')[0]['subject'] }}"
          - condition: template
            value_template: "{{'Deine Bestellung wurde versandt.' in state_attr('sensor.juz_outlook', 'data')[0]['subject'] }}"
          - condition: template
            value_template: "{{'Vorläufig angenommen: ' in state_attr('sensor.juz_outlook', 'data')[0]['subject'] }}"
          - condition: template
            value_template: "{{'Aktualisierte Einladung: ' in state_attr('sensor.juz_outlook', 'data')[0]['subject'] }}"
          - condition: template
            value_template: "{{'Termin abgesagt: ' in state_attr('sensor.juz_outlook', 'data')[0]['subject'] }}"
          - condition: template
            value_template: "{{'Undeliverable: ' in state_attr('sensor.juz_outlook', 'data')[0]['subject'] }}"
  action:
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_juz_mail
        message: >
          Neue Mail vom {{ as_timestamp(state_attr('sensor.juz_outlook', 'data')[0]['received']) | timestamp_custom("%d.%m.%Y %H:%M", true) }}:

          Absender: {{state_attr('sensor.juz_outlook', 'data')[0]['sender']}}


          *Betreff:* {{state_attr('sensor.juz_outlook', 'data')[0]['subject']}}

          *Inhalt:* {{state_attr('sensor.juz_outlook', 'data')[0]['body'] | truncate(450)}}

- id: send_5freunde_mails_to_telegram
  alias: "send 5freunde mails to telegram"
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.5freunde_outlook
      attribute: data
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: sensor.5freunde_outlook
        above: "0"
      - condition: not
        conditions:
          - condition: state
            entity_id: sensor.5freunde_outlook
            state: unavailable
          - condition: state
            entity_id: sensor.5freunde_outlook
            attribute: data
            state: ""
          - condition: template
            value_template: "{{ trigger.to_state.state|int > trigger.from_state.state|int }}"
          - condition: template
            value_template: "{{'Angenommen: ' in state_attr('sensor.5freunde_outlook', 'data')[0]['subject'] }}"
          - condition: template
            value_template: "{{'Abgelehnt: ' in state_attr('sensor.5freunde_outlook', 'data')[0]['subject'] }}"
          - condition: template
            value_template: "{{'Vorläufig angenommen: ' in state_attr('sensor.5freunde_outlook', 'data')[0]['subject'] }}"
          - condition: template
            value_template: "{{'Aktualisierte Einladung: ' in state_attr('sensor.5freunde_outlook', 'data')[0]['subject'] }}"
          - condition: template
            value_template: "{{'Termin abgesagt: ' in state_attr('sensor.5freunde_outlook', 'data')[0]['subject'] }}"
  action:
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: template
                  value_template: "{{'PayPal' in state_attr('sensor.5freunde_outlook', 'data')[0]['body'] }}"
                - condition: template
                  value_template: "{{'service@paypal.de' in state_attr('sensor.5freunde_outlook', 'data')[0]['sender'] }}"
          sequence:
            - choose:
                - conditions:
                    - condition: or
                      conditions:
                        - condition: template
                          value_template: "{{'Erhaltener Betrag' in state_attr('sensor.5freunde_outlook', 'data')[0]['body'] }}"
                  sequence:
                    - choose:
                        - conditions:
                            - condition: or
                              conditions:
                                - condition: template
                                  value_template: "{{'Mitteilung von' in state_attr('sensor.5freunde_outlook', 'data')[0]['body'] }}"
                          sequence:
                            - service: telegram_bot.send_message
                              data_template:
                                target: !secret telegram_chat_juz_leiter
                                message: >
                                  Neue PayPal *Einnahme* vom {{ as_timestamp(state_attr('sensor.5freunde_outlook', 'data')[0]['received']) | timestamp_custom("%d.%m.%Y %H:%M", true) }}:

                                  {{ state_attr('sensor.5freunde_outlook', 'data')[0]['body'] | regex_findall_index(find='(\d+\,?\d+) € EUR', index=0, ignorecase=False) }} € von: {{ state_attr('sensor.5freunde_outlook', 'data')[0]['body'] | regex_findall_index(find='(?<=Hallo Fabian Seitz!).*?(?= hat)', index=0, ignorecase=False) }}

                                  Für: {{ state_attr('sensor.5freunde_outlook', 'data')[0]['body'] | regex_findall_index(find='(?<=:).*?(?=Transaktionsdetails)', index=0, ignorecase=False) }}

                                  #PayPal #PayPalEinnahme
                      default:
                        - service: telegram_bot.send_message
                          data_template:
                            target: !secret telegram_chat_juz_leiter
                            message: >
                              Neue PayPal *Einnahme* vom {{ as_timestamp(state_attr('sensor.5freunde_outlook', 'data')[0]['received']) | timestamp_custom("%d.%m.%Y %H:%M", true) }}:

                              {{ state_attr('sensor.5freunde_outlook', 'data')[0]['body'] | regex_findall_index(find='(\d+\,?\d+) € EUR', index=0, ignorecase=False) }} € von: {{ state_attr('sensor.5freunde_outlook', 'data')[0]['body'] | regex_findall_index(find='(?<=Hallo Fabian Seitz!).*?(?= hat)', index=0, ignorecase=False) }}

                              #PayPal #PayPalEinnahme
                    - choose:
                        - conditions:
                            - condition: template
                              value_template: "{{'Gebühr' in state_attr('sensor.5freunde_outlook', 'data')[0]['body'] }}"
                          sequence:
                            - service: telegram_bot.send_message
                              data_template:
                                target: !secret telegram_chat_juz_leiter
                                message: >
                                  Achtung! Person hat nicht per PayPal Freunde bezahlt, daher sind Gebühren angefallen!
                - conditions:
                    - condition: or
                      conditions:
                        - condition: template
                          value_template: "{{'Geld gesendet' in state_attr('sensor.5freunde_outlook', 'data')[0]['body'] }}"
                  sequence:
                    - choose:
                        - conditions:
                            - condition: or
                              conditions:
                                - condition: template
                                  value_template: "{{'Ihre Mitteilung an' in state_attr('sensor.5freunde_outlook', 'data')[0]['body'] }}"
                          sequence:
                            - service: telegram_bot.send_message
                              data_template:
                                target: !secret telegram_chat_juz_leiter
                                message: >
                                  Neue PayPal *Ausgabe* vom {{ as_timestamp(state_attr('sensor.5freunde_outlook', 'data')[0]['received']) | timestamp_custom("%d.%m.%Y %H:%M", true) }}:

                                  {{ state_attr('sensor.5freunde_outlook', 'data')[0]['body'] | regex_findall_index(find='(\d+\,?\d+) € EUR', index=0, ignorecase=False) }} € an: {{ state_attr('sensor.5freunde_outlook', 'data')[0]['body'] | regex_findall_index(find='(?<= EUR an ).*?(?= gesendet)', index=0, ignorecase=False) }}

                                  Für: {{ state_attr('sensor.5freunde_outlook', 'data')[0]['body'] | regex_findall_index(find='(?<=Ihre Mitteilung an ).*?(?=Transaktionsdetails)', index=0, ignorecase=False) }}

                                  #PayPal #PayPalAusgabe
                      default:
                        - service: telegram_bot.send_message
                          data_template:
                            target: !secret telegram_chat_juz_leiter
                            message: >
                              Neue PayPal *Ausgabe* vom {{ as_timestamp(state_attr('sensor.5freunde_outlook', 'data')[0]['received']) | timestamp_custom("%d.%m.%Y %H:%M", true) }}:

                              {{ state_attr('sensor.5freunde_outlook', 'data')[0]['body'] | regex_findall_index(find='(\d+\,?\d+) € EUR', index=0, ignorecase=False) }} € an: {{ state_attr('sensor.5freunde_outlook', 'data')[0]['body'] | regex_findall_index(find='(?<= EUR an ).*?(?= gesendet)', index=0, ignorecase=False) }}

                              #PayPal #PayPalAusgabe
                - conditions:
                    - condition: or
                      conditions:
                        - condition: template
                          value_template: "{{'Einkaufsbetrag' in state_attr('sensor.5freunde_outlook', 'data')[0]['body'] }}"
                  sequence:
                    - service: telegram_bot.send_message
                      data_template:
                        target: !secret telegram_chat_juz_leiter
                        message: >
                          Neue PayPal *Ausgabe* vom {{ as_timestamp(state_attr('sensor.5freunde_outlook', 'data')[0]['received']) | timestamp_custom("%d.%m.%Y %H:%M", true) }}:

                          {{ state_attr('sensor.5freunde_outlook', 'data')[0]['body'] | regex_findall_index(find='(\d+\,?\d+) EUREmpfänger:', index=0, ignorecase=False) }} € an: {{ state_attr('sensor.5freunde_outlook', 'data')[0]['body'] | regex_findall_index(find='(?<= EUR an ).*?(?= autorisiert)', index=0, ignorecase=False) }}

                          #PayPal #PayPalAusgabe
              default:
                - service: telegram_bot.send_message
                  data_template:
                    target: !secret telegram_chat_juz_leiter
                    message: >
                      Neue PayPal Mail vom {{ as_timestamp(state_attr('sensor.5freunde_outlook', 'data')[0]['received']) | timestamp_custom("%d.%m.%Y %H:%M", true) }}:

                      *Inhalt:* {{state_attr('sensor.5freunde_outlook', 'data')[0]['body'] | truncate(400)}}

                      #PayPal
        - conditions:
            - condition: or
              conditions:
                - condition: template
                  value_template: "{{'juzzorneding@gmail.com' in state_attr('sensor.5freunde_outlook', 'data')[0]['to'] }}"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                target: !secret telegram_chat_juz_leiter
                message: >
                  Neue JUZ Gmail Mail vom {{ as_timestamp(state_attr('sensor.5freunde_outlook', 'data')[0]['received']) | timestamp_custom("%d.%m.%Y %H:%M", true) }}:

                  *Absender:* {{state_attr('sensor.5freunde_outlook', 'data')[0]['sender']}}


                  *Betreff:* {{state_attr('sensor.5freunde_outlook', 'data')[0]['subject']}}

                  *Inhalt:* {{state_attr('sensor.5freunde_outlook', 'data')[0]['body'] | truncate(400)}}
      default:
        - service: telegram_bot.send_message
          data_template:
            target: !secret telegram_chat_5friends
            message: >
              Neue Mail vom {{ as_timestamp(state_attr('sensor.5freunde_outlook', 'data')[0]['received']) | timestamp_custom("%d.%m.%Y %H:%M", true) }}:

              *Absender:* {{state_attr('sensor.5freunde_outlook', 'data')[0]['sender']}}

              *Empfänger:* {{state_attr('sensor.5freunde_outlook', 'data')[0]['to'][0]}}


              *Betreff:* {{state_attr('sensor.5freunde_outlook', 'data')[0]['subject']}}

              *Inhalt:* {{state_attr('sensor.5freunde_outlook', 'data')[0]['body'] | truncate(400)}}
