  - alias: 'Turn off everything if nobody is at home'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.google_maps_112174659110860535869
        from: 'home'
        to: 'not_home'
        for:
          minutes: 1
      - platform: state
        entity_id:
          - device_tracker.google_maps_112056758146194246561
        from: 'home'
        to: 'not_home'
        for:
          minutes: 1
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ states.device_tracker.google_maps_112174659110860535869.state != 'home' }}"
        - condition: template
          value_template: "{{ states.device_tracker.google_maps_112056758146194246561.state != 'home' }}"
        - condition: state
          entity_id: device_tracker.fabianphone
          state: not_home
        - condition: state
          entity_id: device_tracker.nessiephone
          state: not_home
    action:
      - service: light.turn_off
        data:
          entity_id: all
      - service: switch.turn_off
        data:
          entity_id: group.wohnzimmer
      - service: switch.turn_off
        data:
          entity_id: switch.switch_bett
      - service: switch.turn_off
        data:
          entity_id: switch.lichtschalter
      - service: switch.turn_off
        data:
          entity_id: switch.deckenlampe
      - service: switch.turn_off
        data:
          entity_id: switch.sonoff_100018bc6c
      - service: switch.turn_off
        data:
          entity_id: switch.regal_leds
      - service: switch.turn_off
        data:
          entity_id: switch.ventilator
      # - service: climate.set_away_mode
      #   data:
      #     entity_id: climate.wohnzimmer
      #     away_mode: 'on'
      # - service: climate.set_away_mode
      #   data:
      #     entity_id: climate.schlafzimmer
      #     away_mode: 'on'
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.kuehlschrank_keller
      - service: media_player.turn_off
        data:
          entity_id: media_player.wohnzimmer_mini
      - service: media_player.turn_off
        data:
          entity_id: media_player.schlafzimmer
      - service: media_player.turn_off
        data:
          entity_id: media_player.gastezimmer_mini

  - alias: 'Turn off fabian pc if nobody is at home'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.google_maps_112174659110860535869
        from: 'home'
        to: 'not_home'
        for:
          minutes: 2
      - platform: state
        entity_id:
          - device_tracker.google_maps_112056758146194246561
        from: 'home'
        to: 'not_home'
        for:
          minutes: 2
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ states.device_tracker.google_maps_112174659110860535869.state != 'home' }}"
        - condition: template
          value_template: "{{ states.device_tracker.google_maps_112056758146194246561.state != 'home' }}"
        - condition: state
          entity_id: device_tracker.fabianpc
          state: home
    action:
      - service: notify.telegram_fabian
        data:
          message: "Keiner ist mehr zu Hause! Fabian-PC ist allerdings noch an!"
          data:
            inline_keyboard:
            - 'Herunterfahren:/shutdownfpc, Ruhezustand:/hibernatefpc'

  - alias: 'If nobody is at home and nessie pc is on'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.google_maps_112174659110860535869
        from: 'home'
        to: 'not_home'
        for:
          minutes: 2
      - platform: state
        entity_id:
          - device_tracker.google_maps_112056758146194246561
        from: 'home'
        to: 'not_home'
        for:
          minutes: 2
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ states.device_tracker.google_maps_112174659110860535869.state != 'home' }}"
        - condition: template
          value_template: "{{ states.device_tracker.google_maps_112056758146194246561.state != 'home' }}"
        - condition: state
          entity_id: device_tracker.nessiepc
          state: home
    action:
      - service: notify.telegram_fabian
        data:
          message: "Keiner ist mehr zu Hause. Nessie-PC ist allerdings noch an und wurde nicht ausgeschaltet!"
          data:
            inline_keyboard:
            - 'Herunterfahren:/shutdownfpc, Ruhezustand:/hibernatefpc'
      - service: notify.telegram_nessie
        data:
          message: "Keiner ist mehr zu Hause. Nessie-PC ist allerdings noch an und wurde nicht ausgeschaltet!"
          data:
            inline_keyboard:
            - 'Herunterfahren:/shutdownnpc, Ruhezustand:/hibernatenpc'

  - alias: 'If nobody is at home and nessie pc strom is on'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.nessiepc
        from: 'home'
        to: 'not_home'
        for:
          minutes: 2
      - platform: state
        entity_id:
          - device_tracker.google_maps_112174659110860535869
        from: 'home'
        to: 'not_home'
      - platform: state
        entity_id:
          - device_tracker.google_maps_112056758146194246561
        from: 'home'
        to: 'not_home'
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ states.device_tracker.google_maps_112174659110860535869.state != 'home' }}"
        - condition: template
          value_template: "{{ states.device_tracker.google_maps_112056758146194246561.state != 'home' }}"
        - condition: state
          entity_id: device_tracker.nessiepc
          state: 'not_home'
          for:
            minutes: 2
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.nessie_pc

  - alias: 'If nobody is at home and fabian pc strom is on'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.fabianpc
        from: 'home'
        to: 'not_home'
        for:
          minutes: 2
      - platform: state
        entity_id:
          - device_tracker.google_maps_112174659110860535869
        from: 'home'
        to: 'not_home'
      - platform: state
        entity_id:
          - device_tracker.google_maps_112056758146194246561
        from: 'home'
        to: 'not_home'
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ states.device_tracker.google_maps_112174659110860535869.state != 'home' }}"
        - condition: template
          value_template: "{{ states.device_tracker.google_maps_112056758146194246561.state != 'home' }}"
        - condition: state
          entity_id: device_tracker.fabianpc
          state: 'not_home'
          for:
            minutes: 2
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.fabian_strom

  - alias: 'Turn on ventilator if coming home'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.google_maps_112174659110860535869
        from: 'not_home'
        to: 'home'
      - platform: state
        entity_id:
          - device_tracker.google_maps_112056758146194246561
        from: 'not_home'
        to: 'home'
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ states.sensor.openweather_temperature.temperature >= '22' }}"
        - condition: time
          after: '12:00:00'
          before: '21:00:00'
    action:
      - service: switch.turn_on
        data:
          entity_id: switch.ventilator

  - alias: 'Turn on lights if coming home'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.google_maps_112174659110860535869
        from: 'not_home'
        to: 'home'
      - platform: state
        entity_id:
          - device_tracker.google_maps_112056758146194246561
        from: 'not_home'
        to: 'home'
    condition:
      condition: and
      conditions:
      - condition: time
        before: '21:45:00'
      - condition: sun
        after: sunset
      - condition: state
        entity_id: sensor.fscharging
        state: 'not_charging'
      - condition: state
        entity_id: sensor.vkcharging
        state: 'not_charging'
    action:
      - service: light.turn_on
        data:
          entity_id: group.wohnzimmer

  - alias: 'Turn off light at night - notify'
    initial_state: true
    trigger:
      platform: time
      at: '00:30:00'
    condition:
      - condition: template
        value_template: >
          {% set domain = 'light' %}
          {% set state = 'on' %}
          {{ states[domain] | selectattr('state','eq', state) | list | count > 1 }}
    action:
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_fabian
          message: 'Alle Lichter werden in 20 Minuten ausgeschaltet.'
          inline_keyboard:
            - 'Abbruch:/cancellight, Okay:/telegramno'
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_nessie
          message: 'Alle Lichter werden in 20 Minuten ausgeschaltet.'
          inline_keyboard:
            - 'Abbruch:/cancellight, Okay:/telegramno'
            
  - alias: 'Turn off light at night'
    initial_state: true
    trigger:
      platform: time
      at: '00:50:00'
    condition:
      - condition: template
        value_template: >
          {% set domain = 'light' %}
          {% set state = 'on' %}
          {{ states[domain] | selectattr('state','eq', state) | list | count > 1 }}
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.telegram_answer_cancel_light_turn_off.attributes.last_triggered) | int > 1500 }}"
    action:
      - service: light.turn_off
        entity_id: all
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_fabian
          message: 'Alle Lichter wurden automatisch ausgeschaltet, da diese vermutlich vergessen wurden.'

  # - alias: 'Turn on thermostats if coming home'
  # 
  #   initial_state: on
  #   trigger:
  #     - platform: state
  #       entity_id:
  #         - device_tracker.google_maps_112174659110860535869
  #       from: 'not_home'
  #       to: 'home'
  #     - platform: state
  #       entity_id:
  #         - device_tracker.google_maps_112056758146194246561
  #       from: 'not_home'
  #       to: 'home'
  #   condition:
  #     condition: and
  #     conditions:
  #     - condition: state
  #       entity_id: sensor.fscharging
  #       state: 'not_charging'
  #     - condition: state
  #       entity_id: sensor.vkcharging
  #       state: 'not_charging'
  #   action:
  #     - service: climate.set_away_mode
  #       data:
  #         entity_id: climate.wohnzimmer1
  #         away_mode: 'off'
  #     - service: climate.set_away_mode
  #       data:
  #         entity_id: climate.wohnzimmer2
  #         away_mode: 'off'
  #     - service: climate.set_temperature
  #       data:
  #         entity_id: climate.wohnzimmer1
  #         temperature: 20
  #         operation_mode: Heat
  #     - service: climate.set_temperature
  #       data:
  #         entity_id: climate.wohnzimmer2
  #         temperature: 20
  #         operation_mode: Heat

  - alias: 'Turn on tleds if fpc starts'
    initial_state: on
    trigger:
      - platform: state
        entity_id: device_tracker.fabianpc
        from: 'not_home'
        to: 'home'
      - platform: state
        entity_id: device_tracker.fabiantablet
        from: 'not_home'
        to: 'home'
    condition:
      condition: and
      conditions:
      - condition: time
        before: '23:59:00'
      - condition: sun
        after: sunset
      - condition: state
        entity_id: device_tracker.tv
        state: 'not_home'
    action:
      - service: light.turn_on
        data:
          entity_id: light.leds_tisch
      - service: switch.turn_on
        data:
          entity_id: switch.regal_leds
      - service: climate.set_temperature
        data:
          entity_id: climate.schlafzimmer
          temperature: 21
          hvac_mode: heat

  - alias: 'Turn off tleds if fpc starts'
    initial_state: on
    trigger:
      - platform: state
        entity_id: device_tracker.fabianpc
        from: 'not_home'
        to: 'home'
      - platform: state
        entity_id: device_tracker.fabiantablet
        from: 'not_home'
        to: 'home'
    condition:
      condition: and
      conditions:
      - condition: sun
        after: sunrise
      - condition: sun
        before: sunset
    action:
      - service: light.turn_off
        data:
          entity_id: light.leds_tisch
      - service: switch.turn_off
        data:
          entity_id: switch.regal_leds
      - service: climate.set_hvac_mode
        data:
          entity_id: climate.schlafzimmer
          hvac_mode: 'auto'

  - alias: 'Turn on light if npc starts'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.nessiepc
        from: 'not_home'
        to: 'home'
    condition:
      condition: and
      conditions:
      - condition: time
        before: '23:59:00'
      - condition: sun
        after: sunset
    action:
      - service: light.turn_on
        data:
          entity_id: group.gastezimmer

  - alias: 'Turn off lights if npc stops'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.nessiepc
        from: 'home'
        to: 'not_home'
        for:
            minutes: 2
    action:
      - service: light.turn_off
        data:
          entity_id: group.gastezimmer

  - alias: 'Turn off strom if npc stops'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.nessiepc
        from: 'home'
        to: 'not_home'
        for:
            minutes: 90
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.nessie_pc

  - alias: 'Turn off tleds if fpc stops'
    initial_state: on
    trigger:
      - platform: state
        entity_id: device_tracker.fabianpc
        from: 'home'
        to: 'not_home'
        for:
            minutes: 1
      - platform: state
        entity_id: device_tracker.fabiantablet
        from: 'home'
        to: 'not_home'
        for:
            minutes: 1
    action:
      - service: light.turn_off
        data:
          entity_id: light.leds_tisch

  - alias: 'Turn off strom if fpc stops'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.fabianpc
        from: 'home'
        to: 'not_home'
        for:
            minutes: 90
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.fabian_strom

  - alias: 'Turn on light if tv starts'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.tv
        from: 'not_home'
        to: 'home'
    condition:
      condition: and
      conditions:
      - condition: time
        before: '23:59:00'
      - condition: sun
        after: sunset
    action:
      - service: light.turn_on
        data:
          entity_id: light.leds_wohnzimmer
      - service: light.turn_on
        data:
          entity_id: light.yeelight_color1_34ce008bcc9d

  - alias: 'Turn off bett if no device is charging'
    initial_state: on
    trigger:
      - platform: state
        entity_id: sensor.fsphone_charging
        from: 'charging'
        to: 'not_charging'
      - platform: state
        entity_id: sensor.vkphone_charging
        from: 'charging'
        to: 'not_charging'
      #- condition: state
      #  entity_id: 'sensor.battery_state_ipad'
      #  state: 'Not Charging'
      #- condition: state
      #  entity_id: 'sensor.battery_level_ipad'
      #  state: '100'
    condition:
      condition: and
      conditions:
      - condition: state
        entity_id: 'sensor.fsphone_charging'
        state: 'not_charging'
      - condition: state
        entity_id: 'sensor.vkphone_charging'
        state: 'not_charging'
      #- condition: or
      #  conditions:
      #  - condition: state
      #    entity_id: 'sensor.battery_state_ipad'
      #    state: 'Not Charging'
      #  - condition: state
      #    entity_id: 'sensor.battery_level_ipad'
      #    state: '100'
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.switch_bett

  - alias: 'Turn off bett after 2,5 hours'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - switch.switch_bett
        from: 'off'
        to: 'on'
        for:
            minutes: 150
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.switch_bett

  - alias: 'Turn off staubsauger after 3,5 hours'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - switch.staubsauger
        from: 'off'
        to: 'on'
        for:
            minutes: 210
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.staubsauger

  - alias: 'Turn on staubsauger weekly'
    initial_state: on
    trigger:
      platform: time
      at: '13:00:00'
    condition:
      - condition: time
        weekday:
          - mon
    action:
      - service: switch.turn_on
        data:
          entity_id: switch.staubsauger

  - alias: 'Turn on lights in morning'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.fabianphone
        from: 'not_home'
        to: 'home'
      - platform: state
        entity_id:
          - device_tracker.nessiephone
        from: 'not_home'
        to: 'home'
    condition:
      condition: and
      conditions:
      - condition: time
        after: '05:00:00'
      - condition: sun
        before: sunrise
      - condition: state
        entity_id: device_tracker.fabianphone
        state: home
      - condition: state
        entity_id: device_tracker.nessiephone
        state: home
    action:
      - service: light.turn_on
        data:
          entity_id: group.schlafzimmer

  - alias: 'Remind for leaving wohnzimmer'
    initial_state: True
    trigger:
      - platform: time
        at: '06:55'
    condition:
      condition: and
      conditions:
        - condition: time
          weekday:
            - mon
            - tue
            - wed
            - thu
            - fri
        - condition: or
          conditions:
          - condition: state
            entity_id: device_tracker.nessiephone
            state: home
          - condition: state
            entity_id: device_tracker.fabianphone
            state: home
          - condition: state
            entity_id: 'input_boolean.silent_mode'
            state: 'off'
    action:
      - service: tts.google_say
        entity_id: media_player.wohnzimmer_mini
        data_template: 
          message: >
            Es ist 
            {{ now().hour }}: {{ now().minute }} Uhr.
            Die Sbahn um {{ states.sensor.zorneding_to_trudering.attributes.departure }} Uhr hat voraussichtlich 
            {{ states.sensor.zorneding_to_trudering.attributes.delay }} Minuten Verspätung.

  - alias: 'Remind for leaving schlafzimmer'
    initial_state: True
    trigger:
      - platform: time
        at: '06:55'
    condition:
      condition: and
      conditions:
      - condition: time
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri
      - condition: state
        entity_id: device_tracker.fabianphone
        state: home
      - condition: state
        entity_id: device_tracker.nessiephone
        state: home
    action:
      - service: tts.google_say
        entity_id: media_player.schlafzimmer
        data_template: 
          message: >
            Es ist 
            {{ now().hour }} {{ now().minute }} Uhr.
            Die Sbahn um {{ states.sensor.zorneding_to_trudering.attributes.departure }} Uhr hat voraussichtlich 
            {{ states.sensor.zorneding_to_trudering.attributes.delay }} Minuten Verspätung.

  - alias: 'Turn on climate if Nessie PC started'
    initial_state: off
    trigger:
      platform: state
      entity_id:
        - device_tracker.nessiepc
      from: 'not_home'
      to: 'home'
    action:
      - service: climate.set_temperature
        data:
          entity_id: climate.gastezimmer
          temperature: 21
          hvac_mode: heat

  - alias: 'Turn off climate if Nessie PC stopped'
    initial_state: off
    trigger:
      platform: state
      entity_id:
        - device_tracker.nessiepc
      from: 'home'
      to: 'not_home'
    action:
      - service: climate.set_hvac_mode
        data:
          entity_id: climate.gastezimmer
          hvac_mode: 'auto'

  - alias: 'Turn on light in sleeping room if fernseher turned off'
    initial_state: on
    trigger:
      platform: state
      entity_id:
        - device_tracker.tv
      from: 'home'
      to: 'not_home'
    condition:
      condition: time
      after: '21:15:00'
      before: '23:50:00'
    action:
      - service: light.turn_on
        data:
          entity_id: group.schlafzimmer
      - delay: '00:04:00'
      - service: light.turn_off
        data:
          entity_id: group.wohnzimmer
      - service: switch.turn_off
        data:
          entity_id: switch.sonoff_100018bc6c
      - service: switch.turn_off
        data:
          entity_id: switch.deckenlampe

  - alias: 'Turn on lights in livingroom when sun set'
    initial_state: on
    trigger:
      platform: sun
      event: sunset
      offset: "-00:25:00"
    condition:
      condition: state
      entity_id: device_tracker.tv
      state: home
    action:
      - service: light.turn_on
        data:
          entity_id: light.leds_wohnzimmer
      - service: light.turn_on
        data:
          entity_id: light.yeelight_color1_34ce008bcc9d

  - alias: 'Turn on lights in sleeping room when sun set'
    initial_state: on
    trigger:
      platform: sun
      event: sunset
      offset: "-00:05:00"
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: 'device_tracker.tv'
          state: 'not_home'
        - condition: or
          conditions:
            - condition: state
              entity_id: 'device_tracker.fabianpc'
              state: 'home'
            - condition: state
              entity_id: 'device_tracker.fabiantablet'
              state: 'home'
    action:
      - service: light.turn_on
        data:
          entity_id: light.leds_tisch
      - service: switch.turn_on
        data:
          entity_id: switch.regal_leds

  - alias: 'Turn on lights in guest room room when sun set'
    initial_state: on
    trigger:
      platform: sun
      event: sunset
      offset: "-00:15:00"
    condition:
      condition: state
      entity_id: device_tracker.nessiepc
      state: home
    action:
      - service: light.turn_on
        data:
          entity_id: group.gastezimmer

  - alias: 'Turn on fridge for Gruppentreffen'
    initial_state: True
    trigger:
      - platform: time
        at: '14:30'
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ states.calendar.fabianseitz98_gmail_com.attributes.message == 'Gruppentreffen' }}"
        - condition: template
          value_template: "{{ ((as_timestamp(states.calendar.fabianseitz98_gmail_com.attributes.start_time) - as_timestamp(now())) < 43200) and ((as_timestamp(states.calendar.fabianseitz98_gmail_com.attributes.start_time) - as_timestamp(now())) > 0) }}"
        - condition: state
          entity_id: 'input_boolean.kuehlschrank_keller'
          state: 'off'
    action:
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.kuehlschrank_keller
      - service: input_boolean.turn_on
        data:
          entity_id: input_boolean.kuehlschrank_keller
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_5friends
          message: 'Kühlschrank für Gruppentreffen heute angeschaltet zum kühlen.'
          disable_notification: true
          inline_keyboard:
            - 'Ausschalten:/fridgeoff'

  - alias: 'Turn on bulb in Keller Fabi'
    initial_state: True
    trigger:
      platform: template
      value_template: "{% if is_state_attr('device_tracker.fabianphone', 'scanner', 'LuciDeviceScanner') %}true{% endif %}"
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.turn_on_bulb_in_keller_fabi.attributes.last_triggered) | int > 7200 }}"
    action:
      - service: light.turn_on
        data:
          entity_id: light.keller_gluhbirne
          brightness: 255
          rgb_color: [0,200,255]

  - alias: 'Turn on bulb in Keller Nessie'
    initial_state: True
    trigger:
      platform: template
      value_template: "{% if is_state_attr('device_tracker.nessiephone', 'scanner', 'LuciDeviceScanner') %}true{% endif %}"
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.turn_on_bulb_in_keller_nessie.attributes.last_triggered) | int > 7200 }}"
    action:
      - service: light.turn_on
        data:
          entity_id: light.keller_gluhbirne
          brightness: 255
          rgb_color: [255,255,255]
          white_value: 255

  - alias: 'Turn on Strom Keller'
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/keller'
    action:
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.strom_keller
      - service: input_boolean.turn_on
        data:
          entity_id: input_boolean.strom_keller
      - service: telegram_bot.send_message
        data_template:
          target: "{{ trigger.event.data.user_id }}"
          message: 'Strom im Keller wurde angeschaltet. Achtung: Wird hierüber NICHT ausgeschaltet!'

  - alias: 'Notify on HA restart'
    initial_state: 'true'
    trigger:
      platform: homeassistant
      event: start
    condition:
      - condition: time
        after: '03:02:00'
        before: '03:00:00'
    action:
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_fabian
          message: 'Homeassistant wurde soeben gestartet.'

  - alias: 'on HA restart'
    initial_state: 'true'
    trigger:
      platform: homeassistant
      event: start
    action:
      - service: frontend.set_theme
        data:
          name: 'Google Dark Theme'
          
  - alias: 'Restart Homeassistant every sunday'
    initial_state: true
    trigger:
      platform: time
      at: '03:00:00'
    condition:
      - condition: time
        weekday:
          - sun
    action:
      - service: shell_command.restartha
          
  - alias: "Let's Encrypt Renewal"
    trigger:
    - platform: time
      at: '00:02:00'
    action:
    - service: hassio.addon_restart
      data:
        addon: core_letsencrypt

  - alias: Turn on Steckerleiste1 Keller
    initial_state: on
    trigger: 
      - platform: state
        entity_id: input_boolean.kuehlschrank_keller
        to: 'on'
    action:
      - service: ifttt.trigger
        data: {"event":"turn_on_steckerleiste1"}

  - alias: Turn off Steckerleiste1 Keller
    initial_state: on
    trigger: 
      - platform: state
        entity_id: input_boolean.kuehlschrank_keller
        to: 'off'
    action:
      - service: ifttt.trigger
        data: {"event":"turn_off_steckerleiste"}
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.strom_keller
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.strom2_keller

  - alias: Turn on Steckerleiste2 Keller
    initial_state: on
    trigger: 
      - platform: state
        entity_id: input_boolean.strom_keller
        to: 'on'
    action:
      - service: ifttt.trigger
        data: {"event":"turn_on_steckerleiste2"}

  - alias: Turn off Steckerleiste2 Keller
    initial_state: on
    trigger: 
      - platform: state
        entity_id: input_boolean.strom_keller
        to: 'off'
    action:
      - service: ifttt.trigger
        data: {"event":"turn_off_steckerleiste"}
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.kuehlschrank_keller
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.strom2_keller

  - alias: Turn on Steckerleiste3 Keller
    initial_state: on
    trigger: 
      - platform: state
        entity_id: input_boolean.strom2_keller
        to: 'on'
    action:
      - service: ifttt.trigger
        data: {"event":"turn_on_steckerleiste3"}

  - alias: Turn off Steckerleiste3 Keller
    initial_state: on
    trigger: 
      - platform: state
        entity_id: input_boolean.strom2_keller
        to: 'off'
    action:
      - service: ifttt.trigger
        data: {"event":"turn_off_steckerleiste"}
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.kuehlschrank_keller
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.strom_keller

  - alias: 'HA Update Available'
    initial_state: on
    trigger:
      - platform: state
        entity_id: binary_sensor.updater
        from: 'off'
        to: 'on'
    action:
      - service: telegram_bot.send_message
        data_template:
          message: "Home Assistant  {{ state_attr('binary_sensor.updater', 'newest_version') }}  ist nun verfügbar."
          target: !secret telegram_chat_fabian
          inline_keyboard:
          - 'Update starten:/updateha'

  - alias: 'Tasmota Update Available'
    initial_state: on
    trigger:
      - platform: state
        entity_id: sensor.tasmota_firmware_available
    condition:
      - condition: template
        value_template: "{{ states.sensor.tasmota_firmware_available.state != 'unavailable' }}"
      - condition: numeric_state
        entity_id: sensor.tasmota_firmware_available
        above: 7
    action:
      - service: telegram_bot.send_message
        data_template:
          message: "Tasmota {{ states('sensor.tasmota_firmware_available') }} ist nun verfügbar. Es können alle Tasmota Geräte automatisch aktualisiert werden."
          target: !secret telegram_chat_fabian
          inline_keyboard:
          - 'Update starten:/updatetasmota'

  - alias: 'Notify for SMS PIN Fabian'
    initial_state: on
    trigger:
      - platform: state
        entity_id: sensor.fs_smspin
    condition:
      - condition: template
        value_template: "{{ states.sensor.fs_smspin.state != 'not_set' }}"
    action:
      - service: notify.browser
        data_template:
          message: "Der Security Code lautet: {{ states('sensor.fs_smspin') }}"
          target: 
            - Fabian-PC
            - Fabian-Hackbook
            - Chrome-Arbeit
            - fabiantablet
        data:
          data:
            tag: 'notification-about-sensor'

  - alias: 'Incoming Call Fabian'
    initial_state: off
    trigger:
      - platform: state
        entity_id: automation.incoming_call_fabian
        to: 'on'
    action:
      - service: media_player.volume_set
        data:
          volume_level: 0.4
          entity_id: media_player.wohnzimmer_mini
      - service: tts.google_say
        entity_id: 
        - media_player.wohnzimmer_mini
        - media_player.schlafzimmer
        data_template: 
          message: "Fabian wird soeben von {{ states('sensor.fs_caller') }} angerufen!"
      - service: media_player.media_pause
        data:
          entity_id: media_player.wohnzimmer_tv
      - delay: '00:00:09'
      - service: media_player.volume_set
        data:
          volume_level: 0.3
          entity_id: media_player.wohnzimmer_mini
      - service: automation.turn_off
        data:
          entity_id: automation.incoming_call_fabian
      - service: media_player.turn_off
        data:
          entity_id: media_player.wohnzimmer_mini
      - service: media_player.turn_off
        data:
          entity_id: media_player.schlafzimmer

  - alias: 'Incoming Call Nessie'
    initial_state: off
    trigger:
      - platform: state
        entity_id: automation.incoming_call_nessie
        to: 'on'
    action:
      - service: media_player.volume_set
        data:
          volume_level: 0.7
          entity_id: media_player.wohnzimmer_mini
      - service: tts.google_say
        entity_id: 
        - media_player.wohnzimmer_mini
        - media_player.schlafzimmer
        data:
          message: 'Nessie wird soeben angerufen!'
      - delay: '00:00:10'
      - service: media_player.volume_set
        data:
          volume_level: 0.3
          entity_id: media_player.wohnzimmer_mini
      - service: automation.turn_off
        data:
          entity_id: automation.incoming_call_nessie
      - service: media_player.turn_off
        data:
          entity_id: media_player.wohnzimmer_mini
      - service: media_player.turn_off
        data:
          entity_id: media_player.schlafzimmer

  # - alias: "Check for SBahn Delay"
  # 
  #   initial_state: off
  #   trigger:
  #     - platform: template
  #       value_template: "{{ states.sensor.zorneding_to_trudering.attributes.delay | int > 1 }}"
  #   action:
  #     - service: notify.sbahn_txt
  #       data_template: 
  #         message: "Sbahn nach MUC: {{ states.sensor.zorneding_to_truedering.attributes.departure }} Uhr +{{ states.sensor.zorneding_to_truedering.attributes.delay }} min }}"

  # - alias: 'Coinbase balance above 200'
  # 
  #   initial_state: on
  #   trigger:
  #     - platform: template
  #       value_template: "{{ states.sensor.coinbase_btc_wallet.attributes.Balance in native currency | int > 164 }}"
  #   action:
  #       - service: telegram_bot.send_message
  #         data_template:
  #           target: !secret telegram_chat_fabian
  #           message: "Aktueller BTC Wert: {{ states.sensor.coinbase_btc_wallet.attributes.Balance in native currency }} . Jetzt verkaufen?"
  #           inline_keyboard:
  #           - 'Ja:/sellbtc, Nein:/telegramno'

  # - alias: 'Telegram Sell BTC'
  # 
  #   initial_state: on
  #   trigger:
  #     platform: event
  #     event_type: telegram_callback
  #     event_data:
  #       data: '/sellbtc'
  #   action:
  #     - service: telegram_bot.answer_callback_query
  #       data_template:
  #         callback_query_id: '{{ trigger.event.data.id }}'
  #         message: 'ACHTUNG, aktuell noch nicht funktional!'
  #     - service: telegram_bot.edit_replymarkup
  #       data_template:
  #         message_id: '{{ trigger.event.data.message.message_id }}'
  #         chat_id: '{{ trigger.event.data.user_id }}'
  #         inline_keyboard: []
  #     - service: shell_command.sellbtc

  - alias: Turn Schloss off after turning on
    initial_state: on
    trigger: 
      - platform: state
        entity_id: switch.schloss
        to: 'on'
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.schloss

  - alias: Nessie Phone Battery below 5 %
    initial_state: on
    trigger:
      platform: numeric_state
      entity_id: sensor.vkphone_battery
      below: 5
    action:
      - service: telegram_bot.send_message
        data_template:
          title: 'Nessie Akku unter 5%'
          target: !secret telegram_chat_fabian
          message: ''

  - alias: Fabi Phone Battery below 5 %
    initial_state: on
    trigger:
      platform: numeric_state
      entity_id: sensor.fsphone_battery
      below: 5
    action:
      - service: telegram_bot.send_message
        data_template:
          title: 'Fabi Akku unter 5%'
          target: !secret telegram_chat_nessie
          message: ''

  - alias: Mute Spotify ads wohnzimmer mini
    initial_state: on
    trigger:
      - platform: template 
        value_template: "{{ states.media_player.wohnzimmer_mini.attributes.media_title == 'Advertisement' }}"
      - platform: template 
        value_template: "{{ states.media_player.wohnzimmer_mini.attributes.media_title == 'Spotify' }}"
    action:
      - service: media_player.volume_mute
        data:
          entity_id: media_player.wohnzimmer_mini
          is_volume_muted: true
      - service: automation.turn_off
        data:
          entity_id: automation.mute_spotify_ads_wohnzimmer_mini
      - delay: '00:00:07'
      - service: automation.turn_on
        data:
          entity_id: automation.unmute_after_spotify_ads_wohnzimmer_mini

  - alias: Unmute after Spotify ads wohnzimmer mini
    initial_state: off
    trigger:
      - platform: template 
        value_template: "{{ states.media_player.wohnzimmer_mini.attributes.media_title != 'Advertisement' }}"
    action:
      - service: media_player.volume_mute
        data:
          entity_id: media_player.wohnzimmer_mini
          is_volume_muted: false
      - service: automation.turn_off
        data:
          entity_id: automation.unmute_after_spotify_ads_wohnzimmer_mini
      - delay: '00:00:07'
      - service: automation.turn_on
        data:
          entity_id: automation.mute_spotify_ads_wohnzimmer_mini

  - alias: Mute Spotify ads schlafzimmer
    initial_state: on
    trigger:
      - platform: template 
        value_template: "{{ states.media_player.schlafzimmer.attributes.media_title == 'Advertisement' }}"
      - platform: template 
        value_template: "{{ states.media_player.schlafzimmer.attributes.media_title == 'Spotify' }}"
    action:
      - service: media_player.volume_mute
        data:
          entity_id: media_player.schlafzimmer
          is_volume_muted: true
      - service: automation.turn_off
        data:
          entity_id: automation.mute_spotify_ads_schlafzimmer
      - delay: '00:00:07'
      - service: automation.turn_on
        data:
          entity_id: automation.unmute_after_spotify_ads_schlafzimmer

  - alias: Unmute after Spotify ads schlafzimmer
    initial_state: off
    trigger:
      - platform: template 
        value_template: "{{ states.media_player.schlafzimmer.attributes.media_title != 'Advertisement' }}"
    action:
      - service: media_player.volume_mute
        data:
          entity_id: media_player.schlafzimmer
          is_volume_muted: false
      - service: automation.turn_off
        data:
          entity_id: automation.unmute_after_spotify_ads_schlafzimmer
      - delay: '00:00:07'
      - service: automation.turn_on
        data:
          entity_id: automation.mute_spotify_ads_schlafzimmer

  - alias: Mute Spotify ads wohnzimmer tv
    initial_state: on
    trigger:
      - platform: template 
        value_template: "{{ states.media_player.wohnzimmer_tv.attributes.media_title == 'Advertisement' }}"
      - platform: template 
        value_template: "{{ states.media_player.wohnzimmer_tv.attributes.media_title == 'Spotify' }}"
    action:
      - service: media_player.volume_mute
        data:
          entity_id: media_player.wohnzimmer_tv
          is_volume_muted: true
      - service: automation.turn_off
        data:
          entity_id: automation.mute_spotify_ads_wohnzimmer_tv
      - delay: '00:00:07'
      - service: automation.turn_on
        data:
          entity_id: automation.unmute_after_spotify_ads_wohnzimmer_tv

  - alias: Unmute after Spotify ads wohnzimmer tv
    initial_state: off
    trigger:
      - platform: template 
        value_template: "{{ states.media_player.wohnzimmer_tv.attributes.media_title != 'Advertisement' }}"
    action:
      - service: media_player.volume_mute
        data:
          entity_id: media_player.wohnzimmer_tv
          is_volume_muted: false
      - service: automation.turn_off
        data:
          entity_id: automation.unmute_after_spotify_ads_wohnzimmer_tv
      - delay: '00:00:07'
      - service: automation.turn_on
        data:
          entity_id: automation.mute_spotify_ads_wohnzimmer_tv

  - alias: Mute Spotify ads mini Gruppe
    initial_state: on
    trigger:
      - platform: template 
        value_template: "{{ states.media_player.mini_gruppe.attributes.media_title == 'Advertisement' }}"
      - platform: template 
        value_template: "{{ states.media_player.mini_gruppe.attributes.media_title == 'Spotify' }}"
    action:
      - service: media_player.volume_mute
        data:
          entity_id: media_player.mini_gruppe
          is_volume_muted: true
      - service: automation.turn_off
        data:
          entity_id: automation.mute_spotify_ads_mini_gruppe
      - delay: '00:00:07'
      - service: automation.turn_on
        data:
          entity_id: automation.unmute_after_spotify_ads_mini_gruppe

  - alias: Unmute after Spotify ads mini Gruppe
    initial_state: off
    trigger:
      - platform: template 
        value_template: "{{ states.media_player.mini_gruppe.attributes.media_title != 'Advertisement' }}"
    action:
      - service: media_player.volume_mute
        data:
          entity_id: media_player.mini_gruppe
          is_volume_muted: false
      - service: automation.turn_off
        data:
          entity_id: automation.unmute_after_spotify_ads_mini_gruppe
      - delay: '00:00:07'
      - service: automation.turn_on
        data:
          entity_id: automation.mute_spotify_ads_mini_gruppe

  - alias: Mute Spotify ads guest mini
    initial_state: on
    trigger:
      - platform: template 
        value_template: "{{ states.media_player.gastezimmer_mini.attributes.media_title == 'Advertisement' }}"
      - platform: template 
        value_template: "{{ states.media_player.gastezimmer_mini.attributes.media_title == 'Spotify' }}"
    action:
      - service: media_player.volume_mute
        data:
          entity_id: media_player.gastezimmer_mini
          is_volume_muted: true
      - service: automation.turn_off
        data:
          entity_id: automation.mute_spotify_ads_gastezimmer_mini
      - delay: '00:00:07'
      - service: automation.turn_on
        data:
          entity_id: automation.unmute_after_spotify_ads_gastezimmer_mini

  - alias: Unmute after Spotify ads guest mini
    initial_state: off
    trigger:
      - platform: template 
        value_template: "{{ states.media_player.gastezimmer_mini.attributes.media_title != 'Advertisement' }}"
    action:
      - service: media_player.volume_mute
        data:
          entity_id: media_player.gastezimmer_mini
          is_volume_muted: false
      - service: automation.turn_off
        data:
          entity_id: automation.unmute_after_spotify_ads_gastezimmer_mini
      - delay: '00:00:07'
      - service: automation.turn_on
        data:
          entity_id: automation.mute_spotify_ads_gastezimmer_mini

  - alias: Mute Spotify ads keller tv
    initial_state: on
    trigger:
      - platform: template 
        value_template: "{{ states.media_player.keller_tv.attributes.media_title == 'Advertisement' }}"
      - platform: template 
        value_template: "{{ states.media_player.keller_tv.attributes.media_title == 'Spotify' }}"
    action:
      - service: media_player.volume_mute
        data:
          entity_id: media_player.keller_tv
          is_volume_muted: true
      - service: automation.turn_off
        data:
          entity_id: automation.mute_spotify_ads_keller_tv
      - delay: '00:00:07'
      - service: automation.turn_on
        data:
          entity_id: automation.unmute_after_spotify_ads_keller_tv

  - alias: Unmute after Spotify ads keller tv
    initial_state: off
    trigger:
      - platform: template 
        value_template: "{{ states.media_player.keller_tv.attributes.media_title != 'Advertisement' }}"
    action:
      - service: media_player.volume_mute
        data:
          entity_id: media_player.keller_tv
          is_volume_muted: false
      - service: automation.turn_off
        data:
          entity_id: automation.unmute_after_spotify_ads_keller_tv
      - delay: '00:00:07'
      - service: automation.turn_on
        data:
          entity_id: automation.mute_spotify_ads_keller_tv

  - alias: Fritzbox Public IP Change
    initial_state: on
    trigger:
      platform: template 
      value_template: "{{ states('sensor.fritz_netmonitor.attributes.external_ip') }}"
    action:
      - service: notify.telegram_fabian
        data:
          message: 'Öffentliche IP hat sich geändert zu {{ states.sensor.fritz_netmonitor.attributes.external_ip }}'

  - alias: Fritzbox no Internet access
    initial_state: on
    trigger:
      platform: template 
      value_template: "{{ is_state('sensor.fritz_netmonitor.attributes.is_connected', 'false') }}"
      for: "00:00:10"
    condition:
      condition: and
      conditions:
        - condition: time
          after: '10:30:00'
          before: '22:30:00'
        - condition: state
          entity_id: 'input_boolean.silent_mode'
          state: 'off'
        - condition: or
          conditions:
          - condition: state
            entity_id: device_tracker.nessiephone
            state: home
          - condition: state
            entity_id: device_tracker.fabianphone
            state: home
    action:
      - service: tts.google_say
        entity_id: 
        - media_player.schlafzimmer
        - media_player.wohnzimmer_mini
        data:
          message: 'Die Fritzbox hat keine Internet Verbindung!'
      - service: automation.turn_on
        data:
          entity_id: automation.fritzbox_internet_access_returned

  - alias: Fritzbox Internet access returned
    initial_state: off
    trigger:
      platform: template 
      value_template: "{{ is_state('sensor.fritz_netmonitor.attributes.is_connected', 'true') }}"
    action:
      - service: notify.telegram_fabian
        data:
          message: 'Die Internetverbindung ist wieder aufgebaut.'
      - service: notify.telegram_nessie
        data:
          message: 'Die Internetverbindung ist wieder aufgebaut.'
      - service: automation.turn_off
        data:
          entity_id: automation.fritzbox_internet_access_returned

  # - alias: Internet Speed Test Poor Fabian
  # 
  #   initial_state: on
  #   trigger:
  #     - platform: template
  #       value_template: "{{ states('sensor.speedtest_download')|float < 40 }}"
  #   condition:
  #     - condition: template
  #       value_template: "{{ states.device_tracker.google_maps_112174659110860535869.state == 'home' }}"
  #   action:
  #     - service: notify.telegram_fabian
  #       data:
  #         message: 'Die Internetgeschwindigkeit ist aktuell langsam ( {{ state.sensor.speedtest_download }} Mbit/s ). Eventuell die Fritzbox neustarten?'

  # - alias: Internet Speed Test Poor Nessie
  # 
  #   initial_state: on
  #   trigger:
  #     - platform: template
  #       value_template: "{{ states('sensor.speedtest_download')|float < 30 }}"
  #   condition:
  #     - condition: template
  #       value_template: "{{ states.device_tracker.google_maps_112056758146194246561.state == 'home' }}"
  #     - condition: state
  #       entity_id: device_tracker.nessiepc
  #       state: home
  #   action:
  #     - service: notify.telegram_nessie
  #       data:
  #         message: 'Die Internetgeschwindigkeit ist aktuell langsam. Eventuell die Fritzbox neustarten?'

  - alias: Deckenlampe Button Hold Off
    initial_state: on
    trigger: 
      - entity_id: sensor.deckenlampe
        platform: state
        to: '{"TRIG":"HOLD"}'
    condition:
      condition: or
      conditions:
        - condition: state
          entity_id: light.leds_wohnzimmer
          state: 'on'
        - condition: state
          entity_id: light.yeelight_color1_34ce008bcc9d
          state: 'on'
    action:
      - service: light.turn_off
        data:
          entity_id: group.wohnzimmer
      - service: switch.turn_off
        data:
          entity_id: switch.deckenlampe
          
  - alias: Deckenlampe Button Hold On
    initial_state: on
    trigger: 
      - entity_id: sensor.deckenlampe
        platform: state
        to: '{"TRIG":"HOLD"}'
    condition:
      - condition: state
        entity_id: light.leds_wohnzimmer
        state: 'off'
      - condition: state
        entity_id: light.yeelight_color1_34ce008bcc9d
        state: 'off'
    action:
      - service: light.turn_on
        data:
          entity_id: group.wohnzimmer
          
  - alias: Deckenlampe Button double press Off
    initial_state: on
    trigger: 
      - entity_id: sensor.deckenlampe
        platform: state
        to: '{"TRIG":"DOUBLE"}'
    condition:
      - condition: state
        entity_id: switch.fernseher
        state: 'on'
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.fernseher
          
  - alias: Deckenlampe Button double press On
    initial_state: on
    trigger: 
      - entity_id: sensor.deckenlampe
        platform: state
        to: '{"TRIG":"DOUBLE"}'
    condition:
      - condition: state
        entity_id: switch.fernseher
        state: 'off'
    action:
      - service: switch.turn_on
        data:
          entity_id: switch.fernseher

  - alias: Lichtschalter Button Hold Off
    initial_state: on
    trigger: 
      - entity_id: sensor.lichtschalter
        platform: state
        to: '{"TRIG":"HOLD"}'
    condition:
      condition: or
      conditions:
        - condition: state
          entity_id: light.yeelight_strip1_34ce008b1863
          state: 'on'
        - condition: state
          entity_id: light.leds_tisch
          state: 'on'
        - condition: state
          entity_id: switch.regal_leds
          state: 'on'
    action:
      - service: light.turn_off
        data:
          entity_id: group.schlafzimmer
      - service: switch.turn_off
        data:
          entity_id: switch.regal_leds
      - service: switch.turn_off
        data:
          entity_id: switch.lichtschalter
          
  - alias: Lichtschalter Button Hold On
    initial_state: on
    trigger: 
      - entity_id: sensor.lichtschalter
        platform: state
        to: '{"TRIG":"HOLD"}'
    condition:
      - condition: state
        entity_id: light.yeelight_strip1_34ce008b1863
        state: 'off'
      - condition: state
        entity_id: light.leds_tisch
        state: 'off'
      - condition: state
        entity_id: switch.regal_leds
        state: 'off'
    action:
      - service: light.turn_on
        data:
          entity_id: group.schlafzimmer
      - service: switch.turn_on
        data:
          entity_id: switch.regal_leds
          
  - alias: Lichtschalter Button double press Off
    initial_state: on
    trigger: 
      - entity_id: sensor.lichtschalter
        platform: state
        to: '{"TRIG":"DOUBLE"}'
    condition:
      - condition: state
        entity_id: switch.fabian_strom
        state: 'on'
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.fabian_strom
          
  - alias: Lichtschalter Button double press On
    initial_state: on
    trigger: 
      - entity_id: sensor.lichtschalter
        platform: state
        to: '{"TRIG":"DOUBLE"}'
    condition:
      - condition: state
        entity_id: switch.fabian_strom
        state: 'off'
    action:
      - service: switch.turn_on
        data:
          entity_id: switch.fabian_strom

  - alias: Notify for high humidity
    trigger:
      - platform: numeric_state
        entity_id: sensor.gastezimmer_humidity
        above: 57
      - platform: numeric_state
        entity_id: sensor.wohnzimmer_humidity
        above: 57
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: 'input_boolean.silent_mode'
          state: 'off'
        - condition: template
          value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_for_high_humidity.attributes.last_triggered) | int > 7200 }}"
        - condition: or
          conditions:
          - condition: state
            entity_id: device_tracker.fabianphone
            state: home
          - condition: state
            entity_id: device_tracker.nessiephone
            state: home
    action:
      - service: media_player.volume_set
        data:
          volume_level: 0.7
          entity_id: 
          - media_player.wohnzimmer_mini
          - media_player.schlafzimmer
      #- service: media_player.media_pause
        #data:
          #entity_id: media_player.wohnzimmer_tv
      - service: androidtv.adb_command
        data:
          entity_id: media_player.wohnzimmer_tv
          command: "am start -t image/* -d file:///sdcard/open_window.gif"
      - service: tts.google_say
        entity_id: 
        - media_player.wohnzimmer_mini
        - media_player.schlafzimmer
        data:
          message: 'Die Luftfeuchtigkeit ist zu hoch! Bitte lüften.'
      - service: media_player.volume_set
        data:
          volume_level: 0.3
          entity_id: 
          - media_player.wohnzimmer_mini
          - media_player.schlafzimmer

  - alias: Notify for extreme high humidity
    trigger:
      - platform: numeric_state
        entity_id: sensor.gastezimmer_humidity
        above: 65
      - platform: numeric_state
        entity_id: sensor.wohnzimmer_humidity
        above: 65
    condition:
      - condition: state
        entity_id: device_tracker.fabianphone
        state: not_home
      - condition: state
        entity_id: device_tracker.nessiephone
        state: not_home
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_for_extreme_high_humidity.attributes.last_triggered) | int > 32400 }}"
    action:
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_fabian
          message: 'Achtung, sehr hohe Luftfeuchtigkeit. Luftfeuchtigkeit Wohnzimmer: {{ states.climate.wohnzimmer.attributes.current_humidity }} %. Luftfeuchtigkeit Gästezimmer: {{ states.climate.gastezimmer.attributes.current_humidity }} %.'
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_nessie
          message: 'Achtung, sehr hohe Luftfeuchtigkeit. Luftfeuchtigkeit Wohnzimmer: {{ states.climate.wohnzimmer.attributes.current_humidity }} %. Luftfeuchtigkeit Gästezimmer: {{ states.climate.gastezimmer.attributes.current_humidity }} %.'
          
  - alias: Notify for high humidity when coming home
    initial_state: true
    trigger:
      - platform: state
        entity_id: device_tracker.nessiephone
        from: 'not_home'
        to: 'home'
      - platform: state
        entity_id: device_tracker.fabianphone
        from: 'not_home'
        to: 'home'
    condition:
      - condition: numeric_state
        entity_id: sensor.gastezimmer_humidity
        above: 54
      - condition: numeric_state
        entity_id: sensor.wohnzimmer_humidity
        above: 54
      - condition: state
        entity_id: 'input_boolean.silent_mode'
        state: 'off'
      - condition: time
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri
      - condition: time
        before: '22:00:00'
      - condition: time
        after: '08:00:00'
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_for_high_humidity_when_coming_home.attributes.last_triggered) | int > 7200 }}"
    action:
      - delay: 00:03:00
      - service: media_player.volume_set
        data:
          volume_level: 0.7
          entity_id: 
          - media_player.wohnzimmer_mini
          - media_player.schlafzimmer
      - service: tts.google_say
        entity_id: 
        - media_player.wohnzimmer_mini
        - media_player.schlafzimmer
        data:
          message: 'Willkommen zurück. Die Luftfeuchtigkeit ist zu hoch! Bitte lüften.'
      - service: media_player.volume_set
        data:
          volume_level: 0.3
          entity_id: 
          - media_player.wohnzimmer_mini
          - media_player.schlafzimmer
          
  - alias: Notify for high humidity when coming home weekend
    initial_state: true
    trigger:
      - platform: state
        entity_id: device_tracker.nessiephone
        from: 'not_home'
        to: 'home'
      - platform: state
        entity_id: device_tracker.fabianphone
        from: 'not_home'
        to: 'home'
    condition:
      - condition: numeric_state
        entity_id: sensor.gastezimmer_humidity
        above: 54
      - condition: numeric_state
        entity_id: sensor.wohnzimmer_humidity
        above: 54
      - condition: state
        entity_id: 'input_boolean.silent_mode'
        state: 'off'
      - condition: time
        weekday:
          - sat
          - sun
      - condition: time
        before: '22:00:00'
      - condition: time
        after: '11:00:00'
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.notify_for_high_humidity_when_coming_home_weekend.attributes.last_triggered) | int > 7200 }}"
    action:
      - delay: 00:03:00
      - service: media_player.volume_set
        data:
          volume_level: 0.7
          entity_id: 
          - media_player.wohnzimmer_mini
          - media_player.schlafzimmer
      - service: tts.google_say
        entity_id: 
        - media_player.wohnzimmer_mini
        - media_player.schlafzimmer
        data:
          message: 'Willkommen zurück. Die Luftfeuchtigkeit ist zu hoch! Bitte lüften.'
      - service: media_player.volume_set
        data:
          volume_level: 0.3
          entity_id: 
          - media_player.wohnzimmer_mini
          - media_player.schlafzimmer

  - alias: Detect if coal lighter is currently active 5 Freunde
    trigger:
      - platform: numeric_state
        entity_id: sensor.waschmaschine_energy_power
        above: 470
        below: 540
        for:
          seconds: 35
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.detect_if_coal_lighter_is_currently_active_5_freunde.attributes.last_triggered) | int > 1200 }}"
        - condition: or
          conditions:
          - condition: state
            entity_id: device_tracker.flophone
            state: home
          - condition: state
            entity_id: device_tracker.maxiphone
            state: home
    action:
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_5friends
          message: 'Kohleanzünder wurde eingeschaltet. '
          disable_notification: true
      - service: automation.turn_off
        data:
          entity_id: automation.detect_if_washing_machine_is_currently_active
      - delay: '00:11:00'
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_5friends
          message: 'Bitte Kohle wenden.'
      - service: tts.google_say
        entity_id: media_player.keller_tv
        data:
          message: 'Bitte die Kohle wenden.'
      - service: androidtv.adb_command
        data:
          entity_id: media_player.keller_tv
          command: "am start -a android.intent.action.VIEW -d /sdcard/referee-whistle.wav -t audio/wav"
          #command: "am start -t image/* -d file:///sdcard/perfect_dive.gif"
      - delay: '00:11:00'
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_5friends
          message: 'Die Kohle sollte fertig sein! Strom wurde ausgeschaltet.'
      - service: androidtv.adb_command
        data:
          entity_id: media_player.keller_tv
          command: "am start -a android.intent.action.VIEW -d /sdcard/shisha.wav -t audio/wav"
          #command: "am start -t image/* -d file:///sdcard/cat.gif"
      - service: switch.turn_off
        data:
          entity_id: switch.waschmaschine
      - service: automation.turn_on
        data:
          entity_id: automation.detect_if_washing_machine_is_currently_active
          
  - alias: Detect if coal lighter is currently active AFK
    trigger:
      - platform: numeric_state
        entity_id: sensor.waschmaschine_energy_power
        above: 470
        below: 540
        for:
          seconds: 40
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.detect_if_coal_lighter_is_currently_active_afk.attributes.last_triggered) | int > 1200 }}"
        - condition: template
          value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.detect_if_coal_lighter_is_currently_active_5_freunde.attributes.last_triggered) | int > 1200 }}"
        - condition: or
          conditions:
          - condition: state
            entity_id: device_tracker.google_maps_104418453164779945782
            state: home
          - condition: state
            entity_id: device_tracker.google_maps_103127589611220223167
            state: home
    action:
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_afk
          message: 'Kohleanzünder wurde eingeschaltet. '
          disable_notification: true
      - service: automation.turn_off
        data:
          entity_id: automation.detect_if_washing_machine_is_currently_active
      - delay: '00:11:00'
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_afk
          message: 'Bitte Kohle wenden.'
      - service: tts.google_say
        entity_id: media_player.keller_tv
        data:
          message: 'Bitte die Kohle wenden.'
      - service: androidtv.adb_command
        data:
          entity_id: media_player.keller_tv
          command: "am start -a android.intent.action.VIEW -d /sdcard/referee-whistle.wav -t audio/wav"
          #command: "am start -t image/* -d file:///sdcard/perfect_dive.gif"
      - delay: '00:11:00'
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_afk
          message: 'Die Kohle sollte fertig sein! Strom wurde ausgeschaltet.'
      - service: androidtv.adb_command
        data:
          entity_id: media_player.keller_tv
          command: "am start -a android.intent.action.VIEW -d /sdcard/shisha.wav -t audio/wav"
          #command: "am start -t image/* -d file:///sdcard/cat.gif"
      - service: switch.turn_off
        data:
          entity_id: switch.waschmaschine
      - service: automation.turn_on
        data:
          entity_id: automation.detect_if_washing_machine_is_currently_active
          
  - alias: Detect if coal lighter is currently active
    trigger:
      - platform: numeric_state
        entity_id: sensor.waschmaschine_energy_power
        above: 470
        below: 540
        for:
          seconds: 40
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.detect_if_coal_lighter_is_currently_active.attributes.last_triggered) | int > 1200 }}"
        - condition: state
          entity_id: device_tracker.google_maps_104418453164779945782
          state: not_home
        - condition: state
          entity_id: device_tracker.google_maps_103127589611220223167
          state: not_home
        - condition: state
          entity_id: device_tracker.flophone
          state: not_home
        - condition: state
          entity_id: device_tracker.maxiphone
          state: not_home
    action:
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_fabian
          message: 'Kohleanzünder wurde eingeschaltet. '
          disable_notification: true
      - service: automation.turn_off
        data:
          entity_id: automation.detect_if_washing_machine_is_currently_active
      - delay: '00:11:00'
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_fabian
          message: 'Bitte Kohle wenden.'
      - service: tts.google_say
        entity_id: media_player.keller_tv
        data:
          message: 'Bitte die Kohle wenden.'
      - service: androidtv.adb_command
        data:
          entity_id: media_player.keller_tv
          command: "am start -a android.intent.action.VIEW -d /sdcard/referee-whistle.wav -t audio/wav"
          #command: "am start -t image/* -d file:///sdcard/perfect_dive.gif"
      - delay: '00:11:00'
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_fabian
          message: 'Die Kohle sollte fertig sein! Strom wurde ausgeschaltet.'
      - service: androidtv.adb_command
        data:
          entity_id: media_player.keller_tv
          command: "am start -a android.intent.action.VIEW -d /sdcard/shisha.wav -t audio/wav"
          #command: "am start -t image/* -d file:///sdcard/cat.gif"
      - service: switch.turn_off
        data:
          entity_id: switch.waschmaschine
      - service: automation.turn_on
        data:
          entity_id: automation.detect_if_washing_machine_is_currently_active

  - alias: Detect if Washing machine is currently active
    trigger:
      - platform: numeric_state
        entity_id: sensor.waschmaschine_energy_power
        above: 4
        below: 469
        for:
          seconds: 40
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.detect_if_washing_machine_is_currently_active.attributes.last_triggered) | int > 5400 }}"
    action:
      - service: automation.turn_off
        data:
          entity_id: automation.detect_if_coal_lighter_is_currently_active
      - service: automation.turn_off
        data:
          entity_id: automation.detect_if_coal_lighter_is_currently_active_5_freunde
      - service: automation.turn_off
        data:
          entity_id: automation.detect_if_coal_lighter_is_currently_active_afk
      - service: automation.turn_off
        data:
          entity_id: automation.detect_if_washing_machine_is_currently_active
      - service: automation.turn_on
        data:
          entity_id: automation.set_washing_machine_active_when_power_detected
      - service: automation.turn_on
        data:
          entity_id: automation.set_washing_machine_finished_when_power_drops
      - service: notify.telegram_nessie
        data:
          message: 'Die Waschmaschine wurde gestartet.'
      - service: notify.telegram_fabian
        data:
          message: 'Die Waschmaschine wurde gestartet.'
 
  - alias: Set washing machine active when power detected
    initial_state: off
    trigger:
      - platform: numeric_state
        entity_id: sensor.waschmaschine_energy_power
        above: 6
    condition:
      condition: or
      conditions:
        - condition: state
          entity_id: sensor.washing_machine_state
          state: Idle
        - condition: state
          entity_id: sensor.washing_machine_state
          state: Clean
        - condition: state
          entity_id: sensor.washing_machine_state
          state: Finishing
        - condition: template
          value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.detect_if_coal_lighter_is_currently_active.attributes.last_triggered) | int > 50 }}"
        - condition: template
          value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.detect_if_coal_lighter_is_currently_active_afk.attributes.last_triggered) | int > 50 }}"
        - condition: template
          value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.detect_if_coal_lighter_is_currently_active_5_freunde.attributes.last_triggered) | int > 50 }}"
    action:
      - service: input_select.select_option
        data:
          entity_id: input_select.washing_machine_status
          option: Running
  
  # When the power drops, move the state of the washing machine to 
  # Finishing.
  
  - alias: Set washing machine finished when power drops
    initial_state: off
    trigger:
      - platform: numeric_state
        entity_id: sensor.waschmaschine_energy_power
        below: 6
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_select.washing_machine_status
          state: Running
    action:
      - service: input_select.select_option
        data:
          entity_id: input_select.washing_machine_status
          option: Finishing
  
  # Wait 8 minutes for us to be in the Finishing state before we
  # decide the washing machine has finished. This way, if the 
  # washing machine is in between cycles and the power drops, we 
  # won't mark the washing machine cycle as finished too early.
  
  - alias: Set washing machine clean after timeout
    trigger:
      - platform: state
        entity_id: input_select.washing_machine_status
        to: Finishing
        for:
          minutes: 7
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_select.washing_machine_status
          state: Finishing
    action:
      - service: input_select.select_option
        data:
          entity_id: input_select.washing_machine_status
          option: Clean
      - service: notify.telegram_nessie
        data:
          message: 'Die Waschmaschine ist fertig.'
      - service: notify.telegram_fabian
        data:
          message: 'Die Waschmaschine ist fertig.'
      - service: tts.google_say
        entity_id: media_player.schlafzimmer
        data:
          message: 'Die Waschmaschine ist fertig!'
      - service: tts.google_say
        entity_id: media_player.wohnzimmer_mini
        data:
          message: 'Die Waschmaschine ist fertig!'
      - service: switch.turn_off
        data:
          entity_id: switch.waschmaschine
      - service: automation.turn_off
        data:
          entity_id: automation.set_washing_machine_finished_when_power_drops
      - service: automation.turn_on
        data:
          entity_id: automation.detect_if_washing_machine_is_currently_active
      - service: automation.turn_on
        data:
          entity_id: automation.detect_if_coal_lighter_is_currently_active
      - service: automation.turn_on
        data:
          entity_id: automation.detect_if_coal_lighter_is_currently_active_5_freunde
      - service: automation.turn_on
        data:
          entity_id: automation.detect_if_coal_lighter_is_currently_active_afk

  - alias: 'Remind for going off Nessie'
    initial_state: on
    trigger:
      platform: time
      at: '22:05:00'
    condition:
      condition: and
      conditions:
        - condition: time
          weekday:
            - mon
            - tue
            - wed
            - thu
            - sun
        - condition: state
          entity_id: device_tracker.nessiepc
          state: home
    action:
      - service: notify.browser
        data_template:
          message: "Es ist 22 Uhr - Zeit off zu gehen."
          target: 
            - Nessie-PC
        data:
          data:
            tag: 'notification-about-sensor'
      - service: notify.mobile_app_mi_9t_nessie
        data_template:
          title: "Zeit off zu gehen"
          message: "Es ist 22 Uhr."
        data:
          data:
            tag: 'notification-about-sensor'

  - alias: 'Remind for going off Fabi'
    initial_state: on
    trigger:
      platform: time
      at: '22:05:00'
    condition:
      condition: and
      conditions:
        - condition: time
          weekday:
            - mon
            - tue
            - wed
            - thu
            - sun
        - condition: or
          conditions:
          - condition: state
            entity_id: device_tracker.fabianhackbook
            state: home
          - condition: state
            entity_id: device_tracker.fabianpc
            state: home
          - condition: state
            entity_id: device_tracker.fabiantablet
            state: home
    action:
      - service: notify.browser
        data_template:
          message: "Es ist 22 Uhr - Zeit off zu gehen."
          target: 
            - Fabian-PC
            - Fabian-Hackbook
        data:
          data:
            tag: 'notification-about-sensor'
      - service: notify.mobile_app_mi_9t
        data_template:
          title: "Zeit off zu gehen"
          message: "Es ist 22 Uhr."
        data:
          data:
            tag: 'notification-about-sensor'

  - alias: 'Turn on Airplane Mode Fabi'
    initial_state: on
    trigger:
      platform: time
      at: '23:30:00'
    condition:
      condition: and
      conditions:
        - condition: time
          weekday:
            - mon
            - tue
            - wed
            - thu
            - sun
        - condition: state
          entity_id: device_tracker.fabianphone
          state: home
        - condition: template
          value_template: >
            {% set domain = 'light' %}
            {% set state = 'off' %}
            {{ states[domain] | count == states[domain] | selectattr('state','eq', state) | list | count }}
    action:
      - service: notify.mobile_app_mi_9t
        data_template:
          title: "Flugmodus"
          message: "Flugmodus wurde vergessen und wird nun automatisch aktiviert!"
        data:
          data:
            tag: 'notification-about-sensor'

  - alias: 'Turn on Airplane Mode Nessie'
    initial_state: on
    trigger:
      platform: time
      at: '23:30:00'
    condition:
      condition: and
      conditions:
        - condition: time
          weekday:
            - mon
            - tue
            - wed
            - thu
            - sun
        - condition: state
          entity_id: device_tracker.nessiephone
          state: home
        - condition: template
          value_template: >
            {% set domain = 'light' %}
            {% set state = 'off' %}
            {{ states[domain] | count == states[domain] | selectattr('state','eq', state) | list | count }}
    action:
      - service: notify.mobile_app_mi_9t_2
        data_template:
          title: "Flugmodus"
          message: "Flugmodus wurde vergessen und wird nun automatisch aktiviert!"
        data:
          data:
            tag: 'notification-about-sensor'

  - alias: 'Remind Nessie for pill'
    initial_state: on
    trigger:
      platform: time
      at: '19:50:00'
    action:
      - service: notify.telegram_nessie
        data:
          message: "Pille nehmen nicht vergessen!"
          data:
            inline_keyboard:
            - 'Erledigt:/pilldone, Erinnern1h:/pill1h'

  #- alias: 'Remind Nessie for overtime'
  #  initial_state: on
  #  trigger:
  #    platform: time
  #    at: '16:15:00'
  #  condition:
  #    - condition: time
  #      weekday:
  #        - mon
  #        - tue
  #        - wed
  #        - thu
  #        - fri
  #  action:
  #    - service: notify.telegram_nessie
  #      data:
  #        message: "Hast du heute Überstunden gemacht oder eingelöst?"
  #        data:
  #          inline_keyboard:
  #          - 'Nein:/telegramno, 0-5h:/overtime05, 1-0h:/overtime10, 1-5h:/overtime15, 2-0h:/overtime20, -0-5h:/overtime-05'

  #- alias: 'Telegram overtime-05'
  #  initial_state: on
  #  trigger:
  #    platform: event
  #    event_type: telegram_callback
  #    event_data:
  #      data: '/overtime-05'
  #  action:
  #    - service: telegram_bot.edit_replymarkup
  #      data_template:
  #        message_id: '{{ trigger.event.data.message.message_id }}'
  #        chat_id: '{{ trigger.event.data.user_id }}'
  #        inline_keyboard: []
  #    - service: shell_command.overtime_input
  #      data_template:
  #          hours_overtime: '-0,5'
  #    - service: notify.telegram_nessie
  #      data:
  #        title: 'Eine Halbe Überstunde wurde für heute eingelöst.'
  #        message: "Überstunden Übersicht: https://smartlife.ddns.net/overtime"

  #- alias: 'Telegram overtime05'
  #  initial_state: on
  #  trigger:
  #    platform: event
  #    event_type: telegram_callback
  #    event_data:
  #      data: '/overtime05'
  #  action:
  #    - service: telegram_bot.edit_replymarkup
  #      data_template:
  #        message_id: '{{ trigger.event.data.message.message_id }}'
  #        chat_id: '{{ trigger.event.data.user_id }}'
  #        inline_keyboard: []
  #    - service: shell_command.overtime_input
  #      data_template:
  #          hours_overtime: '-0,5'
  #    - service: notify.telegram_nessie
  #      data:
  #        title: 'Eine Halbe Überstunde wurde für heute eingetragen.'
  #        message: "Überstunden Übersicht: https://smartlife.ddns.net/overtime"

  #- alias: 'Telegram overtime10'
  #  initial_state: on
  #  trigger:
  #    platform: event
  #    event_type: telegram_callback
  #    event_data:
  #      data: '/overtime10'
  #  action:
  #    - service: telegram_bot.edit_replymarkup
  #      data_template:
  #        message_id: '{{ trigger.event.data.message.message_id }}'
  #        chat_id: '{{ trigger.event.data.user_id }}'
  #        inline_keyboard: []
  #    - service: shell_command.overtime_input
  #      data_template:
  #          hours_overtime: '-0,5'
  #    - service: notify.telegram_nessie
  #      data:
  #        title: 'Eine Überstunde wurde für heute eingetragen.'
  #        message: "Überstunden Übersicht: https://smartlife.ddns.net/overtime"

  #- alias: 'Telegram overtime15'
  #  initial_state: on
  #  trigger:
  #    platform: event
  #    event_type: telegram_callback
  #    event_data:
  #      data: '/overtime15'
  #  action:
  #    - service: telegram_bot.edit_replymarkup
  #      data_template:
  #        message_id: '{{ trigger.event.data.message.message_id }}'
  #        chat_id: '{{ trigger.event.data.user_id }}'
  #        inline_keyboard: []
  #    - service: shell_command.overtime_input
  #      data_template:
  #          hours_overtime: '-0,5'
  #    - service: notify.telegram_nessie
  #      data:
  #        title: '1,5 Überstunden wurden für heute eingetragen.'
  #        message: "Überstunden Übersicht: https://smartlife.ddns.net/overtime"

  #- alias: 'Telegram overtime20'
  #  initial_state: on
  #  trigger:
  #    platform: event
  #    event_type: telegram_callback
  #    event_data:
  #      data: '/overtime20'
  #  action:
  #    - service: telegram_bot.edit_replymarkup
  #      data_template:
  #        message_id: '{{ trigger.event.data.message.message_id }}'
  #        chat_id: '{{ trigger.event.data.user_id }}'
  #        inline_keyboard: []
  #    - service: shell_command.overtime_input
  #      data_template:
  #          hours_overtime: '-0,5'
  #    - service: notify.telegram_nessie
  #      data:
  #        title: 'Zwei Überstunden wurden für heute eingetragen.'
  #        message: "Überstunden Übersicht: https://smartlife.ddns.net/overtime"

  - alias: 'Telegram urgent message'
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/urgent'
    action:
      - service: telegram_bot.send_message
        data_template:
          target: "{{ trigger.event.data.user_id }}"
          message: 'Alle Google Homes werden Fabi/Nessie über eine wichtige Nachricht bescheid geben.'
      - service: media_player.volume_set
        data:
          volume_level: 0.7
          entity_id: media_player.wohnzimmer_mini
      - service: tts.google_say
        entity_id: 
        - media_player.wohnzimmer_mini
        - media_player.schlafzimmer
        - media_player.gastezimmer_mini
        data_template:
          message: >
            Wichtige Nachricht von
            {% if ("trigger.event.data.user_id", "649657901")%} 
            Fabian 
            {% elif ("trigger.event.data.user_id", "654536464")%} 
            Nessie
            {% elif ("trigger.event.data.user_id", "665446537")%} 
            Kai
            {% elif ("trigger.event.data.user_id", "159366362")%} 
            Adri
            {% elif ("trigger.event.data.user_id", "668937527")%} 
            Flo
            {% elif ("trigger.event.data.user_id", "610791756")%} 
            Maxi
            {% else %}
            jemandem
            {% endif %}
            . Schau auf dein Handy!
      - service: media_player.volume_set
        data:
          volume_level: 0.3
          entity_id: media_player.wohnzimmer_mini

  - alias: 'Telegram open door'
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/open'
    condition:
      - condition: not
        conditions:
        - condition: state
          entity_id: switch.schloss
          state: unavailable
    action:
      - service: switch.turn_on
        data:
          entity_id: switch.schloss
      - service: telegram_bot.send_message
        data_template:
          target: "{{ trigger.event.data.user_id }}"
          message: 'Gartentor wurde geöffnet.'

  - alias: 'Telegram open door not working'
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/open'
    condition:
      - condition: state
        entity_id: switch.schloss
        state: 'unavailable'
    action:
      - service: telegram_bot.send_message
        data_template:
          target: "{{ trigger.event.data.user_id }}"
          message: 'Der Gartentoröffner ist aktuell offline. Das Gartentor wurde NICHT geöffnet. Fabian wurde informiert.'
      - service: notify.telegram_fabian
        data:
          message: "Gartentoröffner ist offline! Bitte neustarten."

  - alias: 'Telegram open door - secretly'
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/alohomora'
    action:
      - service: switch.turn_on
        data:
          entity_id: switch.schloss
      - service: telegram_bot.send_message
        data_template:
          target: "{{ trigger.event.data.user_id }}"
          message: 'Du hast ein Easter Egg gefunden. Gartentor wurde geöffnet'

  - alias: 'Telegram virtual bell'
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/klingel'
    action:
      - service: media_player.volume_set
        data:
          volume_level: 0.7
          entity_id: media_player.wohnzimmer_mini
      - service: tts.google_say
        entity_id: media_player.wohnzimmer_mini
        data_template:
          message: >
            Ding Dong, es klingelt.
            {% if ("trigger.event.data.user_id", "649657901")%} 
            Fabian 
            {% elif ("trigger.event.data.user_id", "654536464")%} 
            Nessie
            {% elif ("trigger.event.data.user_id", "665446537")%} 
            Kai
            {% elif ("trigger.event.data.user_id", "159366362")%} 
            Adri
            {% else %}
            Jemand
            {% endif %}
            ist da.
      - service: androidtv.adb_command
        data:
          entity_id: media_player.keller_tv
          command: "am start -a android.intent.action.VIEW -d /sdcard/doorbell.wav -t audio/wav"
      - service: telegram_bot.send_message
        data_template:
          target: "{{ trigger.event.data.user_id }}"
          message: 'Klingel in Wohnung aktiviert.'
      - service: media_player.volume_set
        data:
          volume_level: 0.3
          entity_id: media_player.wohnzimmer_mini

  - alias: 'Telegram pill marked done'
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_callback
      event_data:
        data: '/pilldone'
    action:
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'Okay.'
      - service: telegram_bot.edit_replymarkup
        data_template:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: '{{ trigger.event.data.user_id }}'
          inline_keyboard: []

  - alias: 'Nessie forgot pill'
    initial_state: on
    trigger:
      - platform: time
        at: '23:00'
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ states.automation.telegram_pill_marked_done.attributes.last_triggered != 'null' }}"
        - condition: template
          value_template: "{{ states.device_tracker.google_maps_112056758146194246561.state == 'home' }}"
        - condition: template
          value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.telegram_pill_marked_done.attributes.last_triggered) | int > 10800 }}"
    action:
      - service: tts.google_say
        entity_id: media_player.schlafzimmer
        data:
          message: 'Nessie, du hast die Pille vergessen'
      - service: notify.telegram_nessie
        data:
          message: "Du hast die Pille vergessen!"
          data:
            inline_keyboard:
            - 'Erledigt:/pilldone, Erinnern1h:/pill1h'

  - alias: 'Telegram pill 1h'
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_callback
      event_data:
        data: '/pill1h'
    action:
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'Okay, eine Stunde'
      - service: telegram_bot.edit_replymarkup
        data_template:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: '{{ trigger.event.data.user_id }}'
          inline_keyboard: []
      - delay: '00:60:00'
      - service: notify.telegram_nessie
        data:
          message: "Pille nehmen nicht vergessen!"
          data:
            inline_keyboard:
            - 'Erledigt:/pilldone, Erinnern1h:/pill1h'

  - alias: 'Telegram shutdown fpc'
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_callback
      event_data:
        data: '/shutdownfpc'
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.fabian_pc
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'PC wird heruntergefahren, Strom wird nach 4 Minuten ausgeschaltet.'
      - service: telegram_bot.edit_replymarkup
        data_template:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: '{{ trigger.event.data.user_id }}'
          inline_keyboard: []
      - delay: '00:04:00'
      - service: switch.turn_off
        data:
          entity_id: switch.fabian_strom

  - alias: 'Telegram hibernate fpc'
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_callback
      event_data:
        data: '/hibernatefpc'
    action:
      - service: shell_command.hibernatefpc
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'OK, PC wird in Ruhezustand gestellt.'
      - service: telegram_bot.edit_replymarkup
        data_template:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: '{{ trigger.event.data.user_id }}'
          inline_keyboard: []

  - alias: 'Telegram shutdown npc'
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_callback
      event_data:
        data: '/shutdownnpc'
    action:
      - service: shell_command.shutdownnpc
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'PC wird heruntergefahren, Strom wird nach 4 Minuten ausgeschaltet.'
      - service: telegram_bot.edit_replymarkup
        data_template:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: '{{ trigger.event.data.user_id }}'
          inline_keyboard: []
      - delay: '00:04:00'
      - service: switch.turn_off
        data:
          entity_id: switch.nessie_pc

  - alias: 'Telegram hibernate npc'
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_callback
      event_data:
        data: '/hibernatenpc'
    action:
      - service: shell_command.hibernatenpc
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'OK, PC wird in Ruhezustand gestellt.'
      - service: telegram_bot.edit_replymarkup
        data_template:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: '{{ trigger.event.data.user_id }}'
          inline_keyboard: []

  - alias: Telegram Reboot HA
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/rebootha'
    action:
      - service: telegram_bot.send_message
        data_template:
          target: "{{ trigger.event.data.user_id }}"
          message: "Restarting Homeassistant Container..."
      - service: homeassistant.restart

  - alias: Telegram Reboot
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/reboot'
    action:
      - service: telegram_bot.send_message
        data_template:
          target: "{{ trigger.event.data.user_id }}"
          message: "Rebooting Server..."
      - delay: 00:00:05
      - service: shell_command.restartha

  - alias: Telegram Help
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/help'
    action:
      - service: telegram_bot.send_message
        data_template:
          target: "{{ trigger.event.data.user_id }}"
          message: "Hier sind ein paar Befehle:
          
          /admin - Übersicht der Admin Befehle
          /food - zufälliger Essensvorschlag"

  - alias: Telegram Admin
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/admin'
    action:
      - service: telegram_bot.send_message
        data_template:
          target: "{{ trigger.event.data.user_id }}"
          message: "Hier sind ein paar Befehle:
          
          /rebootha - Neustart Homeassistant Container
          /reboot - Neustart Homeassistant Core
          /status - Homeassistant Status
          /updateha - Homeassistant Update starten"

  - alias: Telegram Status
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/status'
    action:
      - service: telegram_bot.send_message
        data_template:
          target: "{{ trigger.event.data.user_id }}"
          message: "System is online!
          Last system reboot was on {{ states('sensor.last_boot') }}."

  - alias: 'Tägliche Essensvorschläge'
    initial_state: on
    trigger:
      platform: time
      at: '16:00:00'
    action:
      - service: shell_command.randomfood
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_fabian
          message: 'Gericht heute zubereiten?'
          disable_notification: true
          inline_keyboard:
            - 'Ja:/foodyes, Nein:/telegramno'
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_nessie
          message: 'Gericht heute zubereiten?'
          disable_notification: true
          inline_keyboard:
            - 'Ja:/foodyes, Nein:/foodno'

  - alias: Telegram Essen
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/food'
    action:
      - service: shell_command.randomfood
        data_template:
          telegram_sender: '{{ trigger.event.data.user_id }}'
      - service: telegram_bot.send_message
        data_template:
          title: 'Gericht heute zubereiten?'
          target: "{{ trigger.event.data.user_id }}"
          message: ''
          disable_notification: true
          inline_keyboard:
            - 'Ja:/foodyes, Nein:/foodno'

  - alias: Telegram Essen Vegetarisch
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/foodv'
    action:
      - service: shell_command.randomfood
        data_template:
          telegram_sender: '{{ trigger.event.data.user_id }}'
          vegetarisch: 'j'
      - service: telegram_bot.send_message
        data_template:
          title: 'Gericht heute zubereiten?'
          target: "{{ trigger.event.data.user_id }}"
          message: ''
          disable_notification: true
          inline_keyboard:
            - 'Ja:/foodyes, Nein:/foodno'

  - alias: Telegram Essen Fleisch
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/foodn'
    action:
      - service: shell_command.randomfood
        data_template:
          telegram_sender: '{{ trigger.event.data.user_id }}'
          vegetarisch: 'n'
      - service: telegram_bot.send_message
        data_template:
          title: 'Gericht heute zubereiten?'
          target: "{{ trigger.event.data.user_id }}"
          message: ''
          disable_notification: true
          inline_keyboard:
            - 'Ja:/foodyes, Nein:/foodno'

  - alias: 'Telegram food yes'
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_callback
      event_data:
        data: '/foodyes'
    action:
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'Okay.'
      - service: telegram_bot.edit_replymarkup
        data_template:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: !secret telegram_chat_nessie
          inline_keyboard: []
      - service: telegram_bot.edit_replymarkup
        data_template:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: !secret telegram_chat_fabian 
          inline_keyboard: []
      - service: shell_command.foodyes
      
  - alias: 'Telegram food no'
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_callback
      event_data:
        data: '/foodno'
    action:
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'Okay, neues Essen.'
      - service: telegram_bot.edit_replymarkup
        data_template:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: '{{ trigger.event.data.user_id }}'
          inline_keyboard: []
      - service: shell_command.randomfood
        data_template:
          telegram_sender: '{{ trigger.event.data.user_id }}'
      - service: telegram_bot.send_message
        data_template:
          title: 'Gericht heute zubereiten?'
          target: "{{ trigger.event.data.user_id }}"
          message: ''
          disable_notification: true
          inline_keyboard:
            - 'Ja:/foodyes, Nein:/foodno'

  - alias: 'Telegram answer no'
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_callback
      event_data:
        data: '/telegramno'
    action:
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'Okay.'
      - service: telegram_bot.edit_replymarkup
        data_template:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: '{{ trigger.event.data.user_id }}'
          inline_keyboard: []
          
  - alias: 'Telegram answer cancel light turn off'
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_callback
      event_data:
        data: '/cancellight'
    action:
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'Licht wird in 20 Minuten NICHT ausgeschaltet.'
      - service: telegram_bot.edit_replymarkup
        data_template:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: '{{ trigger.event.data.user_id }}'
          inline_keyboard: []

  - alias: Turn off fridge
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_callback
      event_data:
        data: '/fridgeoff'
    action:
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.kuehlschrank_keller
    # - service: telegram_bot.answer_callback_query
    #   data_template:
    #     callback_query_id: '{{ trigger.event.data.id }}'
    #     message: 'Okay, wird ausgeschaltet.'
    - service: telegram_bot.send_message
      data_template:
        target: !secret telegram_chat_5friends
        message: 'Kühlschrank wurde wieder ausgeschaltet.'
        disable_notification: true
    - service: telegram_bot.edit_replymarkup
      data_template:
        message_id: '{{ trigger.event.data.message.message_id }}'
        chat_id: '{{ trigger.event.data.user_id }}'
        inline_keyboard: []

  - alias: Telegram HA Update
    initial_state: on
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/updateha'
    action:
      - service: shell_command.updateha
      - service: telegram_bot.send_message
        data_template:
          target: "{{ trigger.event.data.user_id }}"
          message: "Update gestartet."
      - service: telegram_bot.edit_replymarkup
        data_template:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: '{{ trigger.event.data.user_id }}'
          inline_keyboard: []

  # - alias: "Notify Nessie on Train delay Home -> Work"
  # 
  #   initial_state: on
  #   trigger:
  #     - platform: template
  #       value_template: "{{ states.sensor.zorneding_to_trudering.attributes.delay | int > 3 }}"
  #   condition:
  #     condition: and
  #     conditions:
  #       - condition: template
  #         value_template: "{{ states.device_tracker.google_maps_112056758146194246561.state != 'home' }}"
  #       - condition: time
  #         after: '06:30:00'
  #         before: '07:10:00'
  #         weekday:
  #           - mon
  #           - tue
  #           - fri
  #   action:
  #     - service: notify.telegram_nessie
  #       data:
  #         title: "Ubahn um {{ states.sensor.zorneding_to_trudering.attributes.departure }} hat +{{ states.sensor.zorneding_to_trudering.attributes.delay }} min Verspätung."
  #         message: "Nächste Fahrtmöglichkeit: {{ states.sensor.zorneding_to_trudering.attributes.next }} Uhr"

  - alias: "Notify Fabi on sbahn delay Home -> Work"
    initial_state: on
    trigger:
      - platform: template
        value_template: "{{ states.sensor.zorneding_to_trudering.attributes.delay | int > 5 }}"
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ (as_timestamp(now())-as_timestamp(states.device_tracker.google_maps_112056758146194246561.last_seen)) < 3600 }}"
        - condition: time
          after: '06:30:00'
          before: '07:10:00'
          weekday:
            - mon
            - tue
            - wed
            - thu
            - fri
    action:
      - service: notify.telegram_fabian
        data:
          title: "Sbahn um {{ states.sensor.zorneding_to_trudering.attributes.departure }} hat +{{ states.sensor.zorneding_to_trudering.attributes.delay }} min Verspätung."
          message: "Nächste Sbahn: {{ states.sensor.zorneding_to_trudering.attributes.next }} Uhr"

  - alias: "Notify on Sbahn delay Work -> Home"
    initial_state: on
    trigger:
      - platform: template
        value_template: "{{ states.sensor.starnberg_nord_to_zorneding.attributes.delay | int > 3 }}"
    condition:
      condition: and
      conditions:
        - condition: time
          after: '16:45:00'
          before: '17:30:00'
          weekday:
            - mon
            - tue
            - wed
            - thu
        - condition: template
          value_template: "{{ states.device_tracker.google_maps_112174659110860535869.state != 'home' }}"
    action:
      - service: notify.telegram_fabian
        data:
          title: "Sbahn um {{ states.sensor.starnberg_nord_to_zorneding.attributes.departure }} Uhr nach Hause +{{ states.sensor.starnberg_nord_to_zorneding.attributes.delay }} min."
          message: "Nächste Sbahn: {{ states.sensor.starnberg_nord_to_zorneding.attributes.next }} Uhr"

  - alias: 'Notify on Sbahn delay Work Nessie -> Home'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.google_maps_112056758146194246561
        from: 'Arbeit Nessie'
        to: 'not_home'
    condition:
      - condition: template
        value_template: "{{ states.sensor.trudering_to_zorneding.attributes.delay | int > 3 }}"
    action:
      - service: notify.telegram_nessie
        data:
          message: "Sbahn in Trudering um {{ states.sensor.trudering_to_zorneding.attributes.departure }} Uhr hat voraussichtlich {{ states.sensor.trudering_to_zorneding.attributes.delay }} min Verspätung."

  - alias: 'Notify Nessie Fabian on way home'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.google_maps_112174659110860535869
        from: 'Arbeit Fabi'
        to: 'not_home'
    condition:
      - condition: time
        after: '14:00:00'
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri
    action:
      - service: notify.telegram_nessie
        data:
          message: "Fabian ist auf dem Weg nach Hause von Starnberg und kommt voraussichtlich um {{ states.sensor.starnberg_nord_to_zorneding.attributes.arrival }} Uhr mit {{ states.sensor.starnberg_nord_to_zorneding.attributes.delay }} min Verspätung in Zorneding an."

  - alias: 'Notify Nessie Fabian on way home from GIL'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.google_maps_112174659110860535869
        from: 'Arbeit Fabi GIL'
        to: 'not_home'
    condition:
      - condition: time
        after: '14:00:00'
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri
    action:
      - service: notify.telegram_nessie
        data:
          message: "Fabian ist auf dem Weg nach Hause von Gilching und kommt voraussichtlich in 1,25 Stunden nach Hause."

  - alias: 'Notify Nessie Fabian on way home from MUC'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.google_maps_112174659110860535869
        from: 'Arbeit Fabi MUC'
        to: 'not_home'
    condition:
      - condition: time
        after: '14:00:00'
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri
    action:
      - service: notify.telegram_nessie
        data:
          message: "Fabian ist auf dem Weg nach Hause von Gräfelfing und kommt voraussichtlich in einer Stunde in Zorneding an."

  - alias: 'Notify Nessie Fabian on way home from WHM'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.google_maps_112174659110860535869
        from: 'Arbeit Fabi WHM'
        to: 'not_home'
    condition:
      - condition: time
        after: '14:00:00'
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri
    action:
      - service: notify.telegram_nessie
        data:
          message: "Fabian ist auf dem Weg nach Hause von Weilheim. Da er mit dem Auto fährt ist keine Zeitangabe möglich. Voraussichtlich daheim in ca. 1,5 Stunden."

  - alias: 'Notify Fabian Nessie on way home'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.google_maps_112056758146194246561
        from: 'Arbeit Nessie'
        to: 'not_home'
    condition:
      - condition: time
        after: '13:15:00'
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri
    action:
      - service: notify.telegram_fabian
        data:
          message: "Nessie ist auf dem Weg nach Hause und kommt voraussichtlich um {{ states.sensor.silberhornstrasse_to_zorneding.attributes.arrival }} Uhr mit {{ states.sensor.silberhornstrasse_to_zorneding.attributes.delay }} min Verspätung in Zorneding an."

  - alias: 'Notify Fabian Nessie on way home - ghome'
    initial_state: on
    trigger:
      - platform: state
        entity_id:
          - device_tracker.google_maps_112056758146194246561
        from: 'Arbeit Nessie'
        to: 'not_home'
    condition:
      - condition: time
        after: '13:15:00'
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri
      - condition: state
        entity_id: device_tracker.fabianphone
        state: home
      - condition: state
        entity_id: 'input_boolean.silent_mode'
        state: 'off'
    action:
      - service: tts.google_say
        entity_id: 
        - media_player.wohnzimmer_mini
        - media_player.schlafzimmer
        - media_player.gastezimmer_mini
        data_template:
          message: 'Nessie ist auf dem Weg nach Hause und kommt voraussichtlich um {{ states.sensor.silberhornstrasse_to_zorneding.attributes.arrival }} Uhr mit {{ states.sensor.silberhornstrasse_to_zorneding.attributes.delay }} min Verspätung in Zorneding an.'

  - alias: 'Telegram send weekly corona stats'
    initial_state: true
    trigger:
      platform: time
      at: '18:00:00'
    condition:
      - condition: time
        weekday:
          - sat
    action:
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_nessie
          disable_notification: true
          message: >
            Aktuelle Corona Zahlen für Deutschland. 
            
            
            Bestätigte Corona Infizierte: {{ states.sensor.germany_coronavirus_confirmed.state }}
            
            Bestätigte Corona Todesfälle: {{ states.sensor.germany_coronavirus_deaths.state }}
            
            Genesene Corona Fälle: {{ states.sensor.germany_coronavirus_recovered.state }}
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_fabian
          disable_notification: true
          message: >
            Aktuelle Corona Zahlen für Deutschland. 
            
            
            Bestätigte Corona Infizierte: {{ states.sensor.germany_coronavirus_confirmed.state }}
            
            Bestätigte Corona Todesfälle: {{ states.sensor.germany_coronavirus_deaths.state }}
            
            Genesene Corona Fälle: {{ states.sensor.germany_coronavirus_recovered.state }}
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_kai
          disable_notification: true
          message: >
            Aktuelle Corona Zahlen für Deutschland. (Falls du diese Nachricht nicht haben möchtest, gib Fabi bescheid)
            
            
            Bestätigte Corona Infizierte: {{ states.sensor.germany_coronavirus_confirmed.state }}
            
            Bestätigte Corona Todesfälle: {{ states.sensor.germany_coronavirus_deaths.state }}
            
            Genesene Corona Fälle: {{ states.sensor.germany_coronavirus_recovered.state }}
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_adrian
          disable_notification: true
          message: >
            Aktuelle Corona Zahlen für Deutschland. (Falls du diese Nachricht nicht haben möchtest, gib Fabi bescheid)
            
            
            Bestätigte Corona Infizierte: {{ states.sensor.germany_coronavirus_confirmed.state }}
            
            Bestätigte Corona Todesfälle: {{ states.sensor.germany_coronavirus_deaths.state }}
            
            Genesene Corona Fälle: {{ states.sensor.germany_coronavirus_recovered.state }}

  - alias: 'Telegram send weather forecast'
    initial_state: true
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/weather'
    action:
      - service: telegram_bot.send_photo
        data_template:
          target: '{{ trigger.event.data.user_id }}'
          disable_notification: true
          file: '/home/homeassistant/.homeassistant/www/climacons/{{ states.sensor.dark_sky_icon.state }}.png'
          caption: '{{ states.sensor.dark_sky_summary.state }}'
      - service: telegram_bot.send_message
        data_template:
          target: '{{ trigger.event.data.user_id }}'
          disable_notification: true
          message: >
            {{ states.sensor.dark_sky_hourly_summary.state }}


            *Momentan {{ states.sensor.dark_sky_temperature.state_with_unit }}*


            {{ states.sensor.dark_sky_overnight_low_temperature_0d.state_with_unit }} {{ '\u21F5' }} {{ states.sensor.dark_sky_daytime_high_temperature_0d.state_with_unit }}

            {{ states.sensor.dark_sky_overnight_low_apparent_temperature_0d.state_with_unit }} {{ '\u21F5' }} {{ states.sensor.dark_sky_daytime_high_apparent_temperature_0d.state_with_unit }} (gefühlt)


            Regen: {{ states.sensor.dark_sky_precip_probability.state_with_unit }}, {{ states.sensor.dark_sky_precip_intensity.state_with_unit }}
            {% if not is_state('sensor.dark_sky_precip', 'unknown') %}

            Art des Niederschlags: {{ states.sensor.dark_sky_precip.state }}
            {% endif %}

  - alias: 'Telegram send weekly weather forecast'
    initial_state: true
    trigger:
      platform: time
      at: '06:20:00'
    condition:
      - condition: time
        weekday:
          - mon
    action:
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_fabian
          disable_notification: false
          message: "Wettervorhersage für diese Woche: 
          {{ states.sensor.dark_sky_daily_summary.state }}"
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_nessie
          disable_notification: false
          message: "Wettervorhersage für diese Woche: 
          {{ states.sensor.dark_sky_daily_summary.state }}"

  - alias: 'Telegram send daily weather forecast fabian'
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - device_tracker.fabianphone
        from: 'not_home'
        to: 'home'
    condition:
      - condition: time
        before: '10:00:00'
      - condition: time
        after: '05:00:00'
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.telegram_send_daily_weather_forecast_fabian.attributes.last_triggered) | int > 10800 }}"
    action:
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_fabian
          disable_notification: true
          message: >
            Wettervorhersage für heute
            {{ states.sensor.dark_sky_hourly_summary.state }}

            *Momentan {{ states.sensor.dark_sky_temperature.state_with_unit }}*

            {{ states.sensor.dark_sky_overnight_low_temperature_0d.state_with_unit }} {{ '\u21F5' }} {{ states.sensor.dark_sky_daytime_high_temperature_0d.state_with_unit }}

            {{ states.sensor.dark_sky_overnight_low_apparent_temperature_0d.state_with_unit }} {{ '\u21F5' }} {{ states.sensor.dark_sky_daytime_high_apparent_temperature_0d.state_with_unit }} (gefühlt)

            Regen: {{ states.sensor.dark_sky_precip_probability.state_with_unit }}, {{ states.sensor.dark_sky_precip_intensity.state_with_unit }}
            {% if not is_state('sensor.dark_sky_precip', 'unknown') %}

            Art des Niederschlags: {{ states.sensor.dark_sky_precip.state }}
            {% endif %}

  - alias: 'Telegram send daily weather forecast nessie'
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - device_tracker.nessiephone
        from: 'not_home'
        to: 'home'
    condition:
      - condition: time
        before: '10:00:00'
      - condition: time
        after: '05:00:00'
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.automation.telegram_send_daily_weather_forecast_nessie.attributes.last_triggered) | int > 10800 }}"
    action:
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_nessie
          disable_notification: true
          message: >
            Wettervorhersage für heute
            {{ states.sensor.dark_sky_hourly_summary.state }}

            *Momentan {{ states.sensor.dark_sky_temperature.state_with_unit }}*

            {{ states.sensor.dark_sky_overnight_low_temperature_0d.state_with_unit }} {{ '\u21F5' }} {{ states.sensor.dark_sky_daytime_high_temperature_0d.state_with_unit }}

            {{ states.sensor.dark_sky_overnight_low_apparent_temperature_0d.state_with_unit }} {{ '\u21F5' }} {{ states.sensor.dark_sky_daytime_high_apparent_temperature_0d.state_with_unit }} (gefühlt)

            Regen: {{ states.sensor.dark_sky_precip_probability.state_with_unit }}, {{ states.sensor.dark_sky_precip_intensity.state_with_unit }}
            {% if not is_state('sensor.dark_sky_precip', 'unknown') %}

            Art des Niederschlags: {{ states.sensor.dark_sky_precip.state }}
            {% endif %}

  - alias: 'remind for jek'
    initial_state: True
    trigger:
      - platform: template
        value_template: "{{ ((as_timestamp(states.calendar.jugendtreffjek_gmail_com.attributes.start_time) - as_timestamp(now())) < 86400) }}"
      - platform: template
        value_template: "{{ is_state_attr('calendar.jugendtreffjek_gmail_com', 'offset_reached', 'true') }}"
    action:
      - service: shell_command.jek_telegram
      #- service: telegram_bot.send_message
      #  data_template:
      #    target: !secret telegram_chat_jek_group
      #    message: 'Im JEK steht am {{ states.calendar.jugendtreffjek_gmail_com.attributes.start_time }} {{ states.calendar.jugendtreffjek_gmail_com.attributes.message }} an.'
